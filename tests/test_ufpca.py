#!/usr/bin/python3
# -*-coding:utf8 -*
"""Module that contains unit tests for the class UFPCA in the fpca.py file.

Written with the help of ChatGPT.

"""
import numpy as np
import unittest
import warnings

from FDApy.representation.functional_data import (
    DenseFunctionalData,
    IrregularFunctionalData
)
from FDApy.simulation.karhunen import KarhunenLoeve
from FDApy.preprocessing.dim_reduction.fpca import UFPCA


class UFPCATest(unittest.TestCase):
    def test_init(self):
        # Test default initialization
        fpca = UFPCA()
        self.assertEqual(fpca.method, 'covariance')
        self.assertIsNone(fpca.n_components)
        self.assertFalse(fpca.normalize)
        self.assertEqual(fpca.weights, 1)

        # Test custom initialization
        fpca = UFPCA(method='inner-product', n_components=3, normalize=True)
        self.assertEqual(fpca.method, 'inner-product')
        self.assertEqual(fpca.n_components, 3)
        self.assertTrue(fpca.normalize)

    def test_method(self):
        ufpc = UFPCA()
        ufpc.method = 'inner-product'
        self.assertEqual(ufpc.method, 'inner-product')

    def test_n_components(self):
        ufpc = UFPCA()
        ufpc.n_components = 4
        self.assertEqual(ufpc.n_components, 4)

    def test_normalize(self):
        ufpc = UFPCA()
        ufpc.normalize = True
        self.assertTrue(ufpc.normalize)


class TestFit(unittest.TestCase):
    def setUp(self):
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.sparsify(0.8, 0.05)
        kl.add_noise(0.05)

        self.fdata_uni = kl.noisy_data
        self.fdata_sparse = kl.sparse_data

    def test_fit_covariance(self):
        uf = UFPCA(n_components=2, method='covariance')
        uf.fit(self.fdata_uni)

        np.testing.assert_almost_equal(self.fdata_uni.argvals['input_dim_0'], uf.mean.argvals['input_dim_0'])

        expected_mean = np.array([[ 0.29045424,  0.27942843,  0.26896556,  0.25900549,   0.24912338,  0.23943513,  0.23017978,  0.22129709,   0.21272427,  0.20442406,  0.19625977,  0.18827046,   0.18051492,  0.17300266,  0.16567253,  0.15854528,   0.15170074,  0.14515442,  0.13889422,  0.13292373,   0.12723889,  0.12183088,  0.11672198,  0.11191495,   0.10740251,  0.10312256,  0.0990593 ,  0.09525083,   0.0916412 ,  0.08829702,  0.08522189,  0.08235639,   0.0797102 ,  0.07729729,  0.07502554,  0.07288924,   0.07088434,  0.06894849,  0.06704019,  0.06518787,   0.06353725,  0.0622083 ,  0.06114953,  0.06021326,   0.05958728,  0.05917813,  0.05893681,  0.05870529,   0.0585545 ,  0.05855088,  0.0586438 ,  0.05874717,   0.05885579,  0.05898676,  0.05921496,  0.05952665,   0.05982694,  0.06017409,  0.06063384,  0.06097649,   0.06123333,  0.0613199 ,  0.06146798,  0.06170739,   0.06197647,  0.06219188,  0.06237853,  0.06259421,   0.0628608 ,  0.06316329,  0.0634289 ,  0.06355304,   0.06354819,  0.06345794,  0.06328595,  0.06294231,   0.06245048,  0.06182061,  0.06104625,  0.06011864,   0.05894954,  0.05751931,  0.05581091,  0.05382092,   0.05151727,  0.04886673,  0.04587648,  0.04255237,   0.03891879,  0.03498621,  0.03068485,  0.02604904,   0.02116039,  0.01604088,  0.01043464,  0.00419863,  -0.0024695 , -0.00948138, -0.01692398, -0.02498189,  -0.03333946]])
        np.testing.assert_array_almost_equal(uf.mean.values, expected_mean)

        self.assertIsInstance(uf.eigenvalues, np.ndarray)
        self.assertIsInstance(uf.eigenfunctions, DenseFunctionalData)
        self.assertIsInstance(uf.covariance, DenseFunctionalData)
        self.assertIsInstance(uf._training_data, DenseFunctionalData)

        expected_eigenvalues = np.array([0.11991524, 0.08933699])
        np.testing.assert_array_almost_equal(uf.eigenvalues, expected_eigenvalues)

        expected_eigenfunctions = np.array([[-1.63014726e+00, -1.45499104e+00, -1.28377829e+00,  -1.12502195e+00, -9.83616243e-01, -8.57834339e-01,  -7.43849772e-01, -6.39871878e-01, -5.45262854e-01,  -4.56458398e-01, -3.72573923e-01, -2.92525563e-01,  -2.13926218e-01, -1.34353279e-01, -5.51191480e-02,   2.08536784e-02,  9.62058739e-02,  1.74156012e-01,   2.53808738e-01,  3.31405540e-01,  4.06894963e-01,   4.84332065e-01,  5.60084372e-01,  6.30492068e-01,   6.94510389e-01,  7.50353230e-01,  7.95635187e-01,   8.30110532e-01,  8.55294738e-01,  8.73126543e-01,   8.87666941e-01,  9.00916564e-01,  9.13971461e-01,   9.28329747e-01,  9.43906067e-01,  9.59474940e-01,   9.77486528e-01,  1.00063752e+00,  1.02678217e+00,   1.05327991e+00,  1.07993020e+00,  1.10487329e+00,   1.12709093e+00,  1.14704665e+00,  1.16659015e+00,   1.18529637e+00,  1.20011411e+00,  1.21179441e+00,   1.22094450e+00,  1.22987724e+00,  1.24013533e+00,   1.24926239e+00,  1.25930915e+00,  1.27163855e+00,   1.28244803e+00,  1.29044256e+00,  1.29562928e+00,   1.30118269e+00,  1.30823162e+00,  1.31608438e+00,   1.32397155e+00,  1.32971754e+00,  1.33409385e+00,   1.33754100e+00,  1.34345389e+00,  1.35136076e+00,   1.35849548e+00,  1.36653356e+00,  1.37890436e+00,   1.39284758e+00,  1.40312884e+00,  1.40928418e+00,   1.40870182e+00,  1.40036408e+00,  1.38687220e+00,   1.36869719e+00,  1.34718816e+00,  1.31816357e+00,   1.28115221e+00,  1.23448744e+00,  1.17784237e+00,   1.11671526e+00,  1.05227487e+00,  9.84819396e-01,   9.17886913e-01,  8.50568831e-01,  7.79240521e-01,   7.02970900e-01,  6.23433906e-01,  5.44338500e-01,   4.65254553e-01,  3.86399749e-01,  3.03775997e-01,   2.15980154e-01,  1.23099628e-01,  2.67271292e-02,  -7.27176351e-02, -1.76405871e-01, -2.83869292e-01,  -3.94441066e-01, -5.23599231e-01], [-2.47689816e+00, -2.36165807e+00, -2.26639987e+00,  -2.19128594e+00, -2.13006212e+00, -2.07686320e+00,  -2.02353134e+00, -1.96860976e+00, -1.91058771e+00,  -1.84779069e+00, -1.78284129e+00, -1.72075837e+00,  -1.65884388e+00, -1.59423696e+00, -1.52622875e+00,  -1.45873634e+00, -1.39178056e+00, -1.32532697e+00,  -1.25769300e+00, -1.18811873e+00, -1.12062631e+00,  -1.05614527e+00, -9.94026753e-01, -9.31728838e-01,  -8.72459454e-01, -8.16292888e-01, -7.66157592e-01,  -7.23619963e-01, -6.84899564e-01, -6.51790533e-01,  -6.21936070e-01, -5.94334840e-01, -5.70559379e-01,  -5.51368599e-01, -5.34324304e-01, -5.16621213e-01,  -4.97177510e-01, -4.71839420e-01, -4.41780469e-01,  -4.09133080e-01, -3.72170646e-01, -3.28886175e-01,  -2.81712761e-01, -2.33711244e-01, -1.82942649e-01,  -1.26684102e-01, -7.13134295e-02, -2.23915632e-02,   2.02975433e-02,  5.48460500e-02,  7.90621918e-02,   8.78033544e-02,  8.36820494e-02,  6.97674105e-02,   5.24276121e-02,  3.32769748e-02,  1.45998289e-02,   1.24047284e-03, -1.20598315e-02, -2.35851498e-02,  -2.98274184e-02, -3.13973961e-02, -2.75963867e-02,  -2.46036750e-02, -2.62834009e-02, -3.06186089e-02,  -3.78862249e-02, -4.55129659e-02, -5.24225838e-02,  -6.08565882e-02, -7.54484440e-02, -9.56518775e-02,  -1.17197325e-01, -1.40235687e-01, -1.68182462e-01,  -2.03240740e-01, -2.41681372e-01, -2.82690505e-01,  -3.26777735e-01, -3.71696035e-01, -4.17228707e-01,  -4.61442045e-01, -5.06680538e-01, -5.54707021e-01,  -6.05382650e-01, -6.58888029e-01, -7.14314195e-01,  -7.73146499e-01, -8.33471513e-01, -8.97596510e-01,  -9.67371782e-01, -1.03856293e+00, -1.10813628e+00,  -1.17590917e+00, -1.24460177e+00, -1.31890754e+00,  -1.39882668e+00, -1.48824860e+00, -1.58911229e+00,  -1.70409942e+00, -1.83291058e+00]])
        np.testing.assert_array_almost_equal(np.abs(uf.eigenfunctions.values), np.abs(expected_eigenfunctions))

        expected_noise = 0.051559586753176664
        np.testing.assert_array_almost_equal(uf._noise_variance, expected_noise)

    def test_fit_inner_product(self):
        uf = UFPCA(n_components=2, method='inner-product', normalize=True)
        uf.fit(self.fdata_sparse)

        np.testing.assert_almost_equal(self.fdata_sparse.argvals.to_dense()['input_dim_0'], uf.mean.argvals['input_dim_0'])

        expected_mean = np.array([[ 0.28376655,  0.27226067,  0.26151169,  0.25122347,   0.24151566,  0.23249356,  0.2237986 ,  0.21527625,   0.20701826,  0.19913702,  0.19159585,  0.1844392 ,   0.17766052,  0.17118638,  0.16501919,  0.15916035,   0.1536228 ,  0.14839666,  0.14346798,  0.13882251,   0.13443622,  0.13029322,  0.12639942,  0.12274674,   0.11929506,  0.11601014,  0.1129029 ,  0.10998983,   0.10724221,  0.10463146,  0.10217847,  0.09990654,   0.0978084 ,  0.09587624,  0.09409314,  0.09244486,   0.09090257,  0.08941525,  0.08794176,  0.08649046,   0.08508513,  0.08368808,  0.08249575,  0.08169721,   0.08115533,  0.08075489,  0.08040056,  0.08009846,   0.07992895,  0.07981205,  0.07967847,  0.07956885,   0.07946866,  0.07935828,  0.07921175,  0.07907922,   0.07889339,  0.07851242,  0.07798815,  0.07735139,   0.07669992,  0.07609985,  0.07550173,  0.07487512,   0.0742502 ,  0.07360217,  0.07290657,  0.07218689,   0.07140302,  0.07060384,  0.06979056,  0.06888127,   0.06785737,  0.06669848,  0.06537975,  0.06389539,   0.06221831,  0.06034092,  0.05828097,  0.05602698,   0.0535707 ,  0.05089959,  0.04800349,  0.04486199,   0.04145401,  0.03778645,  0.03383956,  0.02959964,   0.02513171,  0.02041768,  0.01539678,  0.00996362,   0.00408526, -0.00220905, -0.00887934, -0.01581486,  -0.02315817, -0.03100882, -0.03959173, -0.04895527,  -0.05899069]])
        np.testing.assert_array_almost_equal(uf.mean.values, expected_mean)

        self.assertIsInstance(uf.eigenvalues, np.ndarray)
        self.assertIsInstance(uf.eigenfunctions, DenseFunctionalData)
        self.assertIsInstance(uf.covariance, DenseFunctionalData)
        self.assertIsInstance(uf._training_data, IrregularFunctionalData)

        expected_eigenvalues = np.array([3.54661948, 2.84364594])
        np.testing.assert_array_almost_equal(uf.eigenvalues, expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 1.82484292,  1.69186576,  1.5613364 ,  1.43490649,   1.30977342,  1.19043475,  1.0753156 ,  0.96228953,   0.85487456,  0.75036167,  0.64836968,  0.54871363,   0.45218711,  0.37552176,  0.2895316 ,  0.19689345,   0.1196305 ,  0.04458742, -0.02734514, -0.0950031 ,  -0.1620252 , -0.22734071, -0.28754856, -0.34532666,  -0.40214836, -0.45676793, -0.50620715, -0.55434194,  -0.60021128, -0.64531269, -0.68915136, -0.72882227,  -0.76613106, -0.8028847 , -0.83768717, -0.87078561,  -0.90229102, -0.93260297, -0.96152964, -0.98884177,  -1.01472905, -1.03993663, -1.06373985, -1.0871633 ,  -1.10959609, -1.13128749, -1.15233081, -1.17173959,  -1.19141611, -1.21084515, -1.22957209, -1.24790892,  -1.26604631, -1.28371937, -1.30071657, -1.31589974,  -1.33095077, -1.34452319, -1.35762184, -1.36934864,  -1.37932385, -1.38780791, -1.39463692, -1.39852694,  -1.40079698, -1.40198077, -1.40023118, -1.39572438,  -1.3897652 , -1.38012053, -1.36698013, -1.35156142,  -1.33269872, -1.3119045 , -1.28826533, -1.25899543,  -1.22615256, -1.19046063, -1.14998028, -1.10623378,  -1.05859447, -1.00563619, -0.94875313, -0.88625137,  -0.81924175, -0.74959489, -0.6738367 , -0.5919206 ,  -0.50586294, -0.41270031, -0.31560381, -0.21235088,  -0.10335351,  0.01140301,  0.13153438,  0.25725143,   0.39241732,  0.53857778,  0.68176546,  0.82995867,   0.93159492], [ 2.02139464,  1.97882449,  1.93405103,  1.88929125,   1.84520419,  1.8047213 ,  1.76238027,  1.7172929 ,   1.67242264,  1.62791497,  1.58447451,  1.54019536,   1.49564235,  1.45703657,  1.41509154,  1.36925688,   1.32715364,  1.2869818 ,  1.24731939,  1.20344963,   1.16210334,  1.12408615,  1.08432021,  1.04553446,   1.00637405,  0.96799693,  0.93121255,  0.89388898,   0.85757447,  0.82165185,  0.78635884,  0.75289615,   0.71952028,  0.68657871,  0.65481699,  0.62376278,   0.59384407,  0.56484443,  0.53624922,  0.50870079,   0.48232179,  0.45673022,  0.43236545,  0.40921686,   0.38747636,  0.36641973,  0.34610092,  0.3268875 ,   0.30934659,  0.29290821,  0.27793221,  0.26451645,   0.25205417,  0.24059363,  0.23004452,  0.22229834,   0.21571577,  0.21086034,  0.20616853,  0.20405793,   0.20354439,  0.20442007,  0.20655446,  0.21170153,   0.21839762,  0.22579875,  0.23572665,  0.24779193,   0.26074311,  0.27668569,  0.29457208,  0.31412499,   0.33642913,  0.35961648,  0.38461398,  0.41293419,   0.44383527,  0.47623262,  0.51172899,  0.5489071 ,   0.58896229,  0.63075355,  0.67491581,  0.72114616,   0.77124981,  0.82305351,  0.87811496,  0.93529542,   0.99429214,  1.05756212,  1.12283644,  1.1907861 ,   1.26192796,  1.33513273,  1.41178728,  1.4916955 ,   1.57585078,  1.66057614,  1.74727144,  1.83675047,   1.91063043]])
        np.testing.assert_array_almost_equal(np.abs(uf.eigenfunctions.values), np.abs(expected_eigenfunctions))

        expected_noise = 0.07236562113039097
        np.testing.assert_array_almost_equal(uf._noise_variance, expected_noise)

    def test_fit_inner_product_2d(self):
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, dimension='2D', random_state=42
        )
        kl.new(n_obs=10)
        fdata = kl.data

        uf = UFPCA(n_components=2, method='inner-product')
        with np.testing.assert_warns(UserWarning):
            uf.fit(fdata)

        expected_mean = np.array([ 0.01931551,  0.02921439,  0.03871832,  0.04784962,  0.05662887,  0.06507482,  0.07319529,  0.08100521,  0.08851074,  0.09572043,  0.10263512,  0.10925907,  0.1155975 ,  0.12166136,  0.12747401,  0.13307525,  0.13840131,  0.14321654,  0.14753644,  0.15137652,  0.15475228,  0.15767923,  0.16017289,  0.16224875,  0.16392234,  0.16520915,  0.16612469,  0.16668448,  0.16690402,  0.16679882,  0.16638439,  0.16567623,  0.16468985,  0.16344077,  0.16194449,  0.16021651,  0.15827235,  0.15612744,  0.15379712,  0.15129653,  0.1486406 ,  0.14584395,  0.14292085,  0.13988517,  0.13675034,  0.13352929,  0.13023441,  0.12687751,  0.1234698 ,  0.12002184,  0.11654355,  0.11304417,  0.10953228,  0.10601578,  0.10250193,  0.09899734,  0.09550803,  0.09203942,  0.08859641,  0.08518338,  0.08180429,  0.07846269,  0.07516177,  0.07190444,  0.06869336,  0.06553103,  0.06241982,  0.05936205,  0.05636003,  0.05341608,  0.05053251,  0.04771162,  0.04495574,  0.04226718,  0.03964824,  0.03710124,  0.0346285 ,  0.03223232,  0.02991502,  0.02767891,  0.02552631,  0.02345952,  0.02148085,  0.01959263,  0.01779716,  0.01609676,  0.01444709,  0.0128357 ,  0.01127366,  0.00977023,  0.00833211,  0.00696422,  0.00567024,  0.00445352,  0.00331634,  0.00226106,  0.00128934,  0.00040323, -0.00039582, -0.00110645, -0.00172746])
        np.testing.assert_array_almost_equal(uf.mean.values[0, 1], expected_mean)

        self.assertIsInstance(uf.eigenvalues, np.ndarray)
        self.assertIsInstance(uf.eigenfunctions, DenseFunctionalData)
        self.assertIsInstance(uf._training_data, DenseFunctionalData)

        expected_eigenvalues = np.array([0.01098397, 0.0048397 ])
        np.testing.assert_array_almost_equal(uf.eigenvalues, expected_eigenvalues)

        expected_eigenfunctions = np.array([ 1.68068784e-04,  2.42681711e-01,  4.73658490e-01,  6.93320545e-01,  9.01890003e-01,  1.09958897e+00,  1.28663947e+00,  1.46326357e+00,  1.62968328e+00,  1.78612061e+00,  1.93279752e+00,  2.06993600e+00,  2.19775803e+00,  2.31648565e+00,  2.42634103e+00,  2.52754645e+00,  2.62032330e+00,  2.70489148e+00,  2.78147307e+00,  2.85029015e+00,  2.91156480e+00,  2.96551911e+00,  3.01237516e+00,  3.05235503e+00,  3.08568080e+00,  3.11257455e+00,  3.13325837e+00,  3.14795433e+00,  3.15688452e+00,  3.16027102e+00,  3.15833591e+00,  3.15130128e+00,  3.13938920e+00,  3.12282175e+00,  3.10182102e+00,  3.07660910e+00,  3.04740805e+00,  3.01443997e+00,  2.97792693e+00,  2.93809101e+00,  2.89515429e+00,  2.84933884e+00,  2.80086673e+00,  2.74996004e+00,  2.69684081e+00,  2.64173113e+00,  2.58485302e+00,  2.52642856e+00,  2.46667978e+00,  2.40582872e+00,  2.34409741e+00,  2.28168355e+00,  2.21868753e+00,  2.15518538e+00,  2.09125314e+00,  2.02696684e+00,  1.96240252e+00,  1.89763620e+00,  1.83274388e+00,  1.76780159e+00,  1.70288534e+00,  1.63807113e+00,  1.57343496e+00,  1.50905283e+00,  1.44500075e+00,  1.38135471e+00,  1.31819070e+00,  1.25558472e+00,  1.19361277e+00,  1.13235084e+00,  1.07187493e+00,  1.01226102e+00,  9.53585125e-01,  8.95923230e-01,  8.39351330e-01,  7.83945423e-01,  7.29781503e-01,  6.76935565e-01,  6.25483605e-01,  5.75501617e-01,  5.27065598e-01,  4.80251541e-01,  4.35135443e-01,  3.91793298e-01,  3.50301102e-01,  3.10734850e-01,  2.73170131e-01,  2.37682812e-01,  2.04348965e-01,  1.73244644e-01,  1.44445884e-01,  1.18028702e-01,  9.40691058e-02,  7.26430989e-02,  5.38266765e-02,  3.76958343e-02,  2.43265617e-02,  1.37948515e-02,  6.17669171e-03,  1.54806896e-03, -1.50310514e-05])
        np.testing.assert_array_almost_equal(np.abs(uf.eigenfunctions.values[0, 1]), np.abs(expected_eigenfunctions))

        expected_noise = 0.0
        np.testing.assert_array_almost_equal(uf._noise_variance, expected_noise)

    def test_error_method(self):
        uf = UFPCA(n_components=2, method='error')
        with self.assertRaises(NotImplementedError):
            uf.fit(self.fdata_uni)

    def test_error_covariance_2d(self):
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, dimension='2D'
        )
        kl.new(n_obs=10)

        uf = UFPCA(n_components=2, method='covariance')
        with self.assertRaises(ValueError):
            uf.fit(kl.data)


class TestTransform(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.sparsify(0.8, 0.05)

        self.fdata_uni = kl.data
        self.fdata_sparse = kl.sparse_data

        uf_dense = UFPCA(n_components=2, method='covariance', normalize=True)
        uf_dense.fit(self.fdata_uni)
        self.uf_dense = uf_dense
        
        uf_sparse = UFPCA(n_components=2, method='inner-product', normalize=True)
        uf_sparse.fit(self.fdata_sparse)
        self.uf_sparse = uf_sparse

    def test_error_innpro(self):
        with self.assertRaises(ValueError):
            self.uf_sparse.transform(self.fdata_uni, method='InnPro')

        with self.assertRaises(ValueError):
            self.uf_dense.transform(None, method='InnPro')

    def test_error_unkown_method(self):
        with self.assertRaises(ValueError):
            self.uf_dense.transform(self.fdata_uni, method='error')
    
    def test_data_none(self):
        scores = self.uf_dense.transform(None, method='NumInt')
        expected_scores = np.array([[ 1.03857683,  1.61120636],[ 0.02698638,  2.33010653],[ 1.38748226, -2.28995058],[ 0.33836467,  0.88750734],[ 0.84348845,  1.02930045],[ 1.29442399, -0.56477517],[-2.83064835, -0.8054215 ],[-2.63650019,  0.01381634],[-0.67908482, -0.68846887],[ 1.34022021, -1.28508822]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))

    def test_data_notnone(self):
        scores = self.uf_dense.transform(self.fdata_uni, method='NumInt')
        expected_scores = np.array([[ 1.16668875,  1.1781701 ],[ 0.1550983 ,  1.89707026],[ 1.51559417, -2.72298685],[ 0.46647658,  0.45447107],[ 0.97160037,  0.59626419],[ 1.42253591, -0.99781144],[-2.70253643, -1.23845777],[-2.50838828, -0.41921993],[-0.55097291, -1.12150514],[ 1.46833212, -1.71812449]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))

    def test_numint(self):
        scores = self.uf_dense.transform(self.fdata_uni, method='NumInt')
        expected_scores = np.array([[ 1.16668875,  1.1781701 ],[ 0.1550983 ,  1.89707026],[ 1.51559417, -2.72298685],[ 0.46647658,  0.45447107],[ 0.97160037,  0.59626419],[ 1.42253591, -0.99781144],[-2.70253643, -1.23845777],[-2.50838828, -0.41921993],[-0.55097291, -1.12150514],[ 1.46833212, -1.71812449]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))
    
        scores = self.uf_sparse.transform(self.fdata_sparse, method='NumInt')
        expected_scores = np.array([[-1.47448809, -1.43914632],[-0.2451687 , -2.36855161],[-1.81009102,  3.44062355],[-0.43170432, -0.37565379],[-1.22147414, -0.72201493],[-1.70518328,  1.31885992],[ 3.37004344,  1.43175512],[ 3.13354181,  0.47121724],[ 0.71058316,  1.38986738],[-1.78064819,  2.18141344]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))

    def test_pace(self):
        scores = self.uf_dense.transform(self.fdata_uni, method='PACE')
        expected_scores = np.array([[ 1.1406154 ,  1.17401501], [ 0.17205472,  1.91685814], [ 1.51264055, -2.71803916], [ 0.48106745,  0.4663187 ], [ 0.95334311,  0.57517276], [ 1.42649532, -0.99910737], [-2.71632551, -1.24535746], [-2.50739818, -0.41797038], [-0.5432319 , -1.10295379], [ 1.47464713, -1.70293616]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))
    
        scores = self.uf_sparse.transform(self.fdata_sparse, method='PACE')
        expected_scores = np.array([[-1.43636235, -1.5555992 ],[-0.28494179, -2.36035226],[-1.86811635,  3.37421264],[-0.48768007, -0.44165171],[-1.1848935 , -0.7100151 ],[-1.76289829,  1.31187716],[ 3.4886555 ,  1.6149282 ],[ 3.1437263 ,  0.48403803],[ 0.71227321,  1.38118874],[-1.77206206,  2.19828456]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))

    def test_innpro(self):
        scores = self.uf_sparse.transform(method='InnPro')
        expected_scores = np.array([[-1.3121429 , -1.94493404],[-0.09384769, -2.91629487],[-1.69314081,  2.89618655],[-0.43382027, -1.09186274],[-1.05862142, -1.25499434],[-1.60518627,  0.73376555],[ 3.56531104,  0.99841448],[ 3.2889    , -0.0419241 ],[ 0.85839191,  0.86656285],[-1.64872606,  1.64496551]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))


class TestInverseTranform(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise(0.05)
        kl.sparsify(0.95, 0.01)

        self.fdata_uni = kl.noisy_data
        self.fdata_sparse = kl.sparse_data

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, argvals=np.linspace(0, 1, 21),
            dimension='2D', random_state=42
        )
        kl.new(n_obs=10)
        self.fdata = kl.data

    def test_inverse_tranform_1D_dense(self):
        uf_dense = UFPCA(n_components=4, method='covariance')
        uf_dense.fit(self.fdata_uni)
        scores_dense = uf_dense.transform(self.fdata_uni)

        fdata_inv = uf_dense.inverse_transform(scores_dense)
        
        expected_values = np.array([ 0.28386669, -1.37945681,  1.02263568, -0.77402862, -0.4972872 , -0.55773764,  2.00609315,  1.26005907,  0.8043036 ,  0.30744544])
        np.testing.assert_array_almost_equal(fdata_inv.values[:, 0], expected_values)

        expected_values = np.array([-0.27129124, -0.65766802,  0.75434737, -0.29719701, -0.2303506 ,  0.04830468,  0.83039506,  0.54284052,  0.40990883,  0.45802911])
        np.testing.assert_array_almost_equal(fdata_inv.values[:, 10], expected_values)
    
    def test_inverse_tranform_1D_sparse(self):
        uf_sparse = UFPCA(n_components=0.95, method='covariance')
        uf_sparse.fit(self.fdata_sparse)
        scores_sparse = uf_sparse.transform(self.fdata_sparse)

        fdata_inv = uf_sparse.inverse_transform(scores_sparse)
        
        expected_values = np.array([ 0.26667399, -1.21682852,  0.92784872, -0.96427364, -0.40289253, -0.39454108,  2.05518414,  0.8992658 ,  0.88881886,  0.4031194 ])
        np.testing.assert_array_almost_equal(fdata_inv.values[:, 0], expected_values)

        expected_values = np.array([-0.2474047 , -0.67959052,  0.78886515, -0.30766829, -0.23187046,  0.09402671,  0.92377868,  0.44696334,  0.52153204,  0.44421386])
        np.testing.assert_array_almost_equal(fdata_inv.values[:, 10], expected_values)
    
    def test_inverse_tranform_2D(self):
        uf_2d = UFPCA(n_components=2, method='inner-product')
        uf_2d.fit(self.fdata)
        scores_2d = uf_2d.transform(method='InnPro')

        fdata_inv = uf_2d.inverse_transform(scores_2d)
        
        expected_values = np.array([[ 4.11582048e-02, -1.52853272e-01, -2.84683288e-01,  -3.62385410e-01, -3.94734448e-01, -3.90289490e-01,  -3.57184258e-01, -3.07569739e-01, -2.48523523e-01,  -1.87275232e-01, -1.31253955e-01, -8.64654886e-02,  -5.25425444e-02, -2.76945411e-02, -1.03303661e-02,   9.89062293e-04,  6.56404811e-03,  7.59068682e-03,   5.32687132e-03,  1.02143883e-03, -4.12728979e-03], [ 2.81838362e-02, -9.94714642e-02, -1.82784237e-01,  -2.27753330e-01, -2.40699297e-01, -2.27987172e-01,  -1.95900602e-01, -1.53590325e-01, -1.06596984e-01,  -6.05212704e-02, -2.10396938e-02,  7.39198767e-03,   2.54553442e-02,  3.50526962e-02,  3.80105474e-02,   3.60953517e-02,  3.01780174e-02,  2.17092677e-02,   1.22227020e-02,  3.22303721e-03, -3.81052097e-03], [ 1.70692484e-02, -6.33230834e-02, -1.12025497e-01,  -1.33662796e-01, -1.32896673e-01, -1.14510922e-01,  -8.35608993e-02, -4.67065698e-02, -8.41481593e-03,   2.68629604e-02,  5.46967670e-02,  7.17304427e-02,   7.88291025e-02,  7.79316920e-02,  7.09985669e-02,   6.00055633e-02,  4.62444750e-02,  3.13016985e-02,   1.69016385e-02,  4.72756883e-03, -3.54740218e-03], [ 8.53206282e-03, -4.13520586e-02, -6.76201048e-02,  -7.41433592e-02, -6.46048954e-02, -4.27874642e-02,  -1.30856112e-02,  1.98762550e-02,  5.23125019e-02,   8.05127340e-02,  1.00861933e-01,  1.10719647e-01,   1.11024172e-01,  1.03688369e-01,  9.07204792e-02,   7.42039777e-02,  5.57174979e-02,  3.69069847e-02,   1.96009661e-02,  5.58421567e-03, -3.35638132e-03], [ 2.68928890e-03, -3.07105466e-02, -4.48851250e-02,  -4.33546895e-02, -2.93180872e-02, -6.32261637e-03,   2.21518231e-02,  5.26162631e-02,  8.16413440e-02,   1.05919003e-01,  1.22291574e-01,  1.28517259e-01,   1.25518613e-01,  1.15134063e-01,  9.93524282e-02,   8.02838273e-02,  5.96396871e-02,  3.91375220e-02,   2.06194859e-02,  5.89964701e-03, -3.19244774e-03], [-8.39907442e-04, -2.88752230e-02, -3.93008199e-02,  -3.54872075e-02, -2.07380815e-02,  1.77775624e-03,   2.90483146e-02,  5.81368416e-02,  8.57112976e-02,   1.08594961e-01,  1.23801896e-01,  1.29236348e-01,   1.25734646e-01,  1.15023300e-01,  9.90196049e-02,   7.97961754e-02,  5.91029446e-02,  3.86603680e-02,   2.03075850e-02,  5.82574488e-03, -2.97849113e-03], [-2.83400318e-03, -3.35673057e-02, -4.65264925e-02,  -4.49987444e-02, -3.22024902e-02, -1.13134526e-02,   1.47313609e-02,  4.32218627e-02,  7.07462692e-02,   9.40657730e-02,  1.10157964e-01,  1.16889201e-01,   1.14961689e-01,  1.05966402e-01,  9.17107102e-02,   7.41749622e-02,  5.50879486e-02,  3.61155461e-02,   1.90242853e-02,  5.53104252e-03, -2.62978044e-03], [-4.08347727e-03, -4.22652632e-02, -6.13723494e-02,  -6.47291291e-02, -5.55944910e-02, -3.72521256e-02,  -1.27025329e-02,  1.53752069e-02,  4.34219060e-02,   6.80545982e-02,  8.61134465e-02,  9.53283909e-02,   9.62427132e-02,  9.02894722e-02,  7.91248559e-02,   6.45812737e-02,  4.83046511e-02,  3.18570350e-02,   1.68823571e-02,  4.98333380e-03, -2.22712721e-03], [-4.73914890e-03, -5.25778367e-02, -7.95510628e-02,  -8.90701417e-02, -8.44877496e-02, -6.92279720e-02,  -4.64162782e-02, -1.88083210e-02,  9.88281654e-03,   3.61129165e-02,  5.65535938e-02,  6.87622122e-02,   7.31146599e-02,  7.08725735e-02,  6.35134227e-02,   5.26835426e-02,  3.99003606e-02,  2.65865603e-02,   1.42283242e-02,  4.27878062e-03, -1.80515470e-03], [-4.93767860e-03, -6.20907405e-02, -9.67494712e-02,  -1.12390385e-01, -1.12440037e-01, -1.00425517e-01,  -7.95810704e-02, -5.27576620e-02, -2.37653466e-02,   3.74016578e-03,  2.63020335e-02,  4.13320904e-02,   4.90469286e-02,  5.05318160e-02,  4.70708885e-02,   4.01026266e-02,  3.09853892e-02,  2.09798899e-02,   1.13934045e-02,  3.50771927e-03, -1.39677543e-03], [-4.80049575e-03, -6.83618460e-02, -1.08623323e-01,  -1.29031495e-01, -1.32991875e-01, -1.24025357e-01,  -1.05380136e-01, -7.99324392e-02, -5.14661423e-02,  -2.36295143e-02,  1.05167312e-04,  1.70955005e-02,   2.74237978e-02,  3.20022468e-02,  3.19190274e-02,   2.83979247e-02,  2.26217396e-02,  1.56787794e-02,   8.68926966e-03,  2.75466302e-03, -1.02874526e-03], [-4.43332972e-03, -6.95250466e-02, -1.11840800e-01,  -1.34645608e-01, -1.41171542e-01, -1.34769728e-01,  -1.18547561e-01, -9.52683205e-02, -6.85171130e-02,  -4.17640082e-02, -1.83287876e-02, -7.68144696e-04,   1.09041747e-02,  1.74375127e-02,  1.97314993e-02,   1.88008025e-02,  1.56483775e-02,  1.11901837e-02,   6.36224875e-03,  2.08752652e-03, -7.18479596e-04], [-3.92605354e-03, -6.61095788e-02, -1.07221448e-01,  -1.30213531e-01, -1.38011721e-01, -1.33656524e-01,  -1.19978284e-01, -9.95016377e-02, -7.54673935e-02,  -5.10219103e-02, -2.91874024e-02, -1.23121459e-02,  -4.70589883e-04,  6.93675470e-03,  1.06335216e-02,   1.14377942e-02,  1.01758440e-02,  7.59727996e-03,   4.46284474e-03,  1.52480047e-03, -4.72992150e-04], [-3.35284023e-03, -5.92207007e-02, -9.65972449e-02,  -1.18026571e-01, -1.26032852e-01, -1.23245279e-01,  -1.12118101e-01, -9.48447677e-02, -7.42201025e-02,  -5.29638391e-02, -3.36964327e-02, -1.84678664e-02,  -7.38451631e-03,  1.77136822e-05,  4.30219760e-03,   6.10740062e-03,  6.09164312e-03,  4.84844461e-03,   2.97621804e-03,  1.06837695e-03, -2.89956170e-04], [-2.77263167e-03, -4.99358281e-02, -8.17690788e-02,  -1.00349069e-01, -1.07738126e-01, -1.06091600e-01,  -9.74248423e-02, -8.35407690e-02, -6.67275699e-02,  -4.92157113e-02, -3.31588602e-02, -2.02506196e-02,  -1.06067463e-02, -3.88293306e-03,  3.41926882e-04,   2.54666372e-03,  3.23496964e-03,  2.85804182e-03,   1.86798272e-03,  7.14324981e-04, -1.60888243e-04], [-2.23021105e-03, -3.93093492e-02, -6.45120047e-02,  -7.94221884e-02, -8.56148378e-02, -8.47459058e-02,  -7.83646191e-02, -6.78564463e-02, -5.49810815e-02,  -4.14554859e-02, -2.89392883e-02, -1.87425880e-02,  -1.09739625e-02, -5.39245931e-03, -1.69979405e-03,   4.45050675e-04,  1.40802178e-03,  1.51447817e-03,   1.08844700e-03,  4.52888045e-04, -7.55942358e-05], [-1.49871581e-03, -2.81518578e-02, -4.63954154e-02,  -5.73212337e-02, -6.20052142e-02, -6.16329959e-02,  -5.73111603e-02, -5.00083390e-02, -4.09661874e-02,  -3.13965915e-02, -2.24712332e-02, -1.51177780e-02,  -9.42607093e-03, -5.24194069e-03, -2.37101184e-03,  -5.89139513e-04,  3.47848076e-04,  6.53377601e-04,   5.42224461e-04,  2.36682097e-04, -5.28418971e-05], [-6.28902570e-04, -1.74660627e-02, -2.90740061e-02,  -3.61032410e-02, -3.92048011e-02, -3.91154675e-02,  -3.65530640e-02, -3.21063035e-02, -2.65437354e-02,  -2.06151091e-02, -1.50448526e-02, -1.04079713e-02,  -6.76873401e-03, -4.04198686e-03, -2.11725471e-03,  -8.65262393e-04, -1.44072597e-04,  1.67458013e-04,   1.99064615e-04,  8.33319218e-05, -5.40469187e-05], [ 2.79350600e-04, -8.28709759e-03, -1.42456575e-02,  -1.78918093e-02, -1.95443492e-02, -1.95866334e-02,  -1.84026612e-02, -1.62751237e-02, -1.35801698e-02,  -1.06840296e-02, -7.94008676e-03, -5.62973045e-03,  -3.78970852e-03, -2.38477431e-03, -1.36683465e-03,  -6.77877728e-04, -2.53768209e-04, -4.17790885e-05,   1.87328152e-05, -7.45044035e-06, -5.82034039e-05], [ 1.11040017e-03, -1.65129189e-03, -3.60174606e-03,  -4.80014587e-03, -5.35793979e-03, -5.42628189e-03,  -5.16232099e-03, -4.63442368e-03, -3.94198996e-03,  -3.18129640e-03, -2.44583621e-03, -1.81133079e-03,  -1.28981782e-03, -8.75563143e-04, -5.60049298e-04,  -3.31635328e-04, -1.75530188e-04, -8.67338487e-05,  -5.07264184e-05, -4.75734131e-05, -5.63971575e-05], [ 1.74704969e-03,  1.41721726e-03,  1.18070869e-03,   1.06919736e-03,  1.02370478e-03,  9.75954075e-04,   8.59533194e-04,  6.94000909e-04,  5.05767599e-04,   3.19675308e-04,  1.55783823e-04,  2.70697212e-05,  -6.13406151e-05, -1.11404013e-04, -1.29859557e-04,  -1.25014664e-04, -1.03176589e-04, -8.07812345e-05,  -6.44842250e-05, -5.44864502e-05, -4.72101732e-05]])
        np.testing.assert_array_almost_equal(fdata_inv.values[0], expected_values)

        expected_values = np.array([[ 4.13371121e-02,  1.09657673e-01,  1.70312403e-01,   2.23337669e-01,  2.68045465e-01,  3.03964440e-01,   3.31050461e-01,  3.45224665e-01,  3.47503642e-01,   3.38751287e-01,  3.19631163e-01,  2.91032706e-01,   2.55431736e-01,  2.15529948e-01,  1.73828702e-01,   1.32676665e-01,  9.32787766e-02,  5.77396633e-02,   2.82260161e-02,  6.89543143e-03, -4.14523038e-03], [ 2.83063463e-02,  1.06685838e-01,  1.74975676e-01,   2.33432297e-01,  2.81989032e-01,  3.20534539e-01,   3.49039216e-01,  3.64593908e-01,  3.67915246e-01,   3.59659554e-01,  3.40407006e-01,  3.11050029e-01,   2.73985482e-01,  2.31922471e-01,  1.87493960e-01,   1.43272599e-01,  1.00931602e-01,  6.27265155e-02,   3.09961251e-02,  8.05020694e-03, -3.82708462e-03], [ 1.71434454e-02,  1.01428124e-01,  1.74044594e-01,   2.35333288e-01,  2.85597588e-01,  3.25018245e-01,   3.53503266e-01,  3.69349075e-01,  3.73054711e-01,   3.65134761e-01,  3.46125316e-01,  3.16921366e-01,   2.79779131e-01,  2.37313732e-01,  1.92161794e-01,   1.46975487e-01,  1.03719967e-01,  6.46562742e-02,   3.21840549e-02,  8.66164686e-03, -3.56282210e-03], [ 8.56915017e-03,  9.47310018e-02,  1.68544294e-01,   2.30272727e-01,  2.80369026e-01,  3.19185808e-01,   3.46461235e-01,  3.61702607e-01,  3.65259646e-01,   3.57557638e-01,  3.39117661e-01,  3.10834061e-01,   2.74773349e-01,  2.33375303e-01,  1.89175494e-01,   1.44785056e-01,  1.02308087e-01,  6.39162877e-02,   3.19647358e-02,  8.76456482e-03, -3.37097091e-03], [ 2.70097876e-03,  8.72318089e-02,  1.59395435e-01,   2.19352013e-01,  2.67584495e-01,  3.04225865e-01,   3.29476799e-01,  3.43528866e-01,  3.46633501e-01,   3.39163965e-01,  3.21644568e-01,  2.94963297e-01,   2.60961563e-01,  2.21844450e-01,  1.79968097e-01,   1.37810462e-01,  9.74490844e-02,  6.09676133e-02,   3.05748810e-02,  8.45151161e-03, -3.20632474e-03], [-8.43558370e-04,  7.92419530e-02,  1.47354765e-01,   2.03641663e-01,  2.48316534e-01,  2.81728746e-01,   3.04385161e-01,  3.16868206e-01,  3.19363301e-01,   3.12211860e-01,  2.95946915e-01,  2.71439475e-01,   2.40281115e-01,  2.04401388e-01,  1.65921464e-01,   1.27118507e-01,  8.99455969e-02,  5.63262080e-02,   2.83030142e-02,  7.86044733e-03, -2.99143810e-03], [-2.84632209e-03,  7.08272364e-02,  1.32999218e-01,   1.83943619e-01,  2.24003484e-01,  2.53564751e-01,   2.73253112e-01,  2.83922163e-01,  2.85720755e-01,   2.78971467e-01,  2.64214215e-01,  2.42291772e-01,   2.14535970e-01,  1.82581495e-01,  1.48280374e-01,   1.13658360e-01,  8.04885555e-02,  5.04808770e-02,   2.54463314e-02,  7.14605566e-03, -2.64121163e-03], [-4.10122742e-03,  6.22972666e-02,  1.17758513e-01,   1.62684859e-01,  1.97544444e-01,  2.22780495e-01,   2.39120663e-01,  2.47615412e-01,  2.48431278e-01,   2.41911780e-01,  2.28624539e-01,  2.09388959e-01,   1.85282573e-01,  1.57634700e-01,  1.27998758e-01,   9.81051506e-02,  6.94969880e-02,  4.36331375e-02,   2.20547065e-02,  6.26140835e-03, -2.23680814e-03], [-4.75974913e-03,  5.38308113e-02,  1.02155979e-01,   1.40733665e-01,  1.70140677e-01,  1.90882099e-01,   2.03762932e-01,  2.09959601e-01,  2.09686937e-01,   2.03329371e-01,  1.91488107e-01,  1.74957073e-01,   1.54573488e-01,  1.31367297e-01,  1.06585216e-01,   8.16435608e-02,  5.78291798e-02,  3.63337649e-02,   1.84127829e-02,  5.28850312e-03, -1.81300139e-03], [-4.95914180e-03,  4.56297659e-02,  8.67408928e-02,   1.18981596e-01,  1.43009407e-01,  1.59380889e-01,   1.68946721e-01,  1.72942527e-01,  1.71640674e-01,   1.65468544e-01,  1.55053251e-01,  1.41154994e-01,   1.24393442e-01,  1.05521348e-01,  8.54911969e-02,   6.54104905e-02,  4.63062592e-02,  2.91074644e-02,   1.47898318e-02,  4.30348683e-03, -1.40284696e-03], [-4.82136265e-03,  3.79239892e-02,  7.20937565e-02,   9.83472936e-02,  1.17385187e-01,  1.29792142e-01,   1.36426746e-01,  1.38521174e-01,  1.36396006e-01,   1.30508018e-01,  1.21490742e-01,  1.10057285e-01,   9.66416712e-02,  8.17575015e-02,  6.60951317e-02,   5.04811133e-02,  3.57008348e-02,  2.24447810e-02,   1.14354930e-02,  3.37665796e-03, -1.03321703e-03], [-4.45260061e-03,  3.09131747e-02,  5.87083311e-02,   7.96000962e-02,  9.42887841e-02,  1.03355140e-01,   1.07624698e-01,  1.08268604e-01,  1.05632604e-01,   1.00177982e-01,  9.25169614e-02,  8.32990876e-02,   7.28115646e-02,  6.13789161e-02,  4.94766073e-02,   3.76956412e-02,  2.66152570e-02,  1.67273202e-02,   8.54385163e-03,  2.56374154e-03, -7.21602698e-04], [-3.94311939e-03,  2.45847002e-02,  4.66293407e-02,   6.28250686e-02,  7.38322368e-02,  8.01960904e-02,   8.26729475e-02,  8.23261645e-02,  7.94998117e-02,   7.46328199e-02,  6.82888039e-02,  6.10386135e-02,   5.30582781e-02,  4.45310617e-02,  3.57649130e-02,   2.71626405e-02,  1.91352765e-02,  1.20168578e-02,   6.15260286e-03,  1.87921311e-03, -4.75048162e-04], [-3.36741443e-03,  1.88957780e-02,  3.58147695e-02,   4.79579699e-02,  5.59138000e-02,  6.01652069e-02,   6.13708401e-02,  6.04512821e-02,  5.77231266e-02,   5.35783847e-02,  4.85087768e-02,  4.29946518e-02,   3.71311196e-02,  3.10019181e-02,  2.47904950e-02,   1.87557152e-02,  1.31763855e-02,  8.26622986e-03,   4.24388707e-03,  1.32297475e-03, -2.91216558e-04], [-2.78468380e-03,  1.38315839e-02,  2.62538262e-02,   3.49616429e-02,  4.04490544e-02,  4.31166525e-02,   4.35056374e-02,  4.23705685e-02,  3.99786213e-02,   3.66549459e-02,  3.28018252e-02,  2.88016771e-02,   2.46939056e-02,  2.04980492e-02,  1.63107798e-02,   1.22867436e-02,  8.60555688e-03,  5.39411269e-03,   2.78021336e-03,  8.89080175e-04, -1.61587596e-04], [-2.23990538e-03,  9.40042126e-03,  1.79616659e-02,   2.38222091e-02,  2.73695440e-02,  2.89097962e-02,   2.88562818e-02,  2.77867862e-02,  2.59032432e-02,   2.34505049e-02,  2.07310052e-02,  1.80270042e-02,   1.53426182e-02,  1.26617900e-02,  1.00260437e-02,   7.51982217e-03,  5.25260617e-03,  3.29311201e-03,   1.70871845e-03,  5.65732229e-04, -7.59228304e-05], [-1.50523046e-03,  5.85544780e-03,  1.11599994e-02,   1.46923689e-02,  1.67525135e-02,  1.75301763e-02,   1.72945010e-02,  1.64531813e-02,  1.51397002e-02,   1.35174395e-02,  1.17901597e-02,  1.01457249e-02,   8.56956729e-03,  7.03122226e-03,  5.54060424e-03,   4.13752644e-03,  2.88191604e-03,  1.80282147e-03,   9.30645772e-04,  3.03342673e-04, -5.30715913e-05], [-6.31636297e-04,  3.25687093e-03,  5.98486429e-03,   7.74317105e-03,  8.72209033e-03,  9.02580140e-03,   8.77752325e-03,  8.23014677e-03,  7.45594475e-03,   6.54607179e-03,  5.61711389e-03,  4.77577376e-03,   4.00188990e-03,  3.26541751e-03,  2.56174319e-03,   1.90513536e-03,  1.32257953e-03,  8.20176908e-04,   4.12657859e-04,  1.17614681e-04, -5.42818510e-05], [ 2.80564887e-04,  1.63233221e-03,  2.52892502e-03,   3.07881195e-03,  3.36704401e-03,  3.41383211e-03,   3.23874064e-03,  2.96308292e-03,  2.61430826e-03,   2.22982769e-03,  1.85995463e-03,  1.55037087e-03,   1.28470662e-03,  1.04196046e-03,  8.14033336e-04,   6.02787965e-04,  4.16237180e-04,  2.50935909e-04,   1.11389661e-04,  6.26081574e-06, -5.84564037e-05], [ 1.11522688e-03,  1.00827246e-03,  8.91378505e-04,   8.13924902e-04,  7.72799430e-04,  7.25011691e-04,   6.21550443e-04,  5.02572641e-04,  3.77066881e-04,   2.57158817e-04,  1.57769520e-04,  9.09724268e-05,   5.00145835e-05,  2.52954007e-05,  1.00097071e-05,   4.89388825e-07, -3.76988161e-06, -1.31060064e-05,  -2.82956466e-05, -4.46773331e-05, -5.66423058e-05], [ 1.75464380e-03,  1.42337765e-03,  1.18584102e-03,   1.07384497e-03,  1.02815464e-03,  9.80196372e-04,   8.63269430e-04,  6.97017607e-04,  5.07966081e-04,   3.21064880e-04,  1.56460988e-04,  2.71873885e-05,  -6.16072518e-05, -1.11888266e-04, -1.30424033e-04,  -1.25558081e-04, -1.03625080e-04, -8.11323760e-05,  -6.47645263e-05, -5.47232931e-05, -4.74153873e-05]])
        np.testing.assert_array_almost_equal(fdata_inv.values[9], expected_values)

#!/usr/bin/python3
# -*-coding:utf8 -*
"""Module that contains unit tests for the class UFPCA in the fpca.py file.

Written with the help of ChatGPT.

"""
import numpy as np
import pickle
import unittest
import warnings

from pathlib import Path

from FDApy.representation.argvals import DenseArgvals
from FDApy.representation.functional_data import MultivariateFunctionalData
from FDApy.preprocessing.dim_reduction.ufpca import (
    UFPCA,
    _fit_covariance,
    _fit_inner_product,
    _transform_numerical_integration_dense,
    _transform_numerical_integration_irregular,
    _transform_pace_dense,
    _transform_pace_irregular,
    _transform_innpro,
)
from FDApy.preprocessing.dim_reduction.mfpca import (
    MFPCA,
    _fit_covariance_multivariate,
    _fit_inner_product_multivariate,
    _transform_numerical_integration_multivariate,
    _transform_pace_multivariate,
)

THIS_DIR = Path(__file__)


class TestFitCovariance(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            self.fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            self.fdata_sparse = pickle.load(handle)

    def test_fit_covariance_dense(self):
        points = DenseArgvals({"input_dim_0": np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata, points=points, n_components=3)

        expected_eigenvalues = np.array([0.36308978, 0.09898477, 0.02262269])
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues
        )

        expected_eigenfunctions = np.array(
            [
                [
                    -0.63338702,
                    -0.66326888,
                    -0.70318031,
                    -0.74930558,
                    -0.7923172,
                    -0.83086244,
                    -0.87084969,
                    -0.91272911,
                    -0.95237211,
                    -0.9869364,
                    -1.02108391,
                    -1.04859777,
                    -1.07132089,
                    -1.09103074,
                    -1.10510199,
                    -1.12176227,
                    -1.13716215,
                    -1.14824165,
                    -1.15223902,
                    -1.14147425,
                    -1.12937276,
                    -1.11777757,
                    -1.10699507,
                    -1.09059492,
                    -1.06559542,
                    -1.04053656,
                    -1.01368802,
                    -0.98660697,
                    -0.95844386,
                    -0.92215409,
                    -0.87521249,
                ],
                [
                    -1.48095652,
                    -1.37092829,
                    -1.31791289,
                    -1.28165148,
                    -1.23954932,
                    -1.1942969,
                    -1.1325484,
                    -1.05908291,
                    -0.98141005,
                    -0.89809123,
                    -0.81291059,
                    -0.72498359,
                    -0.62649799,
                    -0.51356716,
                    -0.37775963,
                    -0.23377296,
                    -0.09151644,
                    0.05424947,
                    0.20930234,
                    0.36632285,
                    0.52497705,
                    0.68398301,
                    0.82400703,
                    0.95170772,
                    1.07847338,
                    1.19507754,
                    1.29805054,
                    1.39409037,
                    1.47502366,
                    1.52634416,
                    1.56515586,
                ],
                [
                    1.9462178,
                    1.81357504,
                    1.60478805,
                    1.36190987,
                    1.10719592,
                    0.83433885,
                    0.54284393,
                    0.24712517,
                    -0.05288282,
                    -0.32402036,
                    -0.56437437,
                    -0.76597844,
                    -0.91470857,
                    -1.02481277,
                    -1.10240925,
                    -1.15125475,
                    -1.16739845,
                    -1.11785404,
                    -0.98600013,
                    -0.78547893,
                    -0.57005181,
                    -0.37740797,
                    -0.20332492,
                    -0.02140877,
                    0.21000388,
                    0.47114452,
                    0.7603799,
                    1.05759307,
                    1.33536314,
                    1.59603654,
                    1.82452183,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].values), np.abs(expected_eigenfunctions)
        )

        expected_noise = 0.047010586311384626
        np.testing.assert_almost_equal(results["noise_variance_cov"], expected_noise)

    def test_fit_covariance_irregular(self):
        points = DenseArgvals({"input_dim_0": np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata_sparse, points=points, n_components=3)

        expected_eigenvalues = np.array([0.3587555, 0.09703086, 0.02275726])
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues
        )

        expected_eigenfunctions = np.array(
            [
                [
                    -0.62472211,
                    -0.61206158,
                    -0.65319927,
                    -0.71591792,
                    -0.79030789,
                    -0.86374257,
                    -0.9193129,
                    -0.94979499,
                    -0.96478497,
                    -0.98449269,
                    -1.01326267,
                    -1.05603057,
                    -1.08919469,
                    -1.10043627,
                    -1.09764452,
                    -1.10200622,
                    -1.11712204,
                    -1.13323158,
                    -1.14637868,
                    -1.15374696,
                    -1.15393056,
                    -1.15308271,
                    -1.13992301,
                    -1.09916712,
                    -1.0472834,
                    -1.000604,
                    -0.96289597,
                    -0.94021664,
                    -0.93945538,
                    -0.95060283,
                    -0.97264241,
                ],
                [
                    -1.33990344,
                    -1.31535621,
                    -1.31844823,
                    -1.3076779,
                    -1.27733068,
                    -1.23569428,
                    -1.18291042,
                    -1.11176413,
                    -1.0151153,
                    -0.89974754,
                    -0.78425214,
                    -0.68011568,
                    -0.60046341,
                    -0.52396959,
                    -0.42413379,
                    -0.26543492,
                    -0.09491872,
                    0.07020998,
                    0.23245272,
                    0.38815329,
                    0.55015113,
                    0.72413462,
                    0.88731909,
                    1.01470436,
                    1.10163375,
                    1.17512962,
                    1.25885518,
                    1.34854675,
                    1.43437973,
                    1.50365658,
                    1.51531349,
                ],
                [
                    2.13242634,
                    1.75521041,
                    1.52124289,
                    1.29812184,
                    1.0907479,
                    0.87336333,
                    0.59898347,
                    0.28640281,
                    -0.04766417,
                    -0.37289617,
                    -0.65366343,
                    -0.83768785,
                    -0.93495244,
                    -0.99247711,
                    -1.01726438,
                    -1.02900587,
                    -1.03126731,
                    -1.00081174,
                    -0.94747766,
                    -0.85663855,
                    -0.73360609,
                    -0.57531903,
                    -0.34033891,
                    -0.02167752,
                    0.31672193,
                    0.63947369,
                    0.91481049,
                    1.14630459,
                    1.33733537,
                    1.54624408,
                    1.73680574,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].values), np.abs(expected_eigenfunctions)
        )

        expected_noise = 0.0
        np.testing.assert_almost_equal(results["noise_variance_cov"], expected_noise)


class TestFitCovarianceMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            fdata_sparse = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_noisy_5_100_005_2D.pickle"
        with open(fname, "rb") as handle:
            fdata_2D = pickle.load(handle)

        self.fdata_multi = MultivariateFunctionalData([fdata, fdata_sparse])
        self.fdata_multi_2d = MultivariateFunctionalData([fdata, fdata_2D])

    def test_fit_covariance_dense_and_sparse(self):
        points = [
            DenseArgvals({"input_dim_0": np.linspace(0, 1, 21)}),
            DenseArgvals({"input_dim_0": np.linspace(0, 1, 31)}),
        ]
        results = _fit_covariance_multivariate(
            data=self.fdata_multi,
            points=points,
            n_components=[0.95, 3],
            smooth=True,
            scores_method="NumInt",
        )

        expected_eigenvalues = np.array(
            [
                1.49616900e00,
                4.02257540e-01,
                5.16930755e-02,
                7.57318164e-04,
                5.28377626e-04,
            ]
        )
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues, decimal=3
        )

        expected_eigenfunctions_0 = np.array(
            [
                [
                    0.4277922,
                    0.43230977,
                    0.43870542,
                    0.44572597,
                    0.45297495,
                    0.46068743,
                    0.4691146,
                    0.47820072,
                    0.48757446,
                    0.49709549,
                    0.50633861,
                    0.51543589,
                    0.52429281,
                    0.53273731,
                    0.5408003,
                    0.54862307,
                    0.55636892,
                    0.56416935,
                    0.57214948,
                    0.58028515,
                    0.58865767,
                    0.5972218,
                    0.60582351,
                    0.61426839,
                    0.62253362,
                    0.63063466,
                    0.63862966,
                    0.64641789,
                    0.6538905,
                    0.66085101,
                    0.66731521,
                    0.67398547,
                    0.68106625,
                    0.68818054,
                    0.69475801,
                    0.70058939,
                    0.70587006,
                    0.71070161,
                    0.71535895,
                    0.7200346,
                    0.72452863,
                    0.72869059,
                    0.73271385,
                    0.73669205,
                    0.7401495,
                    0.7430242,
                    0.74565232,
                    0.74853417,
                    0.75186909,
                    0.75542549,
                    0.75884832,
                    0.76209679,
                    0.76529042,
                    0.76840549,
                    0.77101351,
                    0.77342337,
                    0.77561958,
                    0.77745416,
                    0.77907403,
                    0.7800342,
                    0.77967267,
                    0.77819739,
                    0.77595068,
                    0.77332687,
                    0.77069763,
                    0.76818056,
                    0.76579897,
                    0.76368082,
                    0.76138909,
                    0.75886858,
                    0.75657401,
                    0.75453086,
                    0.75231754,
                    0.75008217,
                    0.74772516,
                    0.74478041,
                    0.74115885,
                    0.73681536,
                    0.73192569,
                    0.72670052,
                    0.72145231,
                    0.71630219,
                    0.71127154,
                    0.70626862,
                    0.70116031,
                    0.69578738,
                    0.69020297,
                    0.68456009,
                    0.67886665,
                    0.67344651,
                    0.66815784,
                    0.66265831,
                    0.65716067,
                    0.65128327,
                    0.64467238,
                    0.63744049,
                    0.62982334,
                    0.62196656,
                    0.61345918,
                    0.60355788,
                    0.59282282,
                ]
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[0].values[:1, :]),
            np.abs(expected_eigenfunctions_0),
            decimal=3,
        )

        expected_eigenfunctions_1 = np.array(
            [
                [
                    0.4608861,
                    0.45362045,
                    0.44887717,
                    0.44960574,
                    0.45498943,
                    0.46328215,
                    0.47331924,
                    0.48503489,
                    0.49794973,
                    0.51185404,
                    0.52675532,
                    0.54260916,
                    0.55896321,
                    0.57566001,
                    0.59226239,
                    0.6086822,
                    0.62478339,
                    0.63981131,
                    0.6529059,
                    0.66468201,
                    0.67564839,
                    0.68480246,
                    0.69174377,
                    0.69643159,
                    0.69972326,
                    0.70276714,
                    0.70601007,
                    0.70943532,
                    0.71339164,
                    0.71775969,
                    0.72248893,
                    0.72759884,
                    0.73336939,
                    0.74064505,
                    0.74935965,
                    0.75871255,
                    0.76855208,
                    0.77780092,
                    0.78611536,
                    0.79356015,
                    0.79933776,
                    0.80332417,
                    0.80609378,
                    0.80747844,
                    0.80779296,
                    0.80717505,
                    0.80616842,
                    0.80574046,
                    0.80624372,
                    0.80748309,
                    0.80928009,
                    0.81180454,
                    0.81522312,
                    0.81929801,
                    0.82370166,
                    0.82784619,
                    0.83111267,
                    0.83379121,
                    0.83665395,
                    0.83992744,
                    0.84301236,
                    0.84538678,
                    0.8473657,
                    0.84867683,
                    0.84914059,
                    0.84927154,
                    0.84926235,
                    0.84988339,
                    0.85039592,
                    0.85021969,
                    0.84954974,
                    0.84857443,
                    0.84637498,
                    0.84236191,
                    0.83639791,
                    0.82860646,
                    0.8187951,
                    0.80768437,
                    0.79650739,
                    0.78523152,
                    0.77393695,
                    0.76332808,
                    0.75325016,
                    0.74340394,
                    0.73386577,
                    0.72516837,
                    0.71773738,
                    0.71087201,
                    0.7048502,
                    0.70015617,
                    0.69704056,
                    0.69526893,
                    0.69519148,
                    0.69626731,
                    0.69831196,
                    0.70044689,
                    0.70326481,
                    0.70699616,
                    0.711705,
                    0.71668263,
                    0.72215215,
                ]
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[1].values[:1, :]),
            np.abs(expected_eigenfunctions_1),
            decimal=3,
        )

    def test_fit_covariance_2d(self):
        points = [
            DenseArgvals({"input_dim_0": np.linspace(0, 1, 21)}),
            DenseArgvals({"input_dim_0": np.linspace(0, 1, 31)}),
        ]
        results = _fit_covariance_multivariate(
            data=self.fdata_multi_2d,
            points=points,
            n_components=[0.95, 3],
            smooth=True,
            scores_method="NumInt",
        )

        expected_eigenvalues = np.array(
            [
                7.22436778e-01,
                1.99305014e-01,
                2.65035953e-02,
                5.35791136e-03,
                1.48284852e-04,
            ]
        )
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues, decimal=2
        )

        expected_eigenfunctions_0 = np.array(
            [
                [
                    0.58890337,
                    0.59613331,
                    0.60592601,
                    0.61650147,
                    0.62728893,
                    0.6386731,
                    0.65104794,
                    0.6643384,
                    0.67800667,
                    0.69188345,
                    0.7053652,
                    0.71865379,
                    0.73161788,
                    0.74399159,
                    0.75581754,
                    0.76729964,
                    0.77867676,
                    0.79015343,
                    0.80193097,
                    0.81396698,
                    0.82636235,
                    0.83905119,
                    0.85180514,
                    0.86434782,
                    0.87664578,
                    0.88870263,
                    0.90060736,
                    0.91222864,
                    0.92341465,
                    0.93386721,
                    0.94360479,
                    0.95364023,
                    0.9642723,
                    0.9749562,
                    0.98486703,
                    0.99370022,
                    1.00176581,
                    1.00921752,
                    1.01643154,
                    1.02367689,
                    1.03066938,
                    1.03720926,
                    1.04357842,
                    1.04993225,
                    1.05557954,
                    1.06041973,
                    1.06493609,
                    1.06983511,
                    1.07539933,
                    1.0812756,
                    1.08695824,
                    1.09239037,
                    1.09773835,
                    1.10296715,
                    1.10745932,
                    1.11168871,
                    1.11563293,
                    1.11907282,
                    1.1222163,
                    1.1244213,
                    1.12473556,
                    1.12345077,
                    1.12105198,
                    1.11810821,
                    1.1151632,
                    1.11237648,
                    1.10979562,
                    1.10761113,
                    1.10518224,
                    1.10240582,
                    1.09991563,
                    1.09775042,
                    1.09531372,
                    1.0928226,
                    1.09012627,
                    1.08657401,
                    1.08204075,
                    1.0764593,
                    1.07010149,
                    1.06326703,
                    1.0563911,
                    1.04962952,
                    1.04301697,
                    1.03642483,
                    1.02965861,
                    1.02248015,
                    1.01498482,
                    1.00740575,
                    0.99974111,
                    0.99245718,
                    0.98534343,
                    0.9779095,
                    0.97045446,
                    0.96239741,
                    0.95322437,
                    0.94311014,
                    0.93240743,
                    0.9213493,
                    0.90935722,
                    0.89533877,
                    0.88005387,
                ]
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[0].values[:1, :]),
            np.abs(expected_eigenfunctions_0),
            decimal=0,
        )

        expected_eigenfunctions_1 = np.array(
            [
                [
                    [
                        0.33160376,
                        0.33278747,
                        0.33532001,
                        0.33909853,
                        0.34302675,
                        0.34834196,
                        0.35398341,
                        0.35954688,
                        0.36423832,
                        0.3680868,
                        0.37198313,
                        0.37624167,
                        0.38008382,
                        0.38359411,
                        0.38737027,
                        0.39032937,
                        0.39452506,
                        0.39868864,
                        0.40238345,
                        0.40536878,
                        0.4078412,
                        0.41108628,
                        0.41405444,
                        0.41743988,
                        0.42098878,
                        0.42358628,
                        0.42620924,
                        0.42862852,
                        0.43056506,
                        0.4326079,
                        0.43510067,
                        0.43659336,
                        0.43842609,
                        0.43979587,
                        0.4401151,
                        0.4402598,
                        0.44063346,
                        0.44071145,
                        0.44023538,
                        0.44040382,
                        0.44074168,
                        0.4396913,
                        0.43948039,
                        0.43854061,
                        0.4367121,
                        0.43463225,
                        0.43246028,
                        0.43020146,
                        0.42822973,
                        0.42521466,
                        0.42169262,
                        0.4179481,
                        0.41353472,
                        0.40913828,
                        0.40493409,
                        0.4000819,
                        0.39563621,
                        0.3904511,
                        0.38555383,
                        0.37950421,
                        0.37392302,
                        0.36874095,
                        0.36262004,
                        0.3568135,
                        0.35046399,
                        0.34359002,
                        0.33619321,
                        0.32861006,
                        0.32245904,
                        0.31539851,
                        0.30867853,
                        0.30175744,
                        0.29368437,
                        0.28557742,
                        0.27800433,
                        0.26992591,
                        0.2618483,
                        0.25458523,
                        0.24715807,
                        0.24040982,
                        0.23324193,
                        0.22619996,
                        0.21829375,
                        0.21039417,
                        0.20345741,
                        0.1964763,
                        0.1884523,
                        0.18215807,
                        0.17460986,
                        0.16849045,
                        0.16162133,
                        0.15464752,
                        0.14770557,
                        0.14046185,
                        0.13301163,
                        0.1271192,
                        0.1221392,
                        0.11675299,
                        0.11235591,
                        0.1090741,
                        0.10743371,
                    ]
                ]
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[1].values[:1, :1]),
            np.abs(expected_eigenfunctions_1),
            decimal=0,
        )


class TestFitInnerProduct(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            self.fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            self.fdata_sparse = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_noisy_5_100_005_2D.pickle"
        with open(fname, "rb") as handle:
            self.fdata_2D = pickle.load(handle)

    def test_fit_inner_product_dense(self):
        points = DenseArgvals({"input_dim_0": np.linspace(0, 1, 31)})
        results = _fit_inner_product(
            data=self.fdata, points=points, n_components=3, method_smoothing="LP"
        )

        expected_eigenvalues = np.array([0.35990547, 0.09830406, 0.02307566])
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues
        )

        expected_eigenfunctions = np.array(
            [
                [
                    -0.62587704,
                    -0.6680772,
                    -0.70871227,
                    -0.74890505,
                    -0.78740299,
                    -0.82406538,
                    -0.85882506,
                    -0.89178192,
                    -0.92255483,
                    -0.95107023,
                    -0.97728166,
                    -1.00106328,
                    -1.02302255,
                    -1.04222659,
                    -1.05809195,
                    -1.07053558,
                    -1.07942391,
                    -1.0849219,
                    -1.08692243,
                    -1.08575442,
                    -1.08228731,
                    -1.07642619,
                    -1.06794319,
                    -1.05669066,
                    -1.04258188,
                    -1.02578053,
                    -1.00616308,
                    -0.98403658,
                    -0.9597255,
                    -0.93381031,
                    -0.90589313,
                ],
                [
                    -1.45672505,
                    -1.40385377,
                    -1.34691922,
                    -1.2865021,
                    -1.22132525,
                    -1.15087009,
                    -1.07463209,
                    -0.99266154,
                    -0.90490123,
                    -0.81112853,
                    -0.71237309,
                    -0.60910481,
                    -0.50218885,
                    -0.39145602,
                    -0.27565527,
                    -0.15499045,
                    -0.03079544,
                    0.0954182,
                    0.22289297,
                    0.35113123,
                    0.48142087,
                    0.61265293,
                    0.74436161,
                    0.87523702,
                    1.00413008,
                    1.12962862,
                    1.25087449,
                    1.36677401,
                    1.47631647,
                    1.57808441,
                    1.6708193,
                ],
                [
                    2.09891235,
                    1.83630532,
                    1.56977608,
                    1.30530584,
                    1.04816384,
                    0.80255076,
                    0.5708684,
                    0.35549412,
                    0.16001105,
                    -0.01287501,
                    -0.16311191,
                    -0.29020323,
                    -0.39911796,
                    -0.48543823,
                    -0.54423992,
                    -0.57351984,
                    -0.57219998,
                    -0.54137028,
                    -0.47952512,
                    -0.39260272,
                    -0.2854298,
                    -0.15650375,
                    -0.0057273,
                    0.16654605,
                    0.35878886,
                    0.5685664,
                    0.79402825,
                    1.03201325,
                    1.27853098,
                    1.5319094,
                    1.79481735,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].values), np.abs(expected_eigenfunctions)
        )

        expected_eigenvectors = np.array(
            [
                [-5.19447097e-02, 1.07364355e-01, -1.08341956e-01],
                [3.13386768e-02, -7.48618140e-03, -1.56934607e-02],
                [-8.80696189e-02, 1.79541926e-02, 1.00982071e-01],
                [3.12043115e-02, 4.40233565e-02, 9.99531768e-02],
                [-6.47051685e-02, 1.72160222e-02, -1.28374360e-01],
                [-6.96942141e-02, -5.27859833e-03, 3.39891306e-02],
                [8.66286766e-02, -3.30003327e-02, 2.87625209e-02],
                [1.03090482e-01, -4.61595993e-02, 9.54156020e-03],
                [1.84466557e-02, -2.34792567e-02, 9.89545903e-02],
                [-8.01944792e-02, -3.82204134e-02, 9.38761552e-02],
                [1.15388239e-01, -5.13487106e-02, 1.38419767e-01],
                [-6.67537106e-02, -6.00736557e-02, -1.46800677e-01],
                [-1.86596526e-02, 7.91572019e-02, -4.53047334e-02],
                [1.47485422e-02, 7.53092192e-02, 5.78783462e-02],
                [1.02030869e-01, 1.67644503e-01, -2.23472728e-02],
                [-2.20199185e-02, 6.56025091e-02, -5.84058738e-04],
                [7.05015003e-02, 7.88868368e-03, -2.06067263e-02],
                [-7.11973322e-03, 8.18543885e-02, 5.46622141e-03],
                [4.68798190e-02, -3.09686221e-02, -2.11376364e-03],
                [1.13994427e-01, 1.60256919e-01, -2.91972229e-02],
                [-5.22163405e-02, -5.71957303e-02, 1.19010757e-01],
                [3.26415618e-02, 1.17738452e-01, -2.14419382e-02],
                [9.87119777e-02, -1.15209344e-01, -1.48752307e-02],
                [-7.82813483e-02, 8.65143113e-02, 9.76578262e-02],
                [-8.77115985e-02, 9.53936445e-02, 4.39059372e-02],
                [6.73759955e-02, -1.45714211e-01, 1.62682942e-01],
                [1.65463374e-02, 6.27486762e-02, -1.59021441e-01],
                [-1.74044083e-01, 1.41965431e-01, 9.73629567e-02],
                [2.02837695e-01, 1.30014710e-01, 9.99591454e-02],
                [-1.54990222e-02, 1.21577178e-01, -4.87475962e-03],
                [1.84885261e-01, 7.27375073e-02, 1.38935805e-02],
                [-5.98098855e-02, -8.48969084e-02, -4.41346227e-02],
                [-1.03542067e-01, -2.11449840e-02, -2.29825285e-01],
                [-4.57768495e-02, -8.67285077e-02, 3.85752787e-02],
                [7.92110470e-02, -1.21215695e-01, -8.66908067e-03],
                [-6.48677444e-02, -1.32322956e-01, 1.11076503e-01],
                [-3.51998229e-02, 7.02065186e-02, 1.43251015e-01],
                [1.40185962e-01, -8.61533714e-02, 9.22944800e-02],
                [-2.24903170e-02, 1.03583261e-01, 8.42384682e-02],
                [1.10812824e-02, -4.17639109e-02, 5.47154361e-02],
                [-8.12796290e-02, -1.00426779e-01, 6.46223090e-02],
                [1.68052229e-01, 1.96753691e-02, -2.33794348e-02],
                [7.28038287e-02, 4.27438652e-02, -1.19630626e-01],
                [-1.17150740e-01, -8.63202880e-02, -4.76618644e-02],
                [3.22047217e-02, -1.06793117e-01, -3.53611132e-02],
                [-2.03631171e-01, -2.96547374e-01, 1.04498116e-02],
                [-4.91955305e-02, 1.32272519e-01, -3.51020168e-02],
                [1.35583985e-01, 9.57522299e-02, -2.16974252e-01],
                [1.99270613e-01, -4.67819138e-02, 6.44195007e-02],
                [-2.19735174e-01, 2.52507634e-01, -9.40893584e-02],
                [-1.04976570e-01, -1.35343696e-01, -1.55033584e-01],
                [2.10135927e-02, -5.77331634e-02, 3.31782618e-02],
                [1.02513147e-02, -2.12559565e-02, -4.17120572e-02],
                [-4.70570063e-02, -4.36890848e-02, -1.09061920e-02],
                [-9.48441348e-02, 1.41609119e-01, 1.52228759e-01],
                [6.11750669e-02, 1.64138314e-01, 7.11235344e-02],
                [-2.81098464e-02, 1.45617549e-01, -1.73424141e-01],
                [-9.67657627e-04, -3.81567463e-02, -2.72908842e-03],
                [-1.31496588e-02, -2.09996010e-01, -1.79382386e-01],
                [9.27778771e-02, -1.46899219e-01, -1.82265026e-02],
                [2.25028463e-03, 6.05279291e-02, -1.63692129e-01],
                [-1.17630178e-01, 7.72643296e-02, -7.79732452e-02],
                [-1.78025464e-01, -3.90284540e-02, -1.65666629e-02],
                [1.69146117e-02, 7.64040058e-02, 8.22763385e-02],
                [-1.28750133e-01, 6.72200946e-02, 1.63575097e-02],
                [1.11089420e-01, 3.38653842e-02, -1.38263024e-01],
                [7.34224108e-02, -1.22992462e-01, 9.82820672e-02],
                [-4.90255465e-02, 1.37954707e-01, -2.37348629e-02],
                [-2.85605492e-02, 4.57776485e-02, 1.86810928e-02],
                [4.81127079e-02, -3.24070725e-02, -1.66857052e-01],
                [-2.32143682e-02, 1.75406894e-04, 1.65102357e-01],
                [1.46569096e-02, -8.77230757e-02, -4.07136359e-02],
                [-4.55106308e-02, -1.22058268e-01, -9.41505427e-02],
                [8.12721985e-02, 8.37577830e-02, 5.91552118e-02],
                [-1.57949373e-01, -5.01148564e-02, 9.99586060e-02],
                [8.93611883e-02, 1.25899496e-01, 2.30735066e-01],
                [1.38110461e-01, -1.72300410e-01, 1.52663753e-01],
                [-6.08632860e-02, -3.78399346e-02, -2.57127121e-02],
                [1.26549216e-02, 5.71840161e-02, 1.44632810e-02],
                [-6.88721316e-02, -3.97365349e-02, 4.02439296e-02],
                [-5.29638647e-02, -5.30376969e-02, -6.98220071e-02],
                [3.17644870e-02, -1.60993595e-01, -1.70534393e-01],
                [1.11656484e-01, 2.42954706e-01, -1.11528523e-01],
                [-1.44499253e-01, -1.15466174e-01, 1.56937408e-02],
                [1.41375256e-01, -3.66078241e-02, -1.30313885e-01],
                [-1.02737178e-01, -1.64447958e-01, -1.12971887e-01],
                [7.78224846e-02, -1.46087540e-01, -5.99399112e-02],
                [1.37439109e-01, 3.50872297e-02, 1.60502360e-02],
                [-9.21742771e-02, 6.22532946e-02, 5.77951523e-02],
                [-5.51914612e-02, 1.77272108e-02, 1.35267835e-01],
                [-2.62420710e-01, 7.73257243e-02, -1.67798328e-02],
                [1.11439394e-02, -5.27574024e-02, 1.76069466e-01],
                [2.58447927e-01, -6.05486584e-02, -6.67627906e-02],
                [-1.86697542e-01, 5.67714083e-02, -1.14613308e-01],
                [3.05088461e-02, 4.20736192e-02, 1.86676327e-02],
                [4.39787628e-02, -3.90533949e-02, 1.75813045e-01],
                [-8.63341966e-02, -6.92012845e-02, 1.17173282e-01],
                [3.34194194e-02, 1.62723080e-03, -1.03053337e-01],
                [-1.36524854e-02, 6.29844755e-03, 7.77046764e-02],
                [1.85335711e-01, -1.17389964e-02, -1.87026265e-01],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenvectors"]), np.abs(expected_eigenvectors)
        )

    def test_fit_inner_product_sparse(self):
        points = DenseArgvals({"input_dim_0": np.linspace(0, 1, 31)})
        results = _fit_inner_product(
            data=self.fdata_sparse, points=points, n_components=3, method_smoothing="LP"
        )

        expected_eigenvalues = np.array([0.35452773, 0.09616793, 0.023012])
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues
        )

        expected_eigenfunctions = np.array(
            [
                [
                    -0.60074253,
                    -0.64673423,
                    -0.69126611,
                    -0.73413834,
                    -0.77519686,
                    -0.81428624,
                    -0.85123052,
                    -0.88589171,
                    -0.91812492,
                    -0.94787728,
                    -0.975128,
                    -0.99993521,
                    -1.02263665,
                    -1.04246102,
                    -1.05882463,
                    -1.07165903,
                    -1.08093707,
                    -1.08661736,
                    -1.08869806,
                    -1.08774803,
                    -1.08464068,
                    -1.07898432,
                    -1.0706556,
                    -1.05963782,
                    -1.04593387,
                    -1.02964434,
                    -1.0108691,
                    -0.989747,
                    -0.96639422,
                    -0.9409238,
                    -0.91349784,
                ],
                [
                    -1.47760315,
                    -1.43106831,
                    -1.37741304,
                    -1.31667635,
                    -1.24909406,
                    -1.17490792,
                    -1.0942959,
                    -1.00754251,
                    -0.91496318,
                    -0.81708359,
                    -0.71447874,
                    -0.60798156,
                    -0.49889687,
                    -0.38541037,
                    -0.26713901,
                    -0.14501703,
                    -0.02022734,
                    0.10601922,
                    0.23252744,
                    0.35887272,
                    0.48629376,
                    0.61396837,
                    0.7409811,
                    0.8664683,
                    0.98946149,
                    1.10898004,
                    1.22401847,
                    1.33356815,
                    1.43664355,
                    1.5321878,
                    1.61935894,
                ],
                [
                    2.04283778,
                    1.78662171,
                    1.52854816,
                    1.27228892,
                    1.02147833,
                    0.77973929,
                    0.55077714,
                    0.33789707,
                    0.14416169,
                    -0.02847668,
                    -0.17867214,
                    -0.30621775,
                    -0.41376153,
                    -0.49722294,
                    -0.55199143,
                    -0.57687362,
                    -0.57151399,
                    -0.53601634,
                    -0.47138916,
                    -0.38223323,
                    -0.27290042,
                    -0.14052865,
                    0.01483204,
                    0.19207535,
                    0.38939741,
                    0.60388238,
                    0.83233805,
                    1.07111124,
                    1.31662862,
                    1.56540277,
                    1.81371431,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].values), np.abs(expected_eigenfunctions)
        )

        expected_eigenvectors = np.array(
            [
                [-0.05580551, 0.11351534, -0.09907844],
                [0.02813195, -0.00420509, -0.00329009],
                [-0.0864791, 0.00930044, 0.12810921],
                [0.02714555, 0.05203484, 0.1179032],
                [-0.06238326, 0.01899009, -0.14290332],
                [-0.06652097, -0.01499058, 0.03534634],
                [0.08439401, -0.03124853, 0.01807776],
                [0.10250938, -0.04058883, 0.04285735],
                [0.02104666, -0.0239646, 0.11123619],
                [-0.07968627, -0.0294433, 0.08559434],
                [0.10787755, -0.05735616, 0.12791943],
                [-0.07132702, -0.05085852, -0.15280083],
                [-0.02354397, 0.08353554, -0.02327677],
                [0.01118747, 0.08379327, 0.06105529],
                [0.09645189, 0.14988839, -0.0122435],
                [-0.02428198, 0.06368027, -0.00042716],
                [0.07358969, 0.01562118, -0.04627153],
                [-0.00681106, 0.06781248, 0.00702765],
                [0.04546741, -0.01356102, 0.00775892],
                [0.11793593, 0.15180139, -0.04287635],
                [-0.04703864, -0.05329638, 0.13160763],
                [0.03212548, 0.12379242, -0.03064533],
                [0.10129093, -0.11444956, 0.00056143],
                [-0.07760841, 0.09235337, 0.0799155],
                [-0.08319255, 0.09052079, 0.05831766],
                [0.07141222, -0.15454803, 0.14786731],
                [0.01684446, 0.07227474, -0.17427933],
                [-0.17215318, 0.13188654, 0.08763207],
                [0.19642463, 0.11926724, 0.0837437],
                [-0.01177387, 0.12785542, 0.01435098],
                [0.19366992, 0.07497645, 0.01624074],
                [-0.06064443, -0.0891696, -0.06292776],
                [-0.10571653, -0.02028544, -0.2331527],
                [-0.05484498, -0.0856415, 0.01877001],
                [0.0801574, -0.12036061, -0.02312876],
                [-0.06651543, -0.13768109, 0.10426333],
                [-0.02808409, 0.05590107, 0.12689083],
                [0.14156231, -0.09037201, 0.0846881],
                [-0.02704655, 0.09476773, 0.09851838],
                [0.01133944, -0.04086972, 0.05570483],
                [-0.08048785, -0.09197695, 0.10132822],
                [0.16827203, 0.02179639, -0.02118721],
                [0.06725938, 0.05847109, -0.10252294],
                [-0.11860587, -0.0925427, -0.04806455],
                [0.02559566, -0.09657009, -0.04506468],
                [-0.20280158, -0.29680587, 0.01423427],
                [-0.04901555, 0.12971998, -0.03963074],
                [0.14273531, 0.0988545, -0.20561198],
                [0.20290268, -0.04078118, 0.06146803],
                [-0.2245286, 0.25714945, -0.10030518],
                [-0.10380897, -0.12507053, -0.14538676],
                [0.02303796, -0.05883291, 0.04591946],
                [0.01550245, -0.01693678, -0.05416617],
                [-0.03777274, -0.02530521, 0.01039071],
                [-0.09851212, 0.1391824, 0.13964122],
                [0.06284657, 0.15815891, 0.09005193],
                [-0.02568164, 0.13886764, -0.16665694],
                [0.00124687, -0.04090997, -0.00537679],
                [-0.00761377, -0.21568438, -0.21288045],
                [0.09476163, -0.13981109, -0.02562837],
                [-0.00103851, 0.06731325, -0.14723223],
                [-0.11868023, 0.0681979, -0.07284214],
                [-0.17880846, -0.03849648, -0.02939082],
                [0.01506312, 0.06475985, 0.07780293],
                [-0.12630187, 0.05473898, -0.01242645],
                [0.11523339, 0.03209042, -0.1517581],
                [0.07310876, -0.1246226, 0.07435514],
                [-0.04886934, 0.14222115, -0.02335933],
                [-0.03399651, 0.03568921, 0.0225772],
                [0.04530995, -0.04306988, -0.16604222],
                [-0.02548504, 0.00238039, 0.16090128],
                [0.00840641, -0.08820442, -0.03677192],
                [-0.04523063, -0.12222628, -0.09041546],
                [0.07765487, 0.07887965, 0.05493241],
                [-0.15503988, -0.0588843, 0.08646158],
                [0.09222319, 0.13319596, 0.23265226],
                [0.13945072, -0.1817109, 0.12050595],
                [-0.06228799, -0.03197996, -0.02309701],
                [0.01954774, 0.05960881, 0.02915304],
                [-0.06665727, -0.03702697, 0.0579079],
                [-0.05556478, -0.05219494, -0.0517418],
                [0.03173321, -0.15309964, -0.17728696],
                [0.11232858, 0.25706979, -0.11060182],
                [-0.14674448, -0.10522906, 0.01109418],
                [0.14649121, -0.03681629, -0.09625421],
                [-0.10508875, -0.18342042, -0.12140745],
                [0.07349299, -0.14700778, -0.04477885],
                [0.13401535, 0.02179614, 0.0024433],
                [-0.09628766, 0.05577158, 0.05535695],
                [-0.05872406, 0.01198505, 0.13123076],
                [-0.25787299, 0.08372795, -0.0076236],
                [0.01308988, -0.05242959, 0.15285439],
                [0.25143613, -0.06568823, -0.05702088],
                [-0.185947, 0.06174632, -0.11774187],
                [0.02715824, 0.05017329, 0.01777972],
                [0.04364327, -0.04187054, 0.18665333],
                [-0.08520973, -0.07988129, 0.12724859],
                [0.03088082, 0.00144601, -0.11325474],
                [-0.01173948, -0.00763724, 0.08390134],
                [0.18496335, -0.00997102, -0.20078335],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenvectors"]), np.abs(expected_eigenvectors)
        )

    def test_fit_inner_product_2d(self):
        points = DenseArgvals(
            {"input_dim_0": np.linspace(0, 1, 31), "input_dim_1": np.linspace(0, 1, 31)}
        )
        results = _fit_inner_product(
            data=self.fdata_2D, points=points, n_components=3, noise_variance=0
        )

        expected_eigenvalues = np.array([0.05593339, 0.01700472, 0.00488822])
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues
        )

        expected_eigenfunctions = np.array(
            [
                [
                    1.47514334,
                    1.54467574,
                    1.6028599,
                    1.65691751,
                    1.70790205,
                    1.7569811,
                    1.79960272,
                    1.83166453,
                    1.8540233,
                    1.86949064,
                    1.87661396,
                    1.87173899,
                    1.85645771,
                    1.82842538,
                    1.79175456,
                    1.74484236,
                    1.68863139,
                    1.62104709,
                    1.54389832,
                    1.45720381,
                    1.36520122,
                    1.26613619,
                    1.16031448,
                    1.05300135,
                    0.94336261,
                    0.83381865,
                    0.72562536,
                    0.62314679,
                    0.52415756,
                    0.42751412,
                    0.33256727,
                ],
                [
                    0.11784129,
                    -0.01665317,
                    -0.17074994,
                    -0.33676668,
                    -0.50855778,
                    -0.68652956,
                    -0.87395132,
                    -1.05637378,
                    -1.23035666,
                    -1.40335663,
                    -1.56063785,
                    -1.69675709,
                    -1.81446162,
                    -1.9173993,
                    -2.00140845,
                    -2.06337789,
                    -2.0934897,
                    -2.08806141,
                    -2.05358293,
                    -1.99661705,
                    -1.91470071,
                    -1.80818345,
                    -1.67715817,
                    -1.53818047,
                    -1.39354284,
                    -1.25353007,
                    -1.10942553,
                    -0.966413,
                    -0.82749406,
                    -0.69634652,
                    -0.5622902,
                ],
                [
                    4.59879423,
                    4.36871316,
                    4.1037509,
                    3.80024551,
                    3.46668621,
                    3.11242035,
                    2.73204638,
                    2.32864476,
                    1.91080862,
                    1.49332426,
                    1.08309198,
                    0.69922875,
                    0.33766595,
                    0.00941735,
                    -0.28254203,
                    -0.52732257,
                    -0.73055244,
                    -0.90428912,
                    -1.04139604,
                    -1.14779009,
                    -1.21218645,
                    -1.2267841,
                    -1.20618995,
                    -1.1648549,
                    -1.10181846,
                    -1.02664796,
                    -0.94194318,
                    -0.84621469,
                    -0.74955095,
                    -0.65368865,
                    -0.52138929,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].values[:, 0]),
            np.abs(expected_eigenfunctions),
        )

        expected_eigenvectors = np.array(
            [
                [-0.02478052, -0.19704852, 0.11322648],
                [-0.06559546, -0.06084416, -0.02588201],
                [0.1092945, -0.04025083, -0.03314717],
                [0.00926018, -0.06647725, -0.13734249],
                [0.01325195, -0.00920156, 0.1345378],
                [0.06720341, 0.00873046, -0.00206291],
                [-0.0295933, 0.10120912, -0.01818244],
                [-0.04588687, 0.10167812, -0.06591057],
                [-0.0008623, -0.01254694, -0.06337633],
                [0.06142619, -0.04109768, 0.0072811],
                [-0.10252175, -0.02436189, -0.11760938],
                [0.06226508, 0.14791061, 0.12658558],
                [0.07539783, 0.02833379, -0.04597973],
                [0.02490737, -0.06935203, -0.05015007],
                [-0.01219617, -0.0105675, -0.13569112],
                [0.0292805, -0.05603073, 0.02012811],
                [-0.10589005, -0.06180713, 0.01726319],
                [0.0575498, 0.01369198, -0.02778009],
                [-0.11524962, -0.12673792, 0.02540351],
                [-0.08100391, -0.08386064, -0.10248113],
                [-0.01530634, -0.1337682, -0.03915312],
                [-0.06561366, -0.17847279, -0.00474339],
                [-0.10605497, 0.09734514, -0.01284604],
                [0.08636768, -0.12021909, -0.05531598],
                [0.13842204, -0.01894325, -0.06910275],
                [-0.13186572, -0.04843518, -0.05893503],
                [-0.07682991, -0.07799207, 0.10757505],
                [0.32179871, 0.10375883, -0.09649541],
                [-0.12417456, -0.08361207, -0.18419266],
                [0.06349135, -0.04492816, -0.06116925],
                [-0.11098697, 0.02757588, -0.15116187],
                [-0.04645775, -0.05733564, 0.17226764],
                [0.08143269, 0.14349328, 0.18634342],
                [0.00896005, 0.00430729, 0.02942599],
                [-0.16595356, -0.02153532, 0.02935731],
                [0.02731831, 0.01961477, 0.01299862],
                [0.08206412, -0.04123104, -0.07605796],
                [-0.03593125, 0.21069852, -0.111173],
                [0.01823385, -0.1852414, -0.02962521],
                [-0.02490467, -0.01669724, -0.04983547],
                [-0.06147972, -0.21228126, 0.06182083],
                [-0.12927321, 0.034913, -0.08277863],
                [-0.05312765, 0.02378546, 0.03549432],
                [0.01651832, -0.040844, 0.17573007],
                [-0.04976537, 0.07909607, 0.04173025],
                [0.02882474, 0.02085084, 0.22000652],
                [0.03849427, -0.12074315, -0.00681693],
                [-0.11626811, 0.04966136, 0.02479148],
                [-0.0490996, 0.25927019, -0.21473794],
                [0.18127638, -0.25690209, 0.10688523],
                [0.00104383, 0.05446475, 0.19631724],
                [-0.09441932, -0.10412991, 0.02437305],
                [0.00148083, 0.0818471, 0.01482498],
                [0.02562728, 0.00085799, 0.04635057],
                [0.2116772, -0.01101277, -0.13942234],
                [0.03707141, -0.05593191, -0.15334918],
                [-0.00448509, -0.09056202, 0.1141067],
                [-0.02063131, 0.01262271, 0.00854663],
                [-0.10657842, 0.15891492, 0.22882899],
                [-0.10150644, 0.1392868, 0.00385368],
                [0.01168157, 0.03625952, 0.11974369],
                [0.18327627, 0.11698746, 0.03428192],
                [0.15440662, 0.04325489, 0.14734254],
                [-0.0349136, -0.15805404, -0.06990716],
                [0.20275631, 0.10727769, 0.04142768],
                [-0.10881511, 0.05141348, 0.05648445],
                [-0.08005792, 0.0555495, -0.01465965],
                [0.11095364, -0.0131653, -0.04912936],
                [0.11360813, 0.10630913, -0.09776344],
                [0.00084486, 0.23665572, 0.02535538],
                [0.09476779, 0.02003612, -0.10954218],
                [-0.04601308, 0.0474531, 0.06029206],
                [-0.02526095, 0.0662663, 0.12928131],
                [0.02675665, 0.05631165, -0.09965322],
                [0.12840394, -0.01826458, 0.03462365],
                [-0.00417158, -0.14968384, -0.19442249],
                [-0.22630375, -0.06126017, -0.06440465],
                [-0.03782011, -0.1251776, 0.07402776],
                [0.03832129, 0.02899091, -0.12452484],
                [0.00830286, -0.09344654, 0.02832821],
                [0.04191096, 0.0709991, 0.0709336],
                [-0.16048579, 0.03661775, 0.17952726],
                [-0.01982053, -0.04703358, -0.10455455],
                [0.1371997, 0.11182092, 0.08838548],
                [-0.16747116, 0.03614854, 0.0185588],
                [0.01663696, 0.12579513, 0.1873529],
                [-0.0670647, 0.19440747, 0.00034577],
                [-0.06577426, 0.079592, -0.10253935],
                [0.08047924, -0.11378542, 0.00421294],
                [0.07819435, -0.04624126, -0.10205842],
                [0.21786113, -0.11757364, 0.11335876],
                [-0.00939962, -0.03310036, -0.09048731],
                [-0.2600097, 0.05067062, -0.051844],
                [0.0960701, -0.12898741, 0.16986033],
                [0.03552344, 0.0414469, -0.04991938],
                [0.10346592, 0.19194636, -0.2124912],
                [0.04849589, -0.04932458, -0.00686136],
                [-0.00081916, 0.12013489, 0.03909399],
                [0.00514548, -0.05856277, -0.02029991],
                [-0.22725762, 0.02797389, 0.09586355],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenvectors"]), np.abs(expected_eigenvectors)
        )


class TestFitInnerProductMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            self.fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            self.fdata_sparse = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_noisy_5_100_005_2D.pickle"
        with open(fname, "rb") as handle:
            self.fdata_2D = pickle.load(handle)

        self.fdata_multi = MultivariateFunctionalData([self.fdata, self.fdata_sparse])
        self.fdata_multi_2d = MultivariateFunctionalData([self.fdata, self.fdata_2D])

    def test_fit_inner_product_dense_and_sparse(self):
        points = [
            DenseArgvals({"input_dim_0": np.linspace(0, 1, 21)}),
            DenseArgvals({"input_dim_0": np.linspace(0, 1, 31)}),
        ]
        results = _fit_inner_product_multivariate(
            data=self.fdata_multi, points=points, n_components=0.95
        )

        expected_eigenvalues = np.array([0.71418775, 0.19418201, 0.04587047])
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues, decimal=2
        )

        expected_eigenfunctions_0 = np.array(
            [
                [
                    -0.443567,
                    -0.48818426,
                    -0.53112492,
                    -0.57173175,
                    -0.60932241,
                    -0.64390603,
                    -0.67492644,
                    -0.70219288,
                    -0.72608236,
                    -0.74565687,
                    -0.75986947,
                    -0.76848771,
                    -0.77153254,
                    -0.76969791,
                    -0.76410669,
                    -0.75436044,
                    -0.74011551,
                    -0.72151799,
                    -0.69861615,
                    -0.67238363,
                    -0.64323212,
                ],
                [
                    -1.04228682,
                    -0.98384643,
                    -0.91930011,
                    -0.84730553,
                    -0.76649788,
                    -0.67660569,
                    -0.57734506,
                    -0.47005927,
                    -0.35643063,
                    -0.23663807,
                    -0.10894767,
                    0.02406497,
                    0.1594731,
                    0.29642208,
                    0.43556414,
                    0.57505532,
                    0.71215304,
                    0.84380085,
                    0.96764952,
                    1.08112296,
                    1.18094224,
                ],
                [
                    1.46963148,
                    1.1898362,
                    0.90902424,
                    0.63986828,
                    0.39138072,
                    0.16946409,
                    -0.01822704,
                    -0.16921622,
                    -0.28725648,
                    -0.36904866,
                    -0.40577881,
                    -0.3943023,
                    -0.33436893,
                    -0.23412287,
                    -0.10059165,
                    0.06772011,
                    0.26883432,
                    0.49787278,
                    0.74926084,
                    1.01458471,
                    1.29288195,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[0].values),
            np.abs(expected_eigenfunctions_0),
            decimal=0,
        )

        expected_eigenfunctions_1 = np.array(
            [
                [
                    -4.23706016e-01,
                    -4.56050323e-01,
                    -4.87367432e-01,
                    -5.17516959e-01,
                    -5.46390926e-01,
                    -5.73880081e-01,
                    -5.99860658e-01,
                    -6.24235575e-01,
                    -6.46902999e-01,
                    -6.67825675e-01,
                    -6.86988842e-01,
                    -7.04433296e-01,
                    -7.20396634e-01,
                    -7.34336212e-01,
                    -7.45841458e-01,
                    -7.54864058e-01,
                    -7.61384769e-01,
                    -7.65374290e-01,
                    -7.66831072e-01,
                    -7.66155385e-01,
                    -7.63962144e-01,
                    -7.59975503e-01,
                    -7.54108510e-01,
                    -7.46349152e-01,
                    -7.36699254e-01,
                    -7.25229451e-01,
                    -7.12009868e-01,
                    -6.97137930e-01,
                    -6.80695175e-01,
                    -6.62760800e-01,
                    -6.43448977e-01,
                ],
                [
                    -1.03370771e00,
                    -1.00151838e00,
                    -9.64345023e-01,
                    -9.22206317e-01,
                    -8.75258129e-01,
                    -8.23659201e-01,
                    -7.67523512e-01,
                    -7.07041223e-01,
                    -6.42424391e-01,
                    -5.74035638e-01,
                    -5.02274102e-01,
                    -4.27722499e-01,
                    -3.51301864e-01,
                    -2.71729089e-01,
                    -1.88722823e-01,
                    -1.02933574e-01,
                    -1.51880725e-02,
                    7.36663018e-02,
                    1.62790554e-01,
                    2.51874244e-01,
                    3.41769728e-01,
                    4.31910367e-01,
                    5.21655684e-01,
                    6.10398751e-01,
                    6.97456951e-01,
                    7.82135829e-01,
                    8.63723110e-01,
                    9.41503642e-01,
                    1.01477835e00,
                    1.08279777e00,
                    1.14496430e00,
                ],
                [
                    1.46080188e00,
                    1.27906705e00,
                    1.09595585e00,
                    9.14057832e-01,
                    7.35936726e-01,
                    5.64154375e-01,
                    4.01328092e-01,
                    2.49793514e-01,
                    1.11715967e-01,
                    -1.15181633e-02,
                    -1.18955547e-01,
                    -2.10440292e-01,
                    -2.87826940e-01,
                    -3.48250056e-01,
                    -3.88457079e-01,
                    -4.07592813e-01,
                    -4.05389846e-01,
                    -3.81907746e-01,
                    -3.37842641e-01,
                    -2.76439103e-01,
                    -2.00792750e-01,
                    -1.08870476e-01,
                    -6.94365306e-04,
                    1.22967514e-01,
                    2.60855087e-01,
                    4.10923476e-01,
                    5.70933037e-01,
                    7.38321012e-01,
                    9.10577940e-01,
                    1.08525655e00,
                    1.25974714e00,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[1].values),
            np.abs(expected_eigenfunctions_1),
            decimal=0,
        )

        expected_eigenvectors = np.array(
            [
                [-5.38730137e-02, 1.10486559e-01, -1.04003177e-01],
                [2.97543507e-02, -5.85189790e-03, -9.62569854e-03],
                [-8.72951447e-02, 1.36975953e-02, 1.15087240e-01],
                [2.91944709e-02, 4.80279655e-02, 1.09062477e-01],
                [-6.35633051e-02, 1.80968873e-02, -1.35840596e-01],
                [-6.81328700e-02, -1.01049263e-02, 3.48351369e-02],
                [8.55346932e-02, -3.21428026e-02, 2.33883332e-02],
                [1.02819406e-01, -4.33854799e-02, 2.62273328e-02],
                [1.97374961e-02, -2.37586260e-02, 1.05344631e-01],
                [-7.99541579e-02, -3.39215292e-02, 8.97356071e-02],
                [1.11681504e-01, -5.43869437e-02, 1.33407499e-01],
                [-6.90324914e-02, -5.55351544e-02, -1.50349871e-01],
                [-2.10864556e-02, 8.14008158e-02, -3.44643569e-02],
                [1.29833269e-02, 7.95544559e-02, 5.94340576e-02],
                [9.92760732e-02, 1.59012657e-01, -1.68741016e-02],
                [-2.31461330e-02, 6.47134370e-02, -4.19658064e-04],
                [7.20452662e-02, 1.16924317e-02, -3.36458684e-02],
                [-6.96794871e-03, 7.49717208e-02, 6.55145507e-03],
                [4.61890431e-02, -2.23509521e-02, 2.58561028e-03],
                [1.15966182e-01, 1.56167201e-01, -3.59490073e-02],
                [-4.96530186e-02, -5.53111086e-02, 1.25580885e-01],
                [3.23900660e-02, 1.20807214e-01, -2.60559282e-02],
                [1.00010378e-01, -1.14906963e-01, -7.37310520e-03],
                [-7.79593283e-02, 8.94237407e-02, 8.89505802e-02],
                [-8.54853505e-02, 9.30619626e-02, 5.14853856e-02],
                [6.93912178e-02, -1.50234213e-01, 1.55786087e-01],
                [1.66973878e-02, 6.75161901e-02, -1.67193667e-01],
                [-1.73139000e-01, 1.37030832e-01, 9.28985315e-02],
                [1.99688809e-01, 1.24782288e-01, 9.23262711e-02],
                [-1.36557073e-02, 1.24786329e-01, 4.70613129e-03],
                [1.89276012e-01, 7.39070858e-02, 1.52420367e-02],
                [-6.02326030e-02, -8.70998256e-02, -5.36092907e-02],
                [-1.04640610e-01, -2.07121688e-02, -2.32049903e-01],
                [-5.02847244e-02, -8.62748390e-02, 2.85195083e-02],
                [7.96968598e-02, -1.20870576e-01, -1.59655184e-02],
                [-6.56961162e-02, -1.35087978e-01, 1.07917492e-01],
                [-3.16772305e-02, 6.31302710e-02, 1.35706165e-01],
                [1.40893650e-01, -8.83187763e-02, 8.86741571e-02],
                [-2.47573438e-02, 9.93058730e-02, 9.19302220e-02],
                [1.12102626e-02, -4.13450660e-02, 5.52572631e-02],
                [-8.08991008e-02, -9.62871583e-02, 8.30162246e-02],
                [1.68190413e-01, 2.07728267e-02, -2.22237663e-02],
                [7.00645463e-02, 5.06092135e-02, -1.11602544e-01],
                [-1.17892238e-01, -8.94439093e-02, -4.78555510e-02],
                [2.89326754e-02, -1.01801591e-01, -4.05307237e-02],
                [-2.03249649e-01, -2.96906135e-01, 1.21878162e-02],
                [-4.91179938e-02, 1.31096260e-01, -3.72805357e-02],
                [1.39156223e-01, 9.74037221e-02, -2.11680587e-01],
                [2.01106326e-01, -4.38579687e-02, 6.31022218e-02],
                [-2.22156055e-01, 2.54997345e-01, -9.74102951e-02],
                [-1.04410739e-01, -1.30334757e-01, -1.50685759e-01],
                [2.20212305e-02, -5.83033961e-02, 3.95436789e-02],
                [1.28599169e-02, -1.91452631e-02, -4.81122918e-02],
                [-4.24552843e-02, -3.46013118e-02, -6.30849245e-04],
                [-9.66823380e-02, 1.40473496e-01, 1.46396951e-01],
                [6.20130642e-02, 1.61290624e-01, 8.10260080e-02],
                [-2.69112400e-02, 1.42432252e-01, -1.70208347e-01],
                [1.33467127e-04, -3.95663721e-02, -3.99859783e-03],
                [-1.04009112e-02, -2.12972397e-01, -1.96563944e-01],
                [9.37816610e-02, -1.43492779e-01, -2.21665025e-02],
                [6.18637676e-04, 6.39612505e-02, -1.55922335e-01],
                [-1.18172016e-01, 7.28445381e-02, -7.54785064e-02],
                [-1.78444255e-01, -3.88110208e-02, -2.29551998e-02],
                [1.59976288e-02, 7.06856014e-02, 8.04463229e-02],
                [-1.27558226e-01, 6.10616759e-02, 2.38927400e-03],
                [1.13166899e-01, 3.30311473e-02, -1.44982670e-01],
                [7.32807417e-02, -1.23942072e-01, 8.65250076e-02],
                [-4.89578806e-02, 1.40173204e-01, -2.35843152e-02],
                [-3.12656766e-02, 4.08123140e-02, 2.09014618e-02],
                [4.67300373e-02, -3.76789055e-02, -1.66753722e-01],
                [-2.43459491e-02, 1.23819002e-03, 1.63308732e-01],
                [1.15591811e-02, -8.80143089e-02, -3.89193736e-02],
                [-4.53775079e-02, -1.22226830e-01, -9.27811533e-02],
                [7.94902211e-02, 8.13945075e-02, 5.73097845e-02],
                [-1.56532201e-01, -5.45246108e-02, 9.36950342e-02],
                [9.07962539e-02, 1.29564546e-01, 2.32286007e-01],
                [1.38799881e-01, -1.77143660e-01, 1.36907832e-01],
                [-6.15795881e-02, -3.49616045e-02, -2.46715980e-02],
                [1.60773555e-02, 5.84333331e-02, 2.19021453e-02],
                [-6.77847384e-02, -3.84192966e-02, 4.91896788e-02],
                [-5.42626842e-02, -5.26351654e-02, -6.10084004e-02],
                [3.17591148e-02, -1.57194813e-01, -1.74473541e-01],
                [1.12006035e-01, 2.50170219e-01, -1.11324946e-01],
                [-1.45637559e-01, -1.10477566e-01, 1.31424130e-02],
                [1.43937868e-01, -3.66643453e-02, -1.13640668e-01],
                [-1.03920352e-01, -1.73959850e-01, -1.17256607e-01],
                [7.56890207e-02, -1.46599401e-01, -5.24583945e-02],
                [1.35762428e-01, 2.85484282e-02, 9.51636659e-03],
                [-9.42335587e-02, 5.90815767e-02, 5.67084828e-02],
                [-5.69551745e-02, 1.48688470e-02, 1.33684860e-01],
                [-2.60210102e-01, 8.05602931e-02, -1.21589783e-02],
                [1.21127120e-02, -5.26919648e-02, 1.64656983e-01],
                [2.55014066e-01, -6.31079757e-02, -6.20257902e-02],
                [-1.86356325e-01, 5.93032695e-02, -1.16530527e-01],
                [2.88488943e-02, 4.61243504e-02, 1.81497104e-02],
                [4.38184823e-02, -4.04965312e-02, 1.81568988e-01],
                [-8.57897898e-02, -7.45709672e-02, 1.22514073e-01],
                [3.21669854e-02, 1.55529130e-03, -1.08380512e-01],
                [-1.27057016e-02, -5.87722149e-04, 8.12616760e-02],
                [1.85184053e-01, -1.08392446e-02, -1.94325032e-01],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenvectors"]), np.abs(expected_eigenvectors), decimal=2
        )

    def test_fit_inner_product_with_2d(self):
        points = [
            DenseArgvals({"input_dim_0": np.linspace(0, 1, 21)}),
            DenseArgvals(
                {
                    "input_dim_0": np.linspace(0, 1, 11),
                    "input_dim_1": np.linspace(0, 1, 11),
                }
            ),
        ]
        results = _fit_inner_product_multivariate(
            data=self.fdata_multi_2d,
            points=points,
            n_components=0.7,
            noise_variance=np.array([0.02, 0]),
        )

        expected_eigenvalues = np.array([0.39874611, 0.10976592])
        np.testing.assert_array_almost_equal(
            results["eigenvalues"], expected_eigenvalues
        )

        expected_eigenfunctions = np.array(
            [
                [
                    -0.56155938,
                    -0.62133777,
                    -0.67913943,
                    -0.73417332,
                    -0.78563704,
                    -0.83363375,
                    -0.87750705,
                    -0.91694105,
                    -0.95236145,
                    -0.98254038,
                    -1.00622712,
                    -1.02307722,
                    -1.03305684,
                    -1.03697946,
                    -1.03626865,
                    -1.03038185,
                    -1.01878055,
                    -1.00151609,
                    -0.97855767,
                    -0.95115166,
                    -0.91986796,
                ],
                [
                    -1.36542023,
                    -1.31021198,
                    -1.24699743,
                    -1.17314973,
                    -1.08622026,
                    -0.9854227,
                    -0.86982581,
                    -0.74107467,
                    -0.60158934,
                    -0.45124924,
                    -0.28712839,
                    -0.11226447,
                    0.06955299,
                    0.256635,
                    0.44919973,
                    0.64506205,
                    0.84060867,
                    1.03152632,
                    1.21450909,
                    1.38575825,
                    1.54099855,
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[0].values),
            np.abs(expected_eigenfunctions),
            decimal=1,
        )

        expected_eigenfunctions = np.array(
            [
                [
                    [
                        -6.80958361e-01,
                        -7.22624526e-01,
                        -7.43090225e-01,
                        -7.32043580e-01,
                        -6.92082367e-01,
                        -6.27475693e-01,
                        -5.38987985e-01,
                        -4.30427197e-01,
                        -3.13421338e-01,
                        -2.03369740e-01,
                        -1.06587934e-01,
                    ],
                    [
                        -6.56485328e-01,
                        -6.93619538e-01,
                        -7.03038375e-01,
                        -6.82959966e-01,
                        -6.38324541e-01,
                        -5.69173407e-01,
                        -4.82222474e-01,
                        -3.81919070e-01,
                        -2.80286023e-01,
                        -1.85897932e-01,
                        -9.64344939e-02,
                    ],
                    [
                        -5.99263249e-01,
                        -6.27981405e-01,
                        -6.27079141e-01,
                        -5.99509994e-01,
                        -5.50443770e-01,
                        -4.85442113e-01,
                        -4.04622094e-01,
                        -3.16509219e-01,
                        -2.32133464e-01,
                        -1.55911332e-01,
                        -8.32720119e-02,
                    ],
                    [
                        -5.11558750e-01,
                        -5.29146767e-01,
                        -5.20298423e-01,
                        -4.89059031e-01,
                        -4.41182516e-01,
                        -3.82313098e-01,
                        -3.13650250e-01,
                        -2.41835270e-01,
                        -1.77363558e-01,
                        -1.20977667e-01,
                        -7.05845445e-02,
                    ],
                    [
                        -4.03947571e-01,
                        -4.14420662e-01,
                        -4.00902706e-01,
                        -3.70217680e-01,
                        -3.28063497e-01,
                        -2.76973642e-01,
                        -2.21609616e-01,
                        -1.68104820e-01,
                        -1.23158671e-01,
                        -8.39340829e-02,
                        -4.75200279e-02,
                    ],
                    [
                        -3.02493401e-01,
                        -3.05619182e-01,
                        -2.88407121e-01,
                        -2.59069261e-01,
                        -2.22963458e-01,
                        -1.82242866e-01,
                        -1.41144723e-01,
                        -1.04527694e-01,
                        -7.57692358e-02,
                        -4.94133213e-02,
                        -2.28001734e-02,
                    ],
                    [
                        -2.20278050e-01,
                        -2.17021451e-01,
                        -1.99801321e-01,
                        -1.71818517e-01,
                        -1.41621079e-01,
                        -1.10911554e-01,
                        -8.17839731e-02,
                        -5.73903072e-02,
                        -4.02319310e-02,
                        -2.56619248e-02,
                        -1.12880493e-02,
                    ],
                    [
                        -1.60710452e-01,
                        -1.49555260e-01,
                        -1.33288449e-01,
                        -1.11055061e-01,
                        -8.74709103e-02,
                        -6.36237895e-02,
                        -4.28704764e-02,
                        -2.79753734e-02,
                        -1.91552412e-02,
                        -1.26026197e-02,
                        -9.20765029e-03,
                    ],
                    [
                        -1.13984231e-01,
                        -9.62261435e-02,
                        -8.28978945e-02,
                        -6.83193005e-02,
                        -5.07389540e-02,
                        -3.30213896e-02,
                        -2.00416070e-02,
                        -1.37541077e-02,
                        -9.39734771e-03,
                        -6.24151582e-03,
                        -3.68623327e-03,
                    ],
                    [
                        -7.11691801e-02,
                        -5.68245977e-02,
                        -4.88632059e-02,
                        -4.01229982e-02,
                        -2.84261509e-02,
                        -1.58322870e-02,
                        -9.19206920e-03,
                        -7.34205189e-03,
                        -5.64795091e-03,
                        -2.34039603e-03,
                        1.79218899e-03,
                    ],
                    [
                        -3.30686159e-02,
                        -3.73012257e-02,
                        -3.15455840e-02,
                        -2.68355426e-02,
                        -1.83371169e-02,
                        -9.99607444e-03,
                        -8.13279329e-03,
                        -7.76289704e-03,
                        -3.99297699e-03,
                        3.80920208e-04,
                        3.93792094e-03,
                    ],
                ],
                [
                    [
                        -1.46045057e-01,
                        3.15078561e-02,
                        2.33422791e-01,
                        4.32665103e-01,
                        5.99284113e-01,
                        6.93774254e-01,
                        6.97818452e-01,
                        6.23365811e-01,
                        4.91683677e-01,
                        3.43115112e-01,
                        1.96266084e-01,
                    ],
                    [
                        -8.26223341e-02,
                        9.17498921e-02,
                        2.83358686e-01,
                        4.78617436e-01,
                        6.36225718e-01,
                        7.20610856e-01,
                        7.13744806e-01,
                        6.26473983e-01,
                        4.90662177e-01,
                        3.43104921e-01,
                        2.02853481e-01,
                    ],
                    [
                        -2.77318882e-02,
                        1.31370133e-01,
                        3.01610023e-01,
                        4.70708423e-01,
                        6.01099756e-01,
                        6.64953995e-01,
                        6.53991855e-01,
                        5.73522075e-01,
                        4.47688404e-01,
                        3.11427782e-01,
                        1.87061386e-01,
                    ],
                    [
                        2.22702070e-02,
                        1.45997092e-01,
                        2.77390214e-01,
                        4.02180882e-01,
                        4.98606924e-01,
                        5.44964190e-01,
                        5.31006956e-01,
                        4.66444203e-01,
                        3.64703184e-01,
                        2.51805210e-01,
                        1.45760092e-01,
                    ],
                    [
                        5.55109258e-02,
                        1.36689074e-01,
                        2.21544232e-01,
                        2.99428945e-01,
                        3.67396737e-01,
                        3.98663761e-01,
                        3.83931443e-01,
                        3.34766779e-01,
                        2.61016627e-01,
                        1.78536956e-01,
                        9.04920482e-02,
                    ],
                    [
                        6.85880434e-02,
                        1.21422983e-01,
                        1.67108243e-01,
                        2.07474072e-01,
                        2.44097247e-01,
                        2.58342287e-01,
                        2.40579144e-01,
                        2.06748616e-01,
                        1.64370307e-01,
                        1.12774016e-01,
                        4.49712180e-02,
                    ],
                    [
                        7.69611262e-02,
                        1.00932326e-01,
                        1.19297592e-01,
                        1.36235762e-01,
                        1.49354063e-01,
                        1.48109420e-01,
                        1.32178910e-01,
                        1.11141673e-01,
                        8.85878568e-02,
                        5.88657434e-02,
                        2.02764968e-02,
                    ],
                    [
                        7.89846603e-02,
                        7.46891122e-02,
                        7.80108117e-02,
                        8.42791573e-02,
                        8.41593083e-02,
                        7.72920329e-02,
                        6.65669433e-02,
                        5.15005136e-02,
                        3.85650681e-02,
                        2.33996085e-02,
                        5.99556928e-03,
                    ],
                    [
                        6.73415159e-02,
                        5.76106102e-02,
                        5.29308285e-02,
                        4.86020681e-02,
                        4.39746505e-02,
                        3.35681659e-02,
                        2.39621797e-02,
                        1.96549176e-02,
                        1.19706210e-02,
                        7.67311883e-03,
                        2.95152950e-03,
                    ],
                    [
                        4.85982310e-02,
                        3.88714917e-02,
                        3.37940812e-02,
                        2.88338244e-02,
                        2.43954682e-02,
                        1.20344966e-02,
                        3.41746998e-03,
                        4.86931507e-03,
                        2.40706741e-03,
                        1.48958161e-03,
                        4.52049286e-03,
                    ],
                    [
                        2.67746368e-02,
                        2.03377763e-02,
                        2.01646650e-02,
                        2.04534496e-02,
                        1.43776618e-02,
                        2.88396947e-03,
                        -2.39910469e-03,
                        -3.32927215e-03,
                        -3.58978902e-03,
                        1.68414817e-03,
                        2.70398215e-04,
                    ],
                ],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenfunctions"].data[1].values),
            np.abs(expected_eigenfunctions),
            decimal=1,
        )

        expected_eigenvectors = np.array(
            [
                [-4.78200941e-02, 8.84243344e-02],
                [3.55139598e-02, -8.28458295e-03],
                [-9.26439151e-02, 2.20595413e-02],
                [2.63439454e-02, 5.57272773e-02],
                [-6.06973701e-02, 3.85471760e-04],
                [-7.04779455e-02, -6.92457119e-03],
                [8.30326431e-02, -2.20937684e-02],
                [1.00213648e-01, -3.27557510e-02],
                [1.71265563e-02, -1.37601296e-02],
                [-7.94088529e-02, -3.60379037e-02],
                [1.16782269e-01, -3.46855418e-02],
                [-6.55588943e-02, -6.98788292e-02],
                [-2.61011051e-02, 7.92507472e-02],
                [8.85444897e-03, 8.09196467e-02],
                [9.16071993e-02, 1.72196637e-01],
                [-2.48121561e-02, 6.23296632e-02],
                [7.50394199e-02, 5.51140810e-03],
                [-1.39920501e-02, 8.20604501e-02],
                [5.46832243e-02, -3.20779429e-02],
                [1.09600156e-01, 1.59090535e-01],
                [-4.57311038e-02, -5.44569240e-02],
                [3.36720394e-02, 1.10496182e-01],
                [1.03910635e-01, -1.07572503e-01],
                [-8.28011517e-02, 8.66313959e-02],
                [-9.63300229e-02, 9.54563607e-02],
                [7.76771004e-02, -1.33789774e-01],
                [2.18310575e-02, 4.55995865e-02],
                [-1.94795032e-01, 1.46735649e-01],
                [1.95357753e-01, 1.46254382e-01],
                [-2.31528940e-02, 1.20954415e-01],
                [1.79491956e-01, 8.51142795e-02],
                [-4.86930193e-02, -9.76489707e-02],
                [-1.01731903e-01, -4.13512502e-02],
                [-4.12305974e-02, -8.58734922e-02],
                [9.19920564e-02, -1.21599148e-01],
                [-5.97742205e-02, -1.26757197e-01],
                [-4.24249144e-02, 7.66678712e-02],
                [1.34228256e-01, -6.31964712e-02],
                [-2.56087585e-02, 1.04126352e-01],
                [1.34879678e-02, -3.67233139e-02],
                [-6.71553147e-02, -1.05941378e-01],
                [1.66952426e-01, 2.83474289e-02],
                [7.13832001e-02, 3.96544292e-02],
                [-1.07502385e-01, -1.00596574e-01],
                [3.69181504e-02, -1.04008425e-01],
                [-1.83600603e-01, -3.08176563e-01],
                [-5.17835697e-02, 1.21932104e-01],
                [1.34952539e-01, 8.60521875e-02],
                [1.89475446e-01, -1.91464862e-02],
                [-2.25552572e-01, 2.24786933e-01],
                [-9.30809131e-02, -1.52364068e-01],
                [2.95260195e-02, -5.84016747e-02],
                [1.01329353e-02, -2.23201135e-02],
                [-4.49746465e-02, -4.54780575e-02],
                [-1.11605707e-01, 1.51349959e-01],
                [4.86451524e-02, 1.73844581e-01],
                [-2.81122455e-02, 1.24029112e-01],
                [2.13911922e-03, -3.90734815e-02],
                [4.07070974e-03, -2.26788790e-01],
                [9.88214085e-02, -1.39242089e-01],
                [-2.22099930e-04, 4.96448585e-02],
                [-1.27285575e-01, 6.92782148e-02],
                [-1.78104012e-01, -4.96825199e-02],
                [1.69274471e-02, 7.75591102e-02],
                [-1.39674042e-01, 6.33728299e-02],
                [1.12647099e-01, 2.73391415e-02],
                [7.76792915e-02, -1.10791657e-01],
                [-5.88295477e-02, 1.34948395e-01],
                [-3.80590489e-02, 5.18306017e-02],
                [4.61172752e-02, -3.57944125e-02],
                [-3.13690091e-02, 1.60923892e-02],
                [1.99871786e-02, -8.85612583e-02],
                [-3.62483371e-02, -1.31372042e-01],
                [6.99409159e-02, 9.63533460e-02],
                [-1.57020534e-01, -5.24126747e-02],
                [7.84753073e-02, 1.46773280e-01],
                [1.52656461e-01, -1.59363978e-01],
                [-5.14877033e-02, -4.79276916e-02],
                [7.03961190e-03, 6.19029281e-02],
                [-6.35736794e-02, -4.28973482e-02],
                [-5.14125583e-02, -5.76200371e-02],
                [4.91684418e-02, -1.75010868e-01],
                [9.97187058e-02, 2.40321636e-01],
                [-1.43871267e-01, -1.16731068e-01],
                [1.47769452e-01, -3.83020433e-02],
                [-9.17762468e-02, -1.78443390e-01],
                [8.19360336e-02, -1.39086189e-01],
                [1.32263582e-01, 4.57253075e-02],
                [-9.44721860e-02, 5.86093460e-02],
                [-5.91699563e-02, 2.55117563e-02],
                [-2.64551754e-01, 5.85622359e-02],
                [1.17814642e-02, -4.01235216e-02],
                [2.64767154e-01, -5.07210792e-02],
                [-1.82175010e-01, 3.18556866e-02],
                [2.34306263e-02, 4.92884040e-02],
                [3.09137891e-02, -1.12772502e-02],
                [-8.30617715e-02, -6.62451034e-02],
                [3.12932685e-02, -1.13720126e-03],
                [-1.35544382e-02, 8.77345161e-03],
                [1.93574799e-01, -1.97003041e-02],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(results["eigenvectors"]), np.abs(expected_eigenvectors)
        )


class TestTransformNumericalIntegrationDense(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter("ignore", category=UserWarning)

        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            self.fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_noisy_5_10_001_2D.pickle"
        with open(fname, "rb") as handle:
            self.fdata_2D = pickle.load(handle)

    def test_numerical_integration(self):
        uf = UFPCA(n_components=2, method="covariance")
        uf.fit(self.fdata)
        uf_eigen = uf.eigenfunctions

        scores_dense = _transform_numerical_integration_dense(self.fdata, uf_eigen)
        expected_scores = np.array(
            [
                [-0.31317357, 0.34123327],
                [0.18537663, -0.01515484],
                [-0.53029898, 0.06377179],
                [0.18713111, 0.14501139],
                [-0.39078759, 0.06183464],
                [-0.42033249, -0.00672803],
                [0.51805892, -0.095459],
                [0.61555215, -0.13737513],
                [0.11042458, -0.06527667],
                [-0.48453803, -0.11101933],
                [0.68936538, -0.15141824],
                [-0.40355636, -0.18096082],
                [-0.11249536, 0.25317829],
                [0.08684018, 0.24184147],
                [0.60966282, 0.53022049],
                [-0.13488295, 0.21439266],
                [0.41952949, 0.03242174],
                [-0.0440803, 0.26476079],
                [0.27822765, -0.08909635],
                [0.68133586, 0.51156472],
                [-0.31594493, -0.17182786],
                [0.1951331, 0.37710313],
                [0.58961412, -0.35603509],
                [-0.4704033, 0.27889268],
                [-0.52806047, 0.30508722],
                [0.40108732, -0.45486762],
                [0.09723659, 0.20604489],
                [-1.04665824, 0.45273547],
                [1.21496513, 0.41349597],
                [-0.09465194, 0.3875499],
                [1.1076712, 0.23768259],
                [-0.36170539, -0.25937892],
                [-0.62411404, -0.05541356],
                [-0.27661549, -0.26586595],
                [0.47348069, -0.37183868],
                [-0.39407543, -0.40756171],
                [-0.21348564, 0.23026539],
                [0.83704526, -0.26205049],
                [-0.13792435, 0.33320543],
                [0.06336966, -0.12440107],
                [-0.48962484, -0.30574072],
                [1.00723188, 0.06753453],
                [0.43400526, 0.14058968],
                [-0.70568422, -0.2642966],
                [0.19126128, -0.32689201],
                [-1.22439962, -0.92426033],
                [-0.29647293, 0.42079208],
                [0.81206983, 0.30934312],
                [1.19208056, -0.14340815],
                [-1.32041376, 0.80068326],
                [-0.63161395, -0.41334238],
                [0.12370552, -0.17465805],
                [0.06033531, -0.05828676],
                [-0.28320735, -0.13354738],
                [-0.57069763, 0.45171449],
                [0.36566956, 0.51792565],
                [-0.16840193, 0.46152696],
                [-0.00934687, -0.11110472],
                [-0.08171614, -0.6498137],
                [0.55449501, -0.45546976],
                [0.01100761, 0.19866509],
                [-0.70691293, 0.24995057],
                [-1.07052589, -0.11424129],
                [0.09914146, 0.24715948],
                [-0.77441913, 0.21800567],
                [0.66618704, 0.11475881],
                [0.43754281, -0.37870372],
                [-0.29537251, 0.43941961],
                [-0.17350261, 0.14990972],
                [0.28802414, -0.09409522],
                [-0.14210718, 0.00664535],
                [0.08608836, -0.26665452],
                [-0.27552342, -0.3746887],
                [0.48569267, 0.26842298],
                [-0.94879237, -0.15074974],
                [0.53415132, 0.40216514],
                [0.82485982, -0.53518314],
                [-0.36853608, -0.10997947],
                [0.07353652, 0.18634613],
                [-0.41529616, -0.11624739],
                [-0.31959725, -0.15476756],
                [0.18742096, -0.49690336],
                [0.6685045, 0.76963594],
                [-0.86851887, -0.35339343],
                [0.84595534, -0.10757187],
                [-0.61673185, -0.50909136],
                [0.46431021, -0.45151516],
                [0.82214164, 0.11905946],
                [-0.55546319, 0.20276934],
                [-0.33592004, 0.06212645],
                [-1.57658274, 0.25113199],
                [0.06469013, -0.15887607],
                [1.54739683, -0.18363765],
                [-1.12219294, 0.18816657],
                [0.18095252, 0.13840264],
                [0.26079229, -0.11688948],
                [-0.52010203, -0.20831797],
                [0.19793106, 0.01248396],
                [-0.08472723, 0.0273987],
                [1.11118881, -0.03123675],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores_dense), np.abs(expected_scores), decimal=3
        )

    def test_numerical_integration_2d(self):
        uf = UFPCA(n_components=2, method="inner-product")
        uf.fit(self.fdata_2D)

        scores = _transform_numerical_integration_dense(
            self.fdata_2D, uf.eigenfunctions
        )
        expected_scores = np.array(
            [
                [-0.00634723, 0.23336376],
                [-0.12728823, 0.09719247],
                [0.24546366, -0.01741977],
                [0.03937365, 0.04146677],
                [0.01818149, 0.03068592],
                [0.12741898, -0.0447773],
                [-0.10034965, -0.07471561],
                [-0.11772938, -0.0721488],
                [0.01062296, 0.00258309],
                [0.1359434, 0.014436],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores), np.abs(expected_scores), decimal=3
        )


class TestTransformNumericalIntegrationIrregular(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter("ignore", category=UserWarning)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            self.fdata_sparse = pickle.load(handle)

    def test_numerical_integration(self):
        uf = UFPCA(n_components=0.95, method="covariance")
        uf.fit(self.fdata_sparse)
        uf_eigen = uf.eigenfunctions

        scores_sparse = _transform_numerical_integration_irregular(
            self.fdata_sparse, uf_eigen
        )
        expected_scores = np.array(
            [
                [-3.31061937e-01, 3.49564143e-01, -1.66468334e-01],
                [1.62851113e-01, -7.80329637e-03, -1.13824490e-02],
                [-5.18970186e-01, 4.22015302e-02, 1.91967701e-01],
                [1.56800742e-01, 1.71380407e-01, 1.68406856e-01],
                [-3.75473843e-01, 6.24488092e-02, -2.18256331e-01],
                [-3.98432562e-01, -3.22585953e-02, 4.49838182e-02],
                [4.98151203e-01, -9.12307597e-02, 2.07713268e-02],
                [6.06141567e-01, -1.20171006e-01, 5.72558210e-02],
                [1.22838045e-01, -5.89213427e-02, 1.55717984e-01],
                [-4.74039513e-01, -8.71300230e-02, 1.20788202e-01],
                [6.37695767e-01, -1.68813143e-01, 1.85960615e-01],
                [-4.29904782e-01, -1.54325347e-01, -2.28008167e-01],
                [-1.44874943e-01, 2.64232593e-01, -4.29561062e-02],
                [6.32637107e-02, 2.68095640e-01, 8.15627363e-02],
                [5.72188940e-01, 4.64156006e-01, -3.91410117e-02],
                [-1.44256462e-01, 1.98670588e-01, -1.49686925e-02],
                [4.34018193e-01, 5.12278116e-02, -7.96641514e-02],
                [-4.58926408e-02, 2.13980872e-01, 7.54113485e-03],
                [2.66683272e-01, -3.59946728e-02, 4.53136870e-03],
                [6.98284838e-01, 4.71760947e-01, -8.38279900e-02],
                [-2.84972080e-01, -1.52907648e-01, 1.98019027e-01],
                [1.88531828e-01, 3.87827528e-01, -6.00795124e-02],
                [5.96978007e-01, -3.50736902e-01, -1.64809134e-03],
                [-4.55471576e-01, 2.82476070e-01, 9.42052539e-02],
                [-4.98993113e-01, 2.90353857e-01, 8.26365069e-02],
                [4.12052634e-01, -4.56367170e-01, 2.36182602e-01],
                [9.70272401e-02, 2.23194791e-01, -2.73412059e-01],
                [-1.02916683e00, 4.21745706e-01, 1.28634564e-01],
                [1.16484154e00, 3.73733457e-01, 1.05825541e-01],
                [-7.35581967e-02, 4.02243554e-01, 1.01369447e-02],
                [1.14881175e00, 2.33950113e-01, 5.90038014e-03],
                [-3.65226369e-01, -2.69434015e-01, -9.20865368e-02],
                [-6.33871389e-01, -6.22418725e-02, -3.49133655e-01],
                [-3.31273777e-01, -2.56955210e-01, 3.06597271e-02],
                [4.72135492e-01, -3.68900027e-01, -3.73613546e-02],
                [-4.00541703e-01, -4.13588462e-01, 1.63652060e-01],
                [-1.64005200e-01, 1.73999282e-01, 1.72278859e-01],
                [8.37325289e-01, -2.73732958e-01, 1.24299281e-01],
                [-1.64110334e-01, 3.04141104e-01, 1.38784041e-01],
                [6.30966707e-02, -1.18018598e-01, 8.10964769e-02],
                [-4.77201615e-01, -2.58597719e-01, 1.34668273e-01],
                [9.97461020e-01, 6.85555441e-02, -4.54313518e-02],
                [3.96260463e-01, 1.82063609e-01, -1.66194786e-01],
                [-7.05938115e-01, -2.68194162e-01, -8.29198525e-02],
                [1.47394545e-01, -2.94795059e-01, -6.82357241e-02],
                [-1.20272351e00, -8.78667929e-01, 3.38012506e-05],
                [-2.88871291e-01, 3.95894207e-01, -8.23746314e-02],
                [8.46896168e-01, 3.01622899e-01, -3.26739978e-01],
                [1.20286076e00, -1.23847085e-01, 8.20233573e-02],
                [-1.33964774e00, 8.05376634e-01, -1.60850187e-01],
                [-6.23582649e-01, -3.82264849e-01, -2.11324190e-01],
                [1.35279063e-01, -1.69212241e-01, 5.84874914e-02],
                [8.76404474e-02, -4.83865376e-02, -8.59561724e-02],
                [-2.21652686e-01, -5.39226277e-02, -9.74655985e-03],
                [-5.90299884e-01, 4.44990223e-01, 2.03619002e-01],
                [3.77763559e-01, 4.87780670e-01, 1.08693207e-01],
                [-1.57113839e-01, 4.31198754e-01, -2.64276489e-01],
                [2.63740508e-03, -1.20526610e-01, -1.08509367e-02],
                [-5.08000025e-02, -6.68995762e-01, -3.12218799e-01],
                [5.24573700e-01, -3.75733486e-01, 1.98076403e-02],
                [-9.95346901e-03, 2.09565515e-01, -2.30502817e-01],
                [-7.11466495e-01, 2.16945152e-01, -1.11808578e-01],
                [-1.06928860e00, -1.08569287e-01, -3.78209005e-02],
                [8.54039031e-02, 2.09423450e-01, 1.07535768e-01],
                [-7.54651374e-01, 1.81879001e-01, -2.43187709e-02],
                [6.82362433e-01, 9.69950780e-02, -2.40830082e-01],
                [4.30307801e-01, -3.77921570e-01, 1.10915670e-01],
                [-2.85768838e-01, 4.32539581e-01, -6.10708060e-02],
                [-2.06991017e-01, 1.17424441e-01, 2.91158423e-02],
                [2.64352287e-01, -1.34677779e-01, -2.53939212e-01],
                [-1.50249232e-01, 1.07173053e-02, 2.28232267e-01],
                [4.97105667e-02, -2.58500526e-01, -7.00242278e-02],
                [-2.75667932e-01, -3.73316933e-01, -1.32854745e-01],
                [4.59126516e-01, 2.50757070e-01, 6.87413552e-02],
                [-9.27765547e-01, -1.68575699e-01, 1.36669853e-01],
                [5.47052906e-01, 4.26168559e-01, 3.32662686e-01],
                [8.25676347e-01, -5.54757928e-01, 1.81125634e-01],
                [-3.75257264e-01, -9.16369177e-02, -3.59722571e-02],
                [1.11883651e-01, 1.90886807e-01, 3.54825710e-02],
                [-3.95775490e-01, -1.12806953e-01, 7.73243007e-02],
                [-3.36016881e-01, -1.55860951e-01, -7.70383165e-02],
                [1.84074889e-01, -4.75142309e-01, -2.65398731e-01],
                [6.66780387e-01, 7.94844708e-01, -1.90526020e-01],
                [-8.79227526e-01, -3.14834468e-01, 2.45908974e-02],
                [8.55495828e-01, -9.59284488e-02, -1.33582269e-01],
                [-6.31681271e-01, -5.62585071e-01, -1.71323099e-01],
                [4.20958236e-01, -4.35931281e-01, -4.84462552e-02],
                [7.93494627e-01, 7.00260647e-02, -8.70474254e-03],
                [-5.77428631e-01, 1.83879750e-01, 7.94372314e-02],
                [-3.46791028e-01, 3.79709698e-02, 1.82388843e-01],
                [-1.53869129e00, 2.71830352e-01, -9.09169931e-03],
                [7.38734855e-02, -1.50677047e-01, 2.27737201e-01],
                [1.49223166e00, -2.05712361e-01, -9.78601508e-02],
                [-1.10264825e00, 1.84309583e-01, -1.92733620e-01],
                [1.57571723e-01, 1.61480734e-01, 1.80688108e-02],
                [2.57772166e-01, -1.21150423e-01, 2.73823045e-01],
                [-5.12057145e-01, -2.33842069e-01, 1.95531300e-01],
                [1.79191706e-01, 5.30963789e-03, -1.76145877e-01],
                [-7.40146964e-02, -1.29918202e-02, 1.22018495e-01],
                [1.09629041e00, -3.64453140e-02, -3.15662421e-01],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores_sparse), np.abs(expected_scores), decimal=3
        )


class TestTransformNumericalIntegrationMultivariate(unittest.TestCase):
    def setUp(self):
        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            self.fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            self.fdata_sparse = pickle.load(handle)

        fdata_uni = self.fdata
        fdata_sparse = self.fdata_sparse
        self.fdata = MultivariateFunctionalData([fdata_uni, fdata_sparse])

    def test_transform_numerical_integration_multivariate(self):
        mfpca = MFPCA(method="inner-product", n_components=0.7, normalize=True)
        mfpca.fit(data=self.fdata)
        scores = _transform_numerical_integration_multivariate(
            self.fdata, mfpca.eigenfunctions
        )

        expected_scores = np.array(
            [
                [-4.56444761e-01],
                [2.43770420e-01],
                [-7.38785298e-01],
                [2.39287319e-01],
                [-5.38374876e-01],
                [-5.74962356e-01],
                [7.14526542e-01],
                [8.60169365e-01],
                [1.64901904e-01],
                [-6.74334573e-01],
                [9.31593723e-01],
                [-5.87345948e-01],
                [-1.84350753e-01],
                [1.03095324e-01],
                [8.28122915e-01],
                [-1.98134176e-01],
                [6.02091003e-01],
                [-6.41690578e-02],
                [3.82975721e-01],
                [9.71023173e-01],
                [-4.20868099e-01],
                [2.68233758e-01],
                [8.37509070e-01],
                [-6.53105606e-01],
                [-7.22478619e-01],
                [5.75350353e-01],
                [1.36110854e-01],
                [-1.46226690e00],
                [1.67101799e00],
                [-1.18606114e-01],
                [1.59057538e00],
                [-5.11352226e-01],
                [-8.85728948e-01],
                [-4.30343492e-01],
                [6.67024550e-01],
                [-5.58389506e-01],
                [-2.64105981e-01],
                [1.18005958e00],
                [-2.15930623e-01],
                [8.94274925e-02],
                [-6.79627255e-01],
                [1.41099336e00],
                [5.81806490e-01],
                [-9.93093519e-01],
                [2.37010635e-01],
                [-1.70466850e00],
                [-4.13375021e-01],
                [1.16949072e00],
                [1.68773674e00],
                [-1.87696606e00],
                [-8.81592347e-01],
                [1.83286103e-01],
                [1.06261972e-01],
                [-3.51663961e-01],
                [-8.20856786e-01],
                [5.21848616e-01],
                [-2.30072429e-01],
                [-3.49022579e-03],
                [-8.84081359e-02],
                [7.61193383e-01],
                [-1.25933657e-03],
                [-9.99688113e-01],
                [-1.50628132e00],
                [1.28084581e-01],
                [-1.07613260e00],
                [9.50364149e-01],
                [6.11816219e-01],
                [-4.10575530e-01],
                [-2.70318662e-01],
                [3.88385516e-01],
                [-2.06915263e-01],
                [9.41819873e-02],
                [-3.86388187e-01],
                [6.62393600e-01],
                [-1.31980178e00],
                [7.60030303e-01],
                [1.16413750e00],
                [-5.23758776e-01],
                [1.32474802e-01],
                [-5.69936992e-01],
                [-4.62063474e-01],
                [2.63597833e-01],
                [9.37416612e-01],
                [-1.23002803e00],
                [1.20014848e00],
                [-8.77658206e-01],
                [6.23176575e-01],
                [1.13579199e00],
                [-7.99957501e-01],
                [-4.81752735e-01],
                [-2.19214811e00],
                [9.84975176e-02],
                [2.13799781e00],
                [-1.56680472e00],
                [2.36388748e-01],
                [3.65328368e-01],
                [-7.25727542e-01],
                [2.64551569e-01],
                [-1.11263242e-01],
                [1.55403749e00],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores), np.abs(expected_scores), decimal=1
        )


class TestTransformPACE(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter("ignore", category=UserWarning)

        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            self.fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            self.fdata_sparse = pickle.load(handle)

        self.fdata_multi = MultivariateFunctionalData([self.fdata, self.fdata_sparse])

    def test_pace_dense(self):
        uf_dense = UFPCA(n_components=2, method="covariance")
        uf_dense.fit(self.fdata)

        scores_dense = _transform_pace_dense(
            self.fdata,
            uf_dense.eigenfunctions,
            uf_dense.eigenvalues,
            uf_dense.covariance,
            uf_dense._noise_variance,
        )
        expected_scores = np.array(
            [
                [-0.31189085, 0.33682065],
                [0.18613475, -0.01407123],
                [-0.53173976, 0.06466848],
                [0.18265965, 0.14707671],
                [-0.38665821, 0.06257261],
                [-0.42114241, -0.00625075],
                [0.51806133, -0.09476735],
                [0.61288107, -0.13300502],
                [0.11000801, -0.06100332],
                [-0.48602035, -0.11048123],
                [0.68537565, -0.15111728],
                [-0.39780774, -0.18124536],
                [-0.11269477, 0.25290729],
                [0.08810566, 0.23520106],
                [0.60668251, 0.52727097],
                [-0.13457348, 0.21151236],
                [0.42010242, 0.03147984],
                [-0.04452754, 0.26288621],
                [0.27570407, -0.09151072],
                [0.68510468, 0.50862935],
                [-0.31676847, -0.17182367],
                [0.19510619, 0.37726484],
                [0.58934498, -0.34997788],
                [-0.46978267, 0.27811995],
                [-0.5276309, 0.30470055],
                [0.39744222, -0.45251665],
                [0.10189727, 0.20321637],
                [-1.04725763, 0.45185427],
                [1.21010955, 0.41334812],
                [-0.09512192, 0.38422705],
                [1.10420978, 0.23468101],
                [-0.3613064, -0.26042555],
                [-0.62044487, -0.05839291],
                [-0.27718713, -0.26020343],
                [0.47416116, -0.37168351],
                [-0.39510173, -0.40646503],
                [-0.21678613, 0.22508312],
                [0.83388029, -0.26189071],
                [-0.13837732, 0.32607229],
                [0.06240846, -0.1203866],
                [-0.49260048, -0.30395117],
                [1.00678482, 0.06773029],
                [0.43665111, 0.13758266],
                [-0.70201728, -0.26329707],
                [0.19383056, -0.3270985],
                [-1.22371397, -0.92028277],
                [-0.29905819, 0.42132742],
                [0.81327202, 0.30828436],
                [1.18716926, -0.13892028],
                [-1.31525452, 0.79405289],
                [-0.62849057, -0.41014594],
                [0.12367234, -0.17219258],
                [0.0600231, -0.05788688],
                [-0.28229251, -0.12905364],
                [-0.5727619, 0.45017469],
                [0.36080964, 0.51642306],
                [-0.16218265, 0.45791697],
                [-0.00968563, -0.10914031],
                [-0.07737931, -0.64818953],
                [0.55366961, -0.45363575],
                [0.01167916, 0.2001758],
                [-0.70596534, 0.24508594],
                [-1.06995263, -0.11034666],
                [0.0973316, 0.24471263],
                [-0.77591799, 0.21687523],
                [0.66735271, 0.11366862],
                [0.43530415, -0.37935577],
                [-0.29532873, 0.43781163],
                [-0.17492706, 0.14893061],
                [0.28976006, -0.0920135],
                [-0.14382379, 0.01164354],
                [0.08621063, -0.2679801],
                [-0.27296396, -0.37169627],
                [0.48314674, 0.26789456],
                [-0.95218735, -0.14885675],
                [0.53037703, 0.39708933],
                [0.82322075, -0.53419047],
                [-0.36638401, -0.10952159],
                [0.07448216, 0.18482796],
                [-0.41717999, -0.11312131],
                [-0.31708323, -0.15000322],
                [0.19016294, -0.49398695],
                [0.67076718, 0.76421102],
                [-0.86916711, -0.35166396],
                [0.84715348, -0.10885447],
                [-0.61269639, -0.50823013],
                [0.46400447, -0.44822416],
                [0.82225034, 0.11842926],
                [-0.55629323, 0.20095475],
                [-0.33759678, 0.06522064],
                [-1.57398352, 0.25219289],
                [0.06020891, -0.15855519],
                [1.54816609, -0.18186127],
                [-1.11853372, 0.18816937],
                [0.17968119, 0.14053945],
                [0.25558258, -0.11380846],
                [-0.52193233, -0.20999489],
                [0.20014305, 0.01553492],
                [-0.08822736, 0.02876938],
                [1.11446953, -0.02840211],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores_dense), np.abs(expected_scores), decimal=3
        )

    def test_pace_irregular(self):
        uf_sparse = UFPCA(n_components=2, method="covariance")
        uf_sparse.fit(self.fdata_sparse)

        scores_sparse = _transform_pace_irregular(
            self.fdata_sparse,
            uf_sparse.eigenfunctions,
            uf_sparse.eigenvalues,
            uf_sparse.covariance,
            uf_sparse._noise_variance,
        )
        expected_scores = np.array(
            [
                [-3.22511973e-01, 3.49534104e-01],
                [1.63090367e-01, -6.61165410e-03],
                [-5.27581862e-01, 2.66016559e-02],
                [1.51614909e-01, 1.87625050e-01],
                [-3.44329039e-01, 6.09845443e-02],
                [-3.99516235e-01, -3.16471692e-02],
                [4.96655571e-01, -9.22275147e-02],
                [6.05514926e-01, -1.15310514e-01],
                [1.36058700e-01, -4.28126543e-02],
                [-4.73760447e-01, -8.53085675e-02],
                [6.41084357e-01, -1.70160319e-01],
                [-4.14450128e-01, -1.54302825e-01],
                [-1.44464381e-01, 2.65418939e-01],
                [6.78937102e-02, 2.72310177e-01],
                [5.75235872e-01, 4.77390787e-01],
                [-1.46864052e-01, 2.06022434e-01],
                [4.38404314e-01, 5.65466143e-02],
                [-4.56337332e-02, 2.17776736e-01],
                [2.66847206e-01, -3.84497130e-02],
                [6.95685828e-01, 4.68580533e-01],
                [-2.93613825e-01, -1.63721134e-01],
                [1.88298445e-01, 3.90407385e-01],
                [5.95929887e-01, -3.50595065e-01],
                [-4.56093506e-01, 3.02702338e-01],
                [-5.03097701e-01, 3.00125452e-01],
                [4.34173972e-01, -4.77400861e-01],
                [1.04028898e-01, 2.44528771e-01],
                [-1.03016136e00, 4.22739299e-01],
                [1.15758113e00, 3.73120377e-01],
                [-7.35487161e-02, 4.03474816e-01],
                [1.14623254e00, 2.35317303e-01],
                [-3.65677496e-01, -2.72335115e-01],
                [-6.23386794e-01, -6.86886766e-02],
                [-3.31736445e-01, -2.57825433e-01],
                [4.72212182e-01, -3.70887801e-01],
                [-3.97432854e-01, -4.15396903e-01],
                [-1.57201954e-01, 1.78058195e-01],
                [8.36773364e-01, -2.69905341e-01],
                [-1.75903025e-01, 2.91762407e-01],
                [6.29375668e-02, -1.21336184e-01],
                [-4.89489131e-01, -2.63825907e-01],
                [9.93769522e-01, 7.59825155e-02],
                [4.13667408e-01, 1.88889045e-01],
                [-7.06457008e-01, -2.77012896e-01],
                [1.51963736e-01, -2.96403366e-01],
                [-1.21184917e00, -9.04741940e-01],
                [-2.99561324e-01, 4.10387803e-01],
                [8.46922059e-01, 3.01586835e-01],
                [1.19486448e00, -1.17174997e-01],
                [-1.31312485e00, 8.08618982e-01],
                [-6.21982555e-01, -3.90676995e-01],
                [1.32544020e-01, -1.74025391e-01],
                [9.08603172e-02, -4.67082732e-02],
                [-2.27881913e-01, -6.56537673e-02],
                [-6.06823012e-01, 4.50742283e-01],
                [3.72796791e-01, 5.02628529e-01],
                [-1.56853869e-01, 4.69498991e-01],
                [2.70611662e-03, -1.19887533e-01],
                [-6.29797862e-02, -6.73211081e-01],
                [5.57983634e-01, -4.31951097e-01],
                [-1.99809083e-02, 2.04566884e-01],
                [-7.07224879e-01, 2.18208233e-01],
                [-1.07077109e00, -1.08910676e-01],
                [8.15064016e-02, 2.05394766e-01],
                [-7.53393604e-01, 1.79229404e-01],
                [6.84720934e-01, 9.45399669e-02],
                [4.28829758e-01, -3.85940332e-01],
                [-2.89672363e-01, 4.51646383e-01],
                [-2.05819770e-01, 1.27789486e-01],
                [2.57670530e-01, -1.36020437e-01],
                [-1.73071413e-01, 2.03312413e-02],
                [4.15943612e-02, -2.71826808e-01],
                [-2.75286084e-01, -3.64607049e-01],
                [4.56981855e-01, 2.51065588e-01],
                [-9.20257233e-01, -1.59863793e-01],
                [5.47695653e-01, 4.29394070e-01],
                [8.15482530e-01, -5.78497895e-01],
                [-3.71907603e-01, -9.21121740e-02],
                [1.11680240e-01, 1.91105728e-01],
                [-4.02529139e-01, -1.00514700e-01],
                [-3.33099368e-01, -1.54661527e-01],
                [1.82804761e-01, -4.77415157e-01],
                [6.69766660e-01, 7.88756664e-01],
                [-8.78383266e-01, -3.15006418e-01],
                [8.65036226e-01, -1.16769451e-01],
                [-6.18732785e-01, -5.64947852e-01],
                [4.36245349e-01, -4.40272846e-01],
                [7.92106518e-01, 7.13320114e-02],
                [-5.80854341e-01, 1.86196654e-01],
                [-3.50986345e-01, 6.41429583e-02],
                [-1.53288543e00, 2.70944415e-01],
                [7.69924253e-02, -1.44889576e-01],
                [1.48889852e00, -2.05959579e-01],
                [-1.10731694e00, 2.02512320e-01],
                [1.56666478e-01, 1.61902275e-01],
                [2.52216772e-01, -1.10692430e-01],
                [-5.03259841e-01, -2.39032099e-01],
                [1.73315123e-01, 1.33298354e-03],
                [-7.95533392e-02, -2.09616746e-02],
                [1.10027464e00, -3.78074422e-02],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores_sparse), np.abs(expected_scores), decimal=3
        )

    def test_pace_multivariate(self):
        mfpca = MFPCA(n_components=[2, 2], method="covariance")
        mfpca.fit(self.fdata_multi)

        scores_multi = _transform_pace_multivariate(
            mfpca._scores_eigenvectors, mfpca._scores_univariate
        )
        expected_scores = np.array(
            [
                [6.55401717e-01, -6.83253708e-01, 5.04575984e-03, -2.43727969e-02],
                [-3.57920337e-01, 4.33466576e-02, -3.12942313e-03, -2.12483328e-02],
                [1.06469335e00, -8.33327598e-02, -2.57657222e-02, 1.17597648e-02],
                [-3.52208876e-01, -3.04361032e-01, 1.78290006e-02, -3.45443763e-02],
                [7.75713066e-01, -1.04383091e-01, -2.04706940e-03, 1.19840704e-02],
                [8.28121873e-01, 6.39430156e-02, -2.79771962e-02, 2.48503193e-02],
                [-1.03981299e00, 2.09449605e-01, -6.06835462e-03, -1.42129938e-02],
                [-1.25047797e00, 2.80260510e-01, 8.78570808e-03, -5.49275175e-03],
                [-2.44232939e-01, 1.46357825e-01, 2.80747163e-03, 1.35415245e-02],
                [9.71927204e-01, 2.22661674e-01, 1.60296618e-02, 2.12814873e-03],
                [-1.35426513e00, 3.46980085e-01, -3.54832297e-02, -3.88780728e-02],
                [8.46823813e-01, 3.61380031e-01, 1.00064537e-02, -3.35228325e-02],
                [2.61658764e-01, -5.07063903e-01, 3.18276127e-03, -3.67075203e-02],
                [-1.54773609e-01, -5.01439866e-01, 2.10203804e-02, -2.94597965e-02],
                [-1.20505817e00, -9.89796884e-01, -6.57165600e-02, -1.96738749e-02],
                [2.81702846e-01, -3.98587611e-01, -1.92772468e-02, -7.78759892e-03],
                [-8.76528421e-01, -6.72874566e-02, 1.88351393e-02, 1.48234675e-02],
                [8.77583133e-02, -4.63251781e-01, -5.08559945e-02, 8.48644757e-03],
                [-5.59665406e-01, 1.43319989e-01, 4.39524564e-02, -1.93270292e-02],
                [-1.41186705e00, -9.80928752e-01, -2.73454528e-02, 2.95027032e-02],
                [6.04869512e-01, 3.51770018e-01, 1.48468872e-02, 2.58540380e-02],
                [-3.94134264e-01, -7.60652746e-01, 1.28384462e-02, -9.01449178e-03],
                [-1.21699467e00, 7.39504185e-01, -4.45303288e-03, 1.53186043e-02],
                [9.39231183e-01, -5.50883358e-01, 6.11178356e-03, 8.49355859e-03],
                [1.04128150e00, -5.83219934e-01, -9.38308415e-03, 2.60731910e-02],
                [-8.36608132e-01, 9.49051139e-01, -1.33497823e-02, 1.92564424e-02],
                [-2.02094789e-01, -4.18473958e-01, 1.64106321e-02, -3.75330100e-03],
                [2.11258872e00, -8.64628273e-01, -2.71779838e-02, 1.22913469e-02],
                [-2.42633766e00, -7.82564552e-01, -4.24294404e-02, -3.15510867e-02],
                [1.66330381e-01, -7.85416124e-01, 2.20730074e-02, 1.48612679e-02],
                [-2.30934649e00, -4.63600449e-01, 9.90226647e-03, 5.14047865e-02],
                [7.36152211e-01, 5.62616266e-01, -2.42045646e-02, -1.65143734e-03],
                [1.27913512e00, 1.43898305e-01, -1.88582705e-02, -1.25840402e-02],
                [6.19409307e-01, 5.54767284e-01, -1.65392065e-02, -5.60472597e-02],
                [-9.70457628e-01, 7.74769225e-01, -9.64364441e-03, 6.21234019e-03],
                [8.05100189e-01, 8.60359752e-01, -2.41777663e-02, -4.86862778e-03],
                [3.76605356e-01, -3.86111464e-01, -4.65909472e-02, 5.92045732e-02],
                [-1.71362025e00, 5.65689644e-01, -1.98821448e-02, 1.37481830e-02],
                [3.06813976e-01, -6.25943814e-01, -3.39456791e-02, -2.22243699e-02],
                [-1.34121146e-01, 2.67633424e-01, -2.08004201e-03, 8.02604621e-04],
                [9.79184796e-01, 5.93946554e-01, 3.56558738e-02, 4.27781020e-04],
                [-2.04846606e00, -1.21253079e-01, -1.15980818e-03, -3.01828484e-05],
                [-8.47586417e-01, -3.12860071e-01, 3.22673532e-02, -4.30256690e-02],
                [1.43403889e00, 5.66540352e-01, -1.83864427e-02, -2.88546202e-03],
                [-3.47228355e-01, 6.52002652e-01, 9.77925461e-03, -4.57510772e-02],
                [2.46573106e00, 1.85994263e00, 1.89399394e-02, 7.75386607e-03],
                [5.93193062e-01, -8.09005953e-01, -2.06191243e-02, 8.14301475e-03],
                [-1.69904664e00, -6.04340600e-01, 4.83832572e-03, 4.27230979e-02],
                [-2.44908527e00, 2.87897238e-01, 1.80680782e-02, 1.95171814e-02],
                [2.71319417e00, -1.61275653e00, 7.03874151e-03, -3.75865195e-02],
                [1.27353507e00, 8.32185213e-01, 1.49941223e-02, -9.05647637e-04],
                [-2.70780068e-01, 3.70451008e-01, -7.29139043e-04, 1.38584191e-02],
                [-1.58326346e-01, 1.28800140e-01, 9.18811299e-03, 2.69309705e-02],
                [5.03545422e-01, 2.04571546e-01, 8.55500258e-02, 4.28750467e-02],
                [1.18287342e00, -8.90878426e-01, -9.21297948e-03, -2.57110998e-02],
                [-7.62294838e-01, -1.00366495e00, -1.98120962e-02, 1.92891324e-02],
                [3.27804276e-01, -8.86347714e-01, -2.39196574e-02, 1.41205664e-02],
                [6.07835598e-04, 2.58173787e-01, -1.51666065e-02, 1.58309714e-02],
                [1.25304356e-01, 1.36807889e00, -3.32450362e-02, 4.02647375e-02],
                [-1.10362314e00, 8.59723843e-01, 5.98716694e-02, -3.88900666e-02],
                [-3.17528537e-03, -3.96159542e-01, 4.90891652e-03, -2.37375304e-02],
                [1.44325979e00, -4.49855945e-01, -3.73367280e-02, -4.49705073e-03],
                [2.17746718e00, 2.51629062e-01, -7.10137061e-03, -8.22911112e-03],
                [-1.90971974e-01, -4.41705667e-01, -4.07603884e-02, -4.98957670e-03],
                [1.55360911e00, -3.81569668e-01, -3.54911933e-02, 2.01414704e-02],
                [-1.38142282e00, -1.95743870e-01, -1.45179424e-02, 2.65366799e-02],
                [-8.90634814e-01, 7.91304615e-01, -1.34557753e-02, 5.62055645e-04],
                [5.88839877e-01, -8.66902128e-01, -1.67156203e-03, 5.90033887e-03],
                [3.86859849e-01, -2.48114940e-01, -4.33495841e-02, -2.76765497e-02],
                [-5.66472907e-01, 2.56942301e-01, -5.28126880e-02, -9.90391341e-03],
                [2.94404110e-01, 3.38283261e-03, -3.91625548e-03, -9.58399694e-03],
                [-1.41514099e-01, 5.54462493e-01, -1.01804100e-02, -3.39660392e-02],
                [5.56215988e-01, 7.84916533e-01, -1.42353780e-02, 7.73889621e-04],
                [-9.65175195e-01, -5.08548485e-01, -2.13860499e-02, -1.88833959e-02],
                [1.90694062e00, 3.51574327e-01, -2.65044690e-02, 1.82482580e-02],
                [-1.10729569e00, -8.27664424e-01, 3.25902792e-02, 1.03627057e-02],
                [-1.69034049e00, 1.13162092e00, -3.39471198e-02, 1.80212337e-02],
                [7.54247800e-01, 2.26532276e-01, 6.92231766e-03, -1.24979991e-02],
                [-1.96689352e-01, -3.64398828e-01, 1.19393188e-02, 3.74400740e-02],
                [8.20707751e-01, 2.55411897e-01, -2.08358128e-03, 1.62908527e-02],
                [6.64969299e-01, 3.39213918e-01, -1.55738667e-02, -1.69264158e-02],
                [-3.85036866e-01, 1.01011474e00, 4.70174696e-03, -1.81126202e-03],
                [-1.36385104e00, -1.57905835e00, 3.94519642e-02, -5.97326069e-03],
                [1.77789023e00, 7.02521762e-01, 1.85926639e-02, -2.39369614e-02],
                [-1.74134074e00, 2.24515152e-01, 9.34834089e-03, 1.64031337e-02],
                [1.26812144e00, 1.12090023e00, -7.71448524e-02, -3.63770082e-03],
                [-9.05184732e-01, 9.23285406e-01, -8.15395002e-03, -3.81512118e-02],
                [-1.64986433e00, -1.70388678e-01, -5.52652233e-02, -9.52500173e-03],
                [1.15351420e00, -3.69657547e-01, -2.75525246e-02, -2.32804536e-02],
                [6.92939396e-01, -7.79520521e-02, -3.24117414e-02, -8.09446272e-03],
                [3.17045999e00, -5.08653692e-01, 2.24061427e-02, 1.73588590e-02],
                [-1.47437122e-01, 3.35929970e-01, 1.09528935e-03, 1.00769966e-02],
                [-3.10095597e00, 4.14890863e-01, -3.79993808e-02, -3.30150345e-02],
                [2.26370419e00, -3.54843873e-01, -5.67790642e-03, 9.24754866e-03],
                [-3.47359768e-01, -2.87247229e-01, 1.59260734e-02, -2.68812494e-02],
                [-5.33688642e-01, 2.63168607e-01, -1.21892325e-02, 2.11638011e-03],
                [1.04657802e00, 4.76059863e-01, -3.66295479e-02, 1.15268541e-02],
                [-3.87682627e-01, 2.93861643e-03, -1.61499958e-02, -1.42588328e-02],
                [1.56195743e-01, 1.00893792e-02, -4.36828856e-02, 1.98832803e-02],
                [-2.25521477e00, 8.67666269e-02, -1.03695209e-02, -1.99855320e-03],
            ]
        )

        np.testing.assert_array_almost_equal(
            np.abs(scores_multi), np.abs(expected_scores), decimal=2
        )


class TestTransformInnPro(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter("ignore", category=UserWarning)

        fname = THIS_DIR.parent / "data/data_noisy_5_100_005.pickle"
        with open(fname, "rb") as handle:
            self.fdata = pickle.load(handle)

        fname = THIS_DIR.parent / "data/data_sparse_5_100_08.pickle"
        with open(fname, "rb") as handle:
            self.fdata_sparse = pickle.load(handle)

    def test_innpro_dense(self):
        uf_dense = UFPCA(n_components=2, method="inner-product")
        uf_dense.fit(self.fdata)

        scores_dense = scores_dense = _transform_innpro(
            self.fdata, uf_dense._eigenvectors, uf_dense.eigenvalues
        )
        expected_scores = np.array(
            [
                [-3.10981164e-01, 3.36158758e-01],
                [1.88651745e-01, -2.39363923e-02],
                [-5.27705003e-01, 5.58343245e-02],
                [1.87845317e-01, 1.37567165e-01],
                [-3.87534800e-01, 5.35129991e-02],
                [-4.17466927e-01, -1.70099261e-02],
                [5.20347568e-01, -1.03931909e-01],
                [6.19106204e-01, -1.45193529e-01],
                [1.11308113e-01, -7.40749354e-02],
                [-4.80461390e-01, -1.20291482e-01],
                [6.92881138e-01, -1.61457101e-01],
                [-3.99826990e-01, -1.88812328e-01],
                [-1.11298569e-01, 2.47723059e-01],
                [8.91235919e-02, 2.35659915e-01],
                [6.12749668e-01, 5.25161207e-01],
                [-1.31457622e-01, 2.05224563e-01],
                [4.23598045e-01, 2.42682834e-02],
                [-4.20667347e-02, 2.56176002e-01],
                [2.81886366e-01, -9.75628649e-02],
                [6.84520647e-01, 5.02000506e-01],
                [-3.12612717e-01, -1.79791499e-01],
                [1.96468556e-01, 3.68687852e-01],
                [5.92837803e-01, -3.61687942e-01],
                [-4.68981995e-01, 2.70793052e-01],
                [-5.25556425e-01, 2.98633635e-01],
                [4.04845433e-01, -4.57327131e-01],
                [9.99104074e-02, 1.96272477e-01],
                [-1.04348202e00, 4.44652371e-01],
                [1.21751052e00, 4.07178679e-01],
                [-9.23371902e-02, 3.80725250e-01],
                [1.10980988e00, 2.27593284e-01],
                [-3.58169441e-01, -2.66642119e-01],
                [-6.20526991e-01, -6.67593445e-02],
                [-2.73981171e-01, -2.72387307e-01],
                [4.75847027e-01, -3.80518608e-01],
                [-3.88512956e-01, -4.15338254e-01],
                [-2.10527290e-01, 2.19662634e-01],
                [8.41647782e-01, -2.70583200e-01],
                [-1.34279568e-01, 3.24308564e-01],
                [6.71225331e-02, -1.31406393e-01],
                [-4.86970838e-01, -3.15333491e-01],
                [1.00882542e00, 6.12226148e-02],
                [4.37410356e-01, 1.33550884e-01],
                [-7.02169053e-01, -2.71105167e-01],
                [1.93846407e-01, -3.35298527e-01],
                [-1.22098636e00, -9.30235678e-01],
                [-2.94488937e-01, 4.14257743e-01],
                [8.14042569e-01, 2.99747894e-01],
                [1.19610906e00, -1.47139724e-01],
                [-1.31759108e00, 7.91238534e-01],
                [-6.29133275e-01, -4.24813527e-01],
                [1.26707856e-01, -1.81474922e-01],
                [6.21449073e-02, -6.71110833e-02],
                [-2.81660587e-01, -1.37444446e-01],
                [-5.68345468e-01, 4.43536085e-01],
                [3.67647800e-01, 5.14167136e-01],
                [-1.67990841e-01, 4.56095944e-01],
                [-5.16181602e-03, -1.20096355e-01],
                [-7.82461472e-02, -6.58872905e-01],
                [5.57236293e-01, -4.61043557e-01],
                [1.41444941e-02, 1.89311906e-01],
                [-7.05045090e-01, 2.41793442e-01],
                [-1.06736834e00, -1.22829028e-01],
                [1.02118686e-01, 2.39091612e-01],
                [-7.71754562e-01, 2.10297532e-01],
                [6.67094432e-01, 1.05710861e-01],
                [4.41118707e-01, -3.86085457e-01],
                [-2.93467798e-01, 4.32069817e-01],
                [-1.70697710e-01, 1.43070752e-01],
                [2.89282311e-01, -1.02072934e-01],
                [-1.38623000e-01, 8.67123532e-05],
                [8.85731447e-02, -2.75505661e-01],
                [-2.72384032e-01, -3.83160633e-01],
                [4.88214747e-01, 2.62143853e-01],
                [-9.46928843e-01, -1.57584977e-01],
                [5.36741813e-01, 3.94276023e-01],
                [8.29196136e-01, -5.40685134e-01],
                [-3.64489149e-01, -1.19100503e-01],
                [7.65640870e-02, 1.78829204e-01],
                [-4.12534490e-01, -1.25050500e-01],
                [-3.17097786e-01, -1.66754256e-01],
                [1.91204615e-01, -5.05236341e-01],
                [6.70497524e-01, 7.61281247e-01],
                [-8.66238601e-01, -3.62487075e-01],
                [8.48785740e-01, -1.15249717e-01],
                [-6.15698319e-01, -5.16066658e-01],
                [4.67516540e-01, -4.58500385e-01],
                [8.25170597e-01, 1.09546157e-01],
                [-5.52328500e-01, 1.94724929e-01],
                [-3.30462262e-01, 5.51236553e-02],
                [-1.57367142e00, 2.41981353e-01],
                [6.74974778e-02, -1.65872131e-01],
                [1.55112881e00, -1.90312790e-01],
                [-1.11939391e00, 1.77538481e-01],
                [1.83674533e-01, 1.31449323e-01],
                [2.64481765e-01, -1.22908261e-01],
                [-5.17294957e-01, -2.17427150e-01],
                [2.01133907e-01, 4.63886533e-03],
                [-8.12592615e-02, 1.92835190e-02],
                [1.11251125e00, -3.72712460e-02],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores_dense), np.abs(expected_scores), decimal=3
        )

    def test_innpro_irregular(self):
        uf_sparse = UFPCA(n_components=2, method="inner-product")
        uf_sparse.fit(self.fdata_sparse)

        scores_sparse = _transform_innpro(
            self.fdata_sparse, uf_sparse._eigenvectors, uf_sparse.eigenvalues
        )
        expected_scores = np.array(
            [
                [-0.33113269, 0.35216857],
                [0.16865132, -0.01290262],
                [-0.51374297, 0.02901997],
                [0.1627761, 0.1615115],
                [-0.37029011, 0.05903185],
                [-0.39492792, -0.04635244],
                [0.50363658, -0.09677051],
                [0.61148698, -0.12573937],
                [0.12646921, -0.07417158],
                [-0.47332971, -0.09116],
                [0.64346486, -0.17772516],
                [-0.42353945, -0.15752261],
                [-0.13905664, 0.25917612],
                [0.06774341, 0.259962],
                [0.57545134, 0.46498739],
                [-0.14342059, 0.19763344],
                [0.43930483, 0.0486187],
                [-0.03938158, 0.21048546],
                [0.27187017, -0.04191416],
                [0.70336447, 0.47091721],
                [-0.2789118, -0.16508928],
                [0.19245569, 0.38406484],
                [0.60428705, -0.35473998],
                [-0.46096305, 0.28654703],
                [-0.49420386, 0.28083815],
                [0.42636413, -0.47911309],
                [0.10145043, 0.22426519],
                [-1.02389782, 0.40914575],
                [1.17070087, 0.37003217],
                [-0.06898507, 0.39659679],
                [1.15429825, 0.23266327],
                [-0.35994965, -0.27637722],
                [-0.62832117, -0.06277364],
                [-0.32541366, -0.2654213],
                [0.47841294, -0.37311087],
                [-0.39492977, -0.42683578],
                [-0.16606693, 0.17351823],
                [0.84404958, -0.28008871],
                [-0.15987674, 0.2940597],
                [0.06862972, -0.12662977],
                [-0.47809278, -0.28509184],
                [1.00307831, 0.06777314],
                [0.401621, 0.18148816],
                [-0.7050387, -0.2868137],
                [0.15355356, -0.2993076],
                [-1.20633451, -0.92023623],
                [-0.29072766, 0.40239753],
                [0.8510428, 0.30670042],
                [1.20926857, -0.12631182],
                [-1.33575049, 0.79758763],
                [-0.61696469, -0.38771831],
                [0.13830695, -0.18232601],
                [0.09345587, -0.0523522],
                [-0.22368255, -0.07816607],
                [-0.58541892, 0.43176874],
                [0.37537514, 0.4906347],
                [-0.1517822, 0.43080411],
                [0.00857507, -0.12671435],
                [-0.04418439, -0.66873225],
                [0.56537559, -0.43344625],
                [-0.00504764, 0.2088888],
                [-0.70553999, 0.21161664],
                [-1.0635193, -0.11922839],
                [0.09084033, 0.20100213],
                [-0.75085645, 0.16992547],
                [0.68724592, 0.09964642],
                [0.43645522, -0.3863187],
                [-0.28983493, 0.44118624],
                [-0.20129891, 0.11081645],
                [0.27093877, -0.13341483],
                [-0.15060092, 0.00752823],
                [0.05123589, -0.2733035],
                [-0.26814293, -0.37888411],
                [0.46351595, 0.24473878],
                [-0.92200539, -0.18248423],
                [0.55025207, 0.41318268],
                [0.83146061, -0.56333343],
                [-0.36973633, -0.09902084],
                [0.11756398, 0.18501754],
                [-0.39573193, -0.11467128],
                [-0.32970794, -0.16173979],
                [0.19010086, -0.47464177],
                [0.66999161, 0.79735583],
                [-0.87257554, -0.3261674],
                [0.87338125, -0.11403953],
                [-0.62457581, -0.56866175],
                [0.4387604, -0.45571237],
                [0.79908947, 0.06774668],
                [-0.5721759, 0.17311938],
                [-0.34850912, 0.03731951],
                [-1.53428361, 0.25977353],
                [0.07908549, -0.16245338],
                [1.4982557, -0.20353768],
                [-1.10603677, 0.19160117],
                [0.16285392, 0.15575747],
                [0.26098574, -0.12971373],
                [-0.50619678, -0.24755575],
                [0.18499505, 0.00461736],
                [-0.06877229, -0.02355676],
                [1.10244325, -0.03079244],
            ]
        )
        np.testing.assert_array_almost_equal(
            np.abs(scores_sparse), np.abs(expected_scores), decimal=3
        )

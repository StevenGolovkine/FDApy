#!/usr/bin/python3
# -*-coding:utf8 -*
"""Module that contains unit tests for the class UFPCA in the fpca.py file.

Written with the help of ChatGPT.

"""
import numpy as np
import unittest
import warnings

from FDApy.representation.argvals import DenseArgvals
from FDApy.representation.values import DenseValues
from FDApy.representation.functional_data import MultivariateFunctionalData
from FDApy.simulation.karhunen import KarhunenLoeve
from FDApy.preprocessing.dim_reduction.fpca import (
    UFPCA,
    _fit_covariance,
    _fit_covariance_multivariate,
    _fit_inner_product,
    _fit_inner_product_multivariate,
    _transform_numerical_integration_dense,
    _transform_numerical_integration_irregular,
    _transform_pace_dense,
    _transform_pace_irregular,
    _transform_innpro
)


class TestFitCovariance(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=100)
        kl.sparsify(0.8, 0.05)

        self.fdata_uni = kl.data
        self.fdata_sparse = kl.sparse_data

    def test_fit_covariance_dense(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata_uni, points=points, n_components=3)

        expected_eigenvalues = np.array([0.249208  , 0.11510566, 0.05382122])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[-2.03050399e-01, -1.28816058e-02,  1.58461253e-01,   3.12084925e-01,  4.48608916e-01,  5.67813128e-01,   6.71393644e-01,  7.61050939e-01,  8.38270483e-01,   9.04603116e-01,  9.61523904e-01,  1.01051016e+00,   1.05313115e+00,  1.09096996e+00,  1.12560006e+00,   1.15825499e+00,  1.18934515e+00,  1.21840081e+00,   1.24416558e+00,  1.26500126e+00,  1.27926904e+00,   1.28536490e+00,  1.28175573e+00,  1.26691694e+00,   1.23924699e+00,  1.19723682e+00,  1.13896279e+00,   1.06237725e+00,  9.69200082e-01,  8.60231831e-01,   7.35341051e-01], [-1.87465891e+00, -1.78530124e+00, -1.70093552e+00,  -1.61868936e+00, -1.53396349e+00, -1.44138716e+00,  -1.34249113e+00, -1.23838079e+00, -1.12938083e+00,  -1.01595434e+00, -8.98522110e-01, -7.77518446e-01,  -6.53351887e-01, -5.26421711e-01, -3.97158188e-01,  -2.66068751e-01, -1.33996886e-01, -2.09931192e-03,   1.28241691e-01,  2.55449294e-01,  3.77955334e-01,   4.94221661e-01,  6.02713920e-01,  7.01919576e-01,   7.90260404e-01,  8.66282936e-01,  9.27798870e-01,   9.72197049e-01,  1.00370793e+00,  1.02566344e+00,   1.03976094e+00], [ 1.75152846e+00,  1.48624714e+00,  1.23319139e+00,   9.90945002e-01,  7.57849945e-01,  5.33284961e-01,   3.20364665e-01,  1.21078648e-01, -6.34034473e-02,  -2.31694338e-01, -3.82397003e-01, -5.14149040e-01,  -6.25545611e-01, -7.15138244e-01, -7.81363353e-01,  -8.22434472e-01, -8.36519252e-01, -8.21777519e-01,  -7.76141442e-01, -6.97478613e-01, -5.83564682e-01,  -4.31959834e-01, -2.40317262e-01, -6.36913765e-03,   2.72342877e-01,  5.98631433e-01,  9.74050370e-01,   1.39697189e+00,  1.86981071e+00,  2.39976001e+00,   2.99455896e+00]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_noise = 0.014204431460944762
        np.testing.assert_almost_equal(results['noise_variance_cov'], expected_noise)

    def test_fit_covariance_irregular(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata_sparse, points=points, n_components=3)

        expected_eigenvalues = np.array([0.25039568, 0.11548423, 0.05415895])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[-0.22004529, -0.03219429,  0.13773589,  0.30001494,   0.46207611,  0.60961836,  0.73063454,  0.81031355,   0.85748449,  0.89850535,  0.94699771,  1.01080893,   1.06807786,  1.10111334,  1.12061952,  1.14621192,   1.18029694,  1.2156647 ,  1.24588578,  1.2699721 ,   1.28388024,  1.29036547,  1.28494763,  1.25210825,   1.20593077,  1.16052985,  1.10085329,  1.02966196,   0.95531412,  0.88651111,  0.85587579], [-1.98403232, -1.77704242, -1.66479685, -1.58372222,  -1.51019657, -1.43646396, -1.34599018, -1.23768187,  -1.10293329, -0.9648364 , -0.83998325, -0.73885463,  -0.65867079, -0.56506005, -0.44591305, -0.29288539,  -0.15283413, -0.02262808,  0.10788183,  0.23879689,   0.37646003,  0.50975427,  0.62639165,  0.72027683,   0.79483645,  0.86458321,  0.93778743,  0.99963232,   1.04445634,  1.07390297,  1.06067932], [ 1.73045808,  1.35721894,  1.1459679 ,  0.96243124,   0.78403516,  0.59366248,  0.36960302,  0.16265274,  -0.01558696, -0.18087274, -0.34024768, -0.47811362,  -0.57875294, -0.65694524, -0.70426965, -0.75096739,  -0.78398543, -0.79080569, -0.76423205, -0.70816079,  -0.64538609, -0.56468348, -0.41711984, -0.16919133,   0.15823433,  0.53777091,  0.95793989,  1.41576884,   1.911816  ,  2.49024978,  3.07602527]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_noise = 0.013971444244734173
        np.testing.assert_almost_equal(results['noise_variance_cov'], expected_noise)


class TestFitCovarianceMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.sparsify(0.8, 0.05)

        fdata_uni = kl.data
        fdata_sparse = kl.sparse_data

        kl_2d = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42, dimension='2D'
        )
        kl_2d.new(n_obs=10)

        fdata_uni_2d = kl_2d.data

        self.fdata = MultivariateFunctionalData([fdata_uni, fdata_sparse])
        self.fdata_2d = MultivariateFunctionalData([fdata_uni, fdata_uni_2d])

    def test_fit_covariance_dense_and_sparse(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_covariance_multivariate(data=self.fdata, points=points, n_components=[0.95, 3], smooth=True, scores_method='NumInt')

        expected_eigenvalues = np.array([5.67105299e+00, 4.78983000e+00, 8.85089820e-01, 1.35430647e-02, 2.10101656e-03, 9.88637364e-05])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions_0 = np.array([[-0.39179913, -0.41284385, -0.43314029, -0.45267635,  -0.47145851, -0.48951199, -0.50676927, -0.52327484,  -0.53898592, -0.55391973, -0.56798129, -0.58112306,  -0.59326061, -0.60428103, -0.61403814, -0.62240388,  -0.62946581, -0.63550839, -0.64058399, -0.64474329,  -0.64803567, -0.65050883, -0.65220838, -0.65317687,  -0.65345805, -0.65309903, -0.65214719, -0.65064964,  -0.64865325, -0.64620469, -0.64335052, -0.64013721,  -0.63661118, -0.63281889, -0.6288068 , -0.62462142,  -0.62030935, -0.61591754, -0.61149371, -0.60708658,  -0.602746  , -0.59852262, -0.59446736, -0.59063069,  -0.58706162, -0.58380671, -0.58090899, -0.57840689,  -0.57633337, -0.57471505, -0.57357169, -0.57291578,  -0.57275242, -0.57307944, -0.57388778, -0.57516207,  -0.57688142, -0.57902035, -0.58154984, -0.5844384 ,  -0.5876531 , -0.59116052, -0.5949275 , -0.59892172,  -0.60311194, -0.60746795, -0.61196031, -0.61655991,  -0.6212378 , -0.62596508, -0.63071288, -0.63545236,  -0.64015463, -0.64479067, -0.64933127, -0.65374692,  -0.65800769, -0.66208319, -0.66594345, -0.66956408,  -0.67292291, -0.67599257, -0.67874224, -0.68113833,  -0.68314533, -0.68472553, -0.68567817, -0.68592055,  -0.68554211, -0.68466331, -0.68339282, -0.68182304,  -0.68001821, -0.67808673, -0.67604048, -0.67394362,  -0.67178146, -0.66964342, -0.66753004, -0.66546024,  -0.66346965]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values[:1, :]), np.abs(expected_eigenfunctions_0))

        expected_eigenfunctions_1 = np.array([[-0.82867294, -0.86355831, -0.88797612, -0.90488674,  -0.91825858, -0.93136672, -0.94666652, -0.96183675,  -0.9730081 , -0.97995524, -0.98234351, -0.98237146,  -0.97840786, -0.9694224 , -0.95881189, -0.94748259,  -0.93364676, -0.92110493, -0.91174175, -0.89921085,  -0.88295649, -0.8647746 , -0.84965386, -0.83708806,  -0.8232277 , -0.81071017, -0.80171182, -0.7920227 ,  -0.78001372, -0.76794351, -0.75907405, -0.7512055 ,  -0.73982937, -0.72452268, -0.70457312, -0.68223552,  -0.6605097 , -0.64071026, -0.62261246, -0.60565387,  -0.59063984, -0.5769135 , -0.56507645, -0.55527664,  -0.54693312, -0.54352042, -0.54622089, -0.55139281,  -0.5548843 , -0.55603896, -0.55763291, -0.56005262,  -0.56291622, -0.56508951, -0.56541995, -0.56491218,  -0.5617888 , -0.55467066, -0.54516094, -0.53479858,  -0.52590087, -0.52247789, -0.52464992, -0.52992698,  -0.54090835, -0.5556583 , -0.57178698, -0.58986655,  -0.60834584, -0.62581985, -0.64231232, -0.65856253,  -0.67380537, -0.68645263, -0.69711071, -0.70901282,  -0.72249674, -0.73776619, -0.75624097, -0.77365356,  -0.78669687, -0.79762721, -0.80584403, -0.81045127,  -0.81369088, -0.81845729, -0.82739978, -0.83924547,  -0.85107954, -0.86448502, -0.8803168 , -0.89825684,  -0.91953977, -0.94490159, -0.97527361, -1.01669929,  -1.07348203, -1.14243013, -1.22328179, -1.31091086,  -1.39641564]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values[:1, :]), np.abs(expected_eigenfunctions_1))

    def test_fit_inner_product_with_2d(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 11), 'input_dim_1': np.linspace(0, 1, 11)})
        ]
        results = _fit_covariance_multivariate(data=self.fdata_2d, points=points, n_components=[0.95, 3], smooth=True, scores_method='NumInt')
        
        expected_eigenvalues = np.array([2.53004581e+00, 2.03399626e+00, 5.19036369e-01, 1.58204929e-03, 8.56991688e-04, 5.98847063e-06])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues, decimal=2)

        expected_eigenfunctions = np.array([[ 1.76841978,  1.63656298,  1.50877798,  1.38496397,   1.26501047,  1.14880797,  1.0362936 ,  0.92734997,   0.8219133 ,  0.7198832 ,  0.62123203,  0.52590887,   0.43388985,  0.34518442,  0.25986641,  0.1780569 ,   0.09972886,  0.02454736, -0.04755647, -0.11665601,  -0.18282872, -0.24615723, -0.30673054, -0.36464671,  -0.4199994 , -0.47287342, -0.52335312, -0.57152377,  -0.61747123, -0.66128166, -0.70304142, -0.74283689,  -0.78075447, -0.8168805 , -0.85130126, -0.88410298,  -0.915372  , -0.9451956 , -0.97366311, -1.00086655,  -1.02690052, -1.0518612 , -1.07584471, -1.09894491,  -1.1212508 , -1.14284376, -1.16379469, -1.18416142,  -1.20398627, -1.2232941 , -1.2420907 , -1.26036191,  -1.27807321, -1.29517001, -1.31157857, -1.32720744,  -1.34194943, -1.35568404, -1.36828014, -1.37959884,  -1.38949628, -1.39782627, -1.40444249, -1.40920025,  -1.4119574 , -1.41257455, -1.41091444, -1.40684087,  -1.40021795, -1.39090994, -1.37878121, -1.36369624,  -1.34551953, -1.32411565, -1.29934916, -1.27108475,  -1.23918731, -1.20352225, -1.16395486, -1.1203454 ,  -1.07255111, -1.02043473, -0.96386285, -0.9027052 ,  -0.83683364, -0.76612212, -0.6899682 , -0.60826557,  -0.52125031, -0.42912786, -0.33200857, -0.22994545,  -0.12293179, -0.01103146,  0.10586987,  0.22779466,   0.35490292,  0.48719826,  0.62481971,  0.76789332,   0.91652344]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values[:1, :]), np.abs(expected_eigenfunctions), decimal=2)

        expected_eigenfunctions = np.array([[[0.08736682, 0.08639586, 0.08568073, 0.08567535,   0.08648132, 0.08804738, 0.09026307, 0.09300185,   0.09614009, 0.09956493, 0.10317669, 0.10688903,   0.11062811, 0.11433139, 0.11794631, 0.12142911,   0.12474371, 0.12786073, 0.13075663, 0.13341291,   0.13581551, 0.13795417, 0.13982197, 0.14141485,   0.14273129, 0.14377191, 0.14453922, 0.14503737,   0.14527189, 0.14524954, 0.14497812, 0.14446631,   0.14372356, 0.14275995, 0.1415861 , 0.14021307,   0.13865227, 0.13691539, 0.13501429, 0.13296098,   0.13076751, 0.12844594, 0.12600822, 0.12346617,   0.12083136, 0.11811509, 0.11532825, 0.1124813 ,   0.10958413, 0.10664609, 0.10367593, 0.10068196,   0.09767226, 0.09465447, 0.09163562, 0.0886221 ,   0.08561972, 0.08263375, 0.07966898, 0.07672977,   0.07382014, 0.07094376, 0.06810405, 0.06530417,   0.06254707, 0.05983551, 0.05717212, 0.05455935,   0.05199955, 0.04949496, 0.04704769, 0.04465982,   0.04233329, 0.04007003, 0.03787185, 0.03574053,   0.03367778, 0.03168527, 0.02976459, 0.0279173 ,   0.02614488, 0.02444876, 0.02283031, 0.02129085,   0.0198316 , 0.0184537 , 0.01715824, 0.01594617,   0.01481835, 0.01377552, 0.01281827, 0.01194706,   0.01116215, 0.01046363, 0.00985138, 0.00932512,   0.00888438, 0.00852868, 0.0082578 , 0.00807244,   0.00797561]]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values[:1, :1]), np.abs(expected_eigenfunctions), decimal=2)


class TestFitInnerProduct(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=100)
        kl.sparsify(0.8, 0.05)

        self.fdata_uni = kl.data
        self.fdata_sparse = kl.sparse_data

    def test_fit_inner_product_dense(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_inner_product(data=self.fdata_uni, points=points, n_components=3)

        expected_eigenvalues = np.array([0.24673014, 0.11341369, 0.05241994])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 0.07904403, -0.0522243 , -0.17323811, -0.28449633,  -0.38683601, -0.48103603, -0.56782871, -0.64797133,  -0.72209437, -0.79084309, -0.85477101, -0.91443988,  -0.97072477, -1.02068763, -1.06308277, -1.0981388 ,  -1.12598681, -1.14643027, -1.15918243, -1.16548869,  -1.16836975, -1.16689301, -1.16044931, -1.14844347,  -1.13019022, -1.10502436, -1.07215333, -1.03081311,  -0.98019199, -0.9194178 , -0.84797022], [ 1.88221147,  1.7958967 ,  1.70528191,  1.61049742,   1.51182059,  1.40950285,  1.30378747,  1.19498129,   1.0834208 ,  0.96955626,  0.85390742,  0.73711456,   0.61997967,  0.50177327,  0.38270144,  0.26364263,   0.14564359,  0.02984988, -0.08266956, -0.19211056,  -0.30051224, -0.40675023, -0.50987583, -0.60901362,  -0.70327257, -0.79182691, -0.87380164, -0.94837712,  -1.01470598, -1.0718885 , -1.11933824], [ 1.6787004 ,  1.44522845,  1.2211007 ,  1.0074812 ,   0.80511713,  0.61484592,  0.4376114 ,  0.27422139,   0.12562026, -0.00760725, -0.12495849, -0.22622666,  -0.31282335, -0.37906112, -0.42034759, -0.43506199,  -0.42153695, -0.37766269, -0.30170482, -0.19823803,  -0.07771983,  0.06458031,  0.23119328,  0.42402016,   0.64478711,  0.89455225,  1.17454398,  1.48564976,   1.82892525,  2.20565128,  2.61589876]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.008733  , -0.0030051 , -0.1741724 ],[ 0.04219662, -0.04267833, -0.12641441],[-0.12108065,  0.06025756,  0.0943915 ],[-0.0088194 , -0.06732271, -0.00186014],[-0.01954053, -0.01493807, -0.09659307],[-0.07602117, -0.00119646,  0.00662709],[ 0.06174976,  0.09383498,  0.1993483 ],[ 0.0743865 ,  0.04751714,  0.15987125],[-0.00844423,  0.06093655,  0.08744061],[-0.09233449,  0.0587303 ,  0.0147853 ],[ 0.08214717,  0.0623118 ,  0.0459721 ],[-0.04111606, -0.03299329, -0.01772025],[-0.03840731, -0.16234148, -0.03435818],[-0.01319255, -0.0057966 ,  0.05709688],[ 0.07032875, -0.19492882, -0.01097621],[-0.02659881,  0.00597957,  0.01271511],[ 0.09544327,  0.0269896 , -0.05507715],[-0.02612558, -0.03358465,  0.07178676],[ 0.06910697,  0.08655483, -0.08191197],[ 0.11580859, -0.18118686, -0.10648156],[-0.05191057,  0.07555372, -0.07798331],[ 0.05107248, -0.05283492, -0.13513753],[ 0.10289094,  0.0760332 ,  0.05857227],[-0.09748488, -0.05444236, -0.04148754],[-0.11580292, -0.11324362,  0.01259335],[ 0.06390819,  0.15776016, -0.0024374 ],[ 0.07271434, -0.0510693 , -0.17024385],[-0.245899  , -0.18258888,  0.16383405],[ 0.15774371, -0.06771167,  0.05670714],[-0.03336886, -0.10899231,  0.0049511 ],[ 0.16382707, -0.09865221,  0.0664193 ],[-0.01245946,  0.19222919, -0.04165432],[-0.05484743, -0.06948657, -0.07528548],[-0.04378362,  0.0295348 , -0.06717049],[ 0.1152519 ,  0.06876932, -0.12340069],[-0.07533277,  0.12357182,  0.03105574],[-0.07291166,  0.03772542,  0.13680281],[ 0.08763994,  0.06825273,  0.28354455],[-0.04314766,  0.07600723,  0.02954068],[ 0.00472009, -0.00675604, -0.04149717],[-0.0516362 ,  0.17621988, -0.15315217],[ 0.16069783, -0.04721407,  0.0270464 ],[ 0.08171064, -0.01289092,  0.02699787],[-0.0762568 ,  0.15560226, -0.05832435],[ 0.04281682,  0.0404213 , -0.01060694],[-0.14968107,  0.27157739, -0.09438429],[-0.03812314, -0.13460153, -0.14962479],[ 0.17543729, -0.14449541, -0.07102004],[ 0.13786597, -0.11923821,  0.21232715],[-0.19201353, -0.16896278, -0.24088401],[-0.04267361,  0.07809812, -0.11694755],[ 0.03947559,  0.12374036, -0.05156695],[ 0.01933876, -0.02599894,  0.02024273],[-0.03676911,  0.07850294,  0.04660694],[-0.16831218, -0.14008614,  0.10865772],[ 0.01062076, -0.0990011 ,  0.103197  ],[ 0.01643114, -0.05393901, -0.10169906],[ 0.00827094,  0.00661658, -0.03329161],[ 0.07196644,  0.11553371, -0.10237994],[ 0.10200702,  0.07022124,  0.05494097],[ 0.02298408,  0.02264207,  0.05837924],[-0.13074488, -0.13757273,  0.03680965],[-0.16969617,  0.09560838,  0.06460298],[ 0.00739114, -0.01519597, -0.07752542],[-0.15391309, -0.02887034,  0.15381423],[ 0.14394465, -0.01547485,  0.00297279],[ 0.06062948,  0.15479084,  0.12153651],[-0.06729462, -0.17039177, -0.02180165],[-0.06801167, -0.17974878,  0.01169363],[ 0.06036134, -0.15345737, -0.01581285],[-0.0821605 ,  0.01142586,  0.14453963],[ 0.02788152,  0.07011333, -0.00876139],[-0.00459663,  0.07771313, -0.0619854 ],[ 0.03061428, -0.01575465,  0.1985644 ],[-0.16626106,  0.07016121,  0.01624366],[ 0.01781897,  0.05128193,  0.19213513],[ 0.14797004,  0.16614177, -0.05687796],[-0.02310504,  0.03680472, -0.18263189],[-0.00740353, -0.17959672, -0.04244708],[-0.05914212,  0.07729665, -0.05607531],[-0.04294082,  0.01587882,  0.0014898 ],[ 0.11105764,  0.10102984, -0.16272543],[ 0.10290305, -0.28270517, -0.06850217],[-0.1498238 ,  0.07413551,  0.07118855],[ 0.17512663,  0.01189553, -0.04194826],[-0.05372605,  0.1024595 , -0.06303869],[ 0.07879285, -0.00282842,  0.02639226],[ 0.11103174, -0.0882354 ,  0.05433985],[-0.10295865, -0.00816072, -0.04727131],[-0.09245344, -0.06339003, -0.02768822],[-0.24676993, -0.00992003, -0.07835909],[-0.01863479,  0.06313668,  0.05060027],[ 0.26912758,  0.0322884 , -0.00582812],[-0.13396673, -0.01017556, -0.18631445],[ 0.00173354, -0.03987268,  0.09115262],[-0.0457993 , -0.05354499,  0.25821317],[-0.09885875,  0.10451185,  0.00982951],[ 0.04144853, -0.0526841 ,  0.03110231],[-0.02675141,  0.0836424 ,  0.0541262 ],[ 0.24128846,  0.03199564, -0.05867297]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_sparse(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_inner_product(data=self.fdata_sparse, points=points, n_components=3)

        expected_eigenvalues = np.array([0.24649833, 0.1137788 , 0.05212135])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 0.07533891, -0.05619051, -0.17644861, -0.28672377,  -0.38758051, -0.48029271, -0.5659127 , -0.64524327,  -0.7186441 , -0.78643419, -0.84901944, -0.9069788 ,  -0.96088738, -1.01082382, -1.05337508, -1.08895896,  -1.11781581, -1.13876994, -1.15183038, -1.16066492,  -1.16543837, -1.1653951 , -1.16008703, -1.14932339,  -1.13206235, -1.10750077, -1.07523862, -1.03519957,  -0.98614602, -0.92654413, -0.85633575], [ 1.91118095,  1.8235003 ,  1.72915817,  1.62998416,   1.52759431,  1.42239701,  1.31398813,  1.20246727,   1.08844195,  0.97256878,  0.85556665,  0.73767466,   0.6191739 ,  0.50033081,  0.38139968,  0.26292983,   0.14694774,  0.03271004, -0.0781068 , -0.18791104,  -0.29654861, -0.40281551, -0.50588768, -0.60524179,  -0.69937535, -0.78735861, -0.86883606, -0.94417649,  -1.01153601, -1.06800463, -1.1143639 ], [ 1.68635585,  1.44472994,  1.21433748,  0.99464347,   0.78796845,  0.59615319,  0.41900592,  0.25660406,   0.11073031, -0.01869151, -0.12962772, -0.22143279,  -0.29549009, -0.35317331, -0.38798106, -0.3977845 ,  -0.37985565, -0.33081366, -0.25067491, -0.15191422,  -0.03367279,  0.10664281,  0.27092455,  0.45975293,   0.675847  ,  0.9212359 ,  1.19599221,  1.49824614,   1.82945843,  2.19039061,  2.58269295]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.00910154, -0.0038095 , -0.16806664],[ 0.04188371, -0.04489693, -0.127812  ],[-0.12093194,  0.06142492,  0.09580927],[-0.00880084, -0.0679463 , -0.00161218],[-0.01965687, -0.01520458, -0.09570006],[-0.0759594 , -0.00137035,  0.00544256],[ 0.0620322 ,  0.09656572,  0.20116714],[ 0.0744255 ,  0.04925143,  0.16147601],[-0.00824469,  0.06171693,  0.08811699],[-0.09233473,  0.05875602,  0.01419238],[ 0.08222939,  0.06231011,  0.04525034],[-0.04117416, -0.03303263, -0.02050286],[-0.03840118, -0.16323449, -0.03565668],[-0.0132027 , -0.00423823,  0.06191324],[ 0.07023947, -0.19500853, -0.00876886],[-0.0266523 ,  0.00667516,  0.01653176],[ 0.09519145,  0.02618695, -0.05323836],[-0.02601748, -0.03276029,  0.07376482],[ 0.06896085,  0.08596398, -0.07927654],[ 0.11572843, -0.18197602, -0.10398798],[-0.05214294,  0.07476651, -0.07743923],[ 0.05099614, -0.0534987 , -0.13085668],[ 0.10315477,  0.07598124,  0.05542574],[-0.09755299, -0.05472997, -0.03823515],[-0.11588619, -0.1135988 ,  0.01272473],[ 0.06413411,  0.15707466, -0.005557  ],[ 0.07219447, -0.05237664, -0.16669149],[-0.24561044, -0.18084733,  0.16437534],[ 0.15796153, -0.06754167,  0.06138227],[-0.03329528, -0.1083646 ,  0.00723027],[ 0.16399742, -0.09807323,  0.06819644],[-0.01254217,  0.19244956, -0.04015588],[-0.05501956, -0.06983538, -0.07926593],[-0.04390541,  0.0284476 , -0.07066709],[ 0.1150203 ,  0.06673271, -0.12735365],[-0.07536898,  0.1232789 ,  0.02661248],[-0.07265834,  0.03947412,  0.14038681],[ 0.08862453,  0.07116714,  0.27936892],[-0.0430622 ,  0.07663683,  0.03598326],[ 0.00459786, -0.00798013, -0.04413678],[-0.05184541,  0.17445591, -0.15150624],[ 0.16073187, -0.04746694,  0.0279024 ],[ 0.08189295, -0.012636  ,  0.0298262 ],[-0.07632752,  0.15523769, -0.05847339],[ 0.04280534,  0.04017421, -0.01424986],[-0.14947517,  0.2707431 , -0.10094521],[-0.03853431, -0.13664771, -0.1461977 ],[ 0.17508176, -0.14410874, -0.06870476],[ 0.13818627, -0.11826561,  0.20827457],[-0.19276672, -0.17082213, -0.23286756],[-0.04297143,  0.07677438, -0.12113148],[ 0.03923105,  0.12331554, -0.05033617],[ 0.01917497, -0.02616612,  0.01980409],[-0.03676262,  0.07720601,  0.04476263],[-0.16821277, -0.13889844,  0.11063537],[ 0.01053336, -0.0977658 ,  0.10816885],[ 0.0166158 , -0.05448327, -0.09676366],[ 0.00827632,  0.00610776, -0.03503116],[ 0.07187156,  0.1143625 , -0.11155926],[ 0.1027196 ,  0.07136934,  0.04517632],[ 0.02304559,  0.02440453,  0.06339945],[-0.13026987, -0.13707402,  0.03528901],[-0.16967526,  0.09666435,  0.06529201],[ 0.00713871, -0.0160347 , -0.0747457 ],[-0.153492  , -0.02679045,  0.15405003],[ 0.14380134, -0.01432254,  0.0060298 ],[ 0.06080167,  0.15586558,  0.12016316],[-0.06738288, -0.17050316, -0.01980021],[-0.06808093, -0.18065212,  0.00945695],[ 0.0606755 , -0.1535798 , -0.02327429],[-0.08190185,  0.01258368,  0.14448977],[ 0.02796407,  0.06997873, -0.01131863],[-0.00435295,  0.0771695 , -0.06572173],[ 0.03078261, -0.01241169,  0.20427098],[-0.16616611,  0.0699705 ,  0.0143266 ],[ 0.01797659,  0.05513533,  0.20106261],[ 0.14751536,  0.16521037, -0.06045591],[-0.02347156,  0.0349634 , -0.18306873],[-0.00761143, -0.1804825 , -0.04505696],[-0.05923603,  0.07660733, -0.05485609],[-0.04274248,  0.01576211, -0.00113258],[ 0.11078537,  0.09919916, -0.16727984],[ 0.10242227, -0.28304468, -0.06361624],[-0.14949208,  0.07509735,  0.06701257],[ 0.17509616,  0.01160184, -0.04250359],[-0.05405429,  0.10099983, -0.06870384],[ 0.07931972, -0.00254788,  0.01875676],[ 0.11100283, -0.08818269,  0.05397712],[-0.10280561, -0.0079465 , -0.04624373],[-0.0926423 , -0.06419747, -0.02980353],[-0.24714032, -0.01025713, -0.07591281],[-0.01863226,  0.06316445,  0.04936387],[ 0.26907242,  0.03152324, -0.00699652],[-0.13399902, -0.01154447, -0.18431173],[ 0.0018933 , -0.03892686,  0.09295881],[-0.04559156, -0.05206798,  0.25439481],[-0.09885444,  0.10459513,  0.0084989 ],[ 0.04147133, -0.05236415,  0.02986451],[-0.02679958,  0.08462287,  0.05660264],[ 0.24121921,  0.03192949, -0.05681752]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_2d(self):
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, dimension='2D', random_state=42
        )
        kl.new(n_obs=10)
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31), 'input_dim_1': np.linspace(0, 1, 31)})

        results = _fit_inner_product(data=kl.data, points=points, n_components=3, noise_variance=0)
        
        expected_eigenvalues = np.array([0.01098398, 0.00483969, 0.00231953])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 0.20682534,  0.80205269,  1.32401771,  1.77736403,   2.16785037,  2.50693936,  2.76414249,  2.93894447,   3.03937124,  3.0736448 ,  3.0505235 ,  2.97813705,   2.86472845,  2.71859179,  2.54712263,  2.35709488,   2.15463232,  1.94488013,  1.73225279,  1.52044945,   1.31264028,  1.11172977,  0.92052612,  0.74195516,   0.57886066,  0.43401157,  0.30851769,  0.19731575,   0.10419423,  0.03083209, -0.02241254], [ 0.99597781,  2.18332111,  3.16457109,  3.96994193,   4.61912391,  5.13707662,  5.41772855,  5.4667867 ,   5.32036842,  5.01437707,  4.58633489,  4.0727424 ,   3.50958386,  2.9311167 ,  2.36726977,  1.84200507,   1.37238423,  0.96949738,  0.63829619,  0.37665047,   0.17894333,  0.03784088, -0.05560035, -0.10961338,  -0.13197779, -0.13140834, -0.11419909, -0.07910182,  -0.03487937,  0.00928537,  0.0454779 ], [ 0.04220196,  0.60013476,  0.96691291,  1.14514616,   1.15670488,  1.04742964,  0.78734604,  0.39588172,  -0.09424799, -0.64990737, -1.23704651, -1.82229057,  -2.37314786, -2.85904495, -3.25446343, -3.5418506 ,  -3.71091555, -3.75847199, -3.68962564, -3.51672169,  -3.25661037, -2.92922635, -2.5551155 , -2.15443417,  -1.74754097, -1.35468918, -0.99310414, -0.66338123,  -0.3778083 , -0.14374666,  0.03540871]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values[:, 0]), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.16023502, -0.25916387,  0.69352094],[-0.59327901, -0.18169182, -0.15757975],[ 0.58892225, -0.14372699, -0.10404258],[-0.28024854, -0.28946203, -0.44447702],[-0.01298703, -0.09790341,  0.42423096],[ 0.21479235, -0.19854235, -0.15823092],[ 0.05588307,  0.66067552,  0.14747419],[-0.18637344,  0.51507827, -0.13311371],[ 0.03540505,  0.14717772, -0.1778395 ],[ 0.33400626, -0.15137129, -0.09853385]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))


class TestFitInnerProductMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.sparsify(0.8, 0.05)

        fdata_uni = kl.data
        fdata_sparse = kl.sparse_data

        kl_2d = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42, dimension='2D'
        )
        kl_2d.new(n_obs=10)

        fdata_uni_2d = kl_2d.data

        self.fdata = MultivariateFunctionalData([fdata_uni, fdata_sparse])
        self.fdata_2d = MultivariateFunctionalData([fdata_uni, fdata_uni_2d])

    def test_fit_inner_product_dense_and_sparse(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_inner_product_multivariate( data=self.fdata, points=points, n_components=0.95, smooth=True)

        expected_eigenvalues = np.array([0.20493443, 0.16421498, 0.04150109])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions_0 = np.array([[ 1.07168485,  0.76409115,  0.49285389,  0.25421873,   0.04431215, -0.14055132, -0.30342232, -0.44677942,  -0.57360444, -0.67470701, -0.7432596 , -0.77799302,  -0.77578892, -0.7427335 , -0.68989323, -0.61075649,  -0.49995882, -0.35188955, -0.16048453,  0.08038877,   0.37665556], [ 1.40955495,  1.25966123,  1.11534851,  0.97803396,   0.84915643,  0.73016378,  0.62245832,  0.52717022,   0.44443063,  0.37800663,  0.33277993,  0.31173738,   0.31796502,  0.34760721,  0.39430015,  0.46279835,   0.55596605,  0.67594433,  0.82457773,  1.00355413,   1.21446111], [-1.63816899, -1.13379381, -0.76469554, -0.50913632,  -0.34469447, -0.2488656 , -0.20000075, -0.17739532,  -0.16020848, -0.16293321, -0.1807168 , -0.188792  ,  -0.16613623, -0.10986563, -0.02506668,  0.10425795,   0.2875215 ,  0.52979243,  0.83339101,  1.19947124,   1.62895113]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values), np.abs(expected_eigenfunctions_0))

        expected_eigenfunctions_1 = np.array([[ 1.07889954,  0.87856528,  0.69138574,  0.51778279,   0.35326749,  0.20086678,  0.06126839, -0.06648178,  -0.18337041, -0.29010705, -0.38853249, -0.47774184,  -0.55905679, -0.63258981, -0.68937686, -0.7283924 ,  -0.74954284, -0.75716153, -0.75426078, -0.74138362,  -0.71981621, -0.68806422, -0.64627425, -0.59056986,  -0.51956208, -0.43212162, -0.32729472, -0.204113  ,  -0.05743158,  0.11318293,  0.30527877], [ 1.40632543,  1.30900838,  1.21318286,  1.1170903 ,   1.02231065,  0.93151388,  0.84480926,  0.76301765,   0.68749245,  0.61858197,  0.55577185,  0.49974616,   0.44955828,  0.40489039,  0.36992746,  0.34662108,   0.33442704,  0.33305298,  0.34338019,  0.36065495,   0.38526949,  0.41779069,  0.45763281,  0.50774047,   0.56947992,  0.64356155,  0.730474  ,  0.82933441,   0.9414099 ,  1.06428358,  1.20047792], [-1.53252194, -1.20784282, -0.94672656, -0.74051003,  -0.57349766, -0.44507473, -0.34957294, -0.28174458,  -0.23692839, -0.20951561, -0.19313675, -0.18355922,  -0.17516008, -0.16841896, -0.17323338, -0.17432302,  -0.16753888, -0.15019214, -0.11084923, -0.06529661,  -0.01379834,  0.05094628,  0.12792814,  0.22372022,   0.34202154,  0.48633099,  0.6591913 ,  0.86048608,   1.09169615,  1.35095407,  1.63419689]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values), np.abs(expected_eigenfunctions_1))

        expected_eigenvectors = np.array([[-0.21933502, -0.37437924, -0.75586338], [-0.01017968, -0.54776564,  0.25906836], [-0.28839481,  0.53741539, -0.09435297], [-0.07213071, -0.20861088,  0.42212774], [-0.17693706, -0.24035354, -0.10503269], [-0.27071613,  0.13274718,  0.28343011], [ 0.59585341,  0.18649036, -0.26570323], [ 0.55252326, -0.00670955,  0.09978879], [ 0.1427463 ,  0.16006408, -0.04264377], [-0.27950031,  0.30269353, -0.02684826]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_with_2d(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 11), 'input_dim_1': np.linspace(0, 1, 11)})
        ]
        results = _fit_inner_product_multivariate( data=self.fdata_2d, points=points, n_components=0.95, smooth=True, noise_variance=np.array([0.02, 0]))
        
        expected_eigenvalues = np.array([0.10607683, 0.0895158 , 0.021504  ])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 1.24764089e+00,  8.49963663e-01,  5.00757046e-01,   1.94747077e-01, -7.35040843e-02, -3.09176772e-01,  -5.16575804e-01, -6.99182497e-01, -8.61015947e-01,  -9.90090750e-01, -1.07774783e+00, -1.12258242e+00,  -1.12068108e+00, -1.07980432e+00, -1.01421160e+00,  -9.15605280e-01, -7.77006047e-01, -5.91006015e-01,  -3.49541622e-01, -4.44368522e-02,  3.32213594e-01], [ 2.12026136e+00,  1.85268631e+00,  1.60184625e+00,   1.36848543e+00,  1.15334240e+00,  9.57213069e-01,   7.80997219e-01,  6.25397754e-01,  4.89732845e-01,   3.81099241e-01,  3.07312782e-01,  2.72321483e-01,   2.80674932e-01,  3.25993024e-01,  3.97545492e-01,   5.02850521e-01,  6.46794435e-01,  8.33435616e-01,   1.06658509e+00,  1.34987942e+00,  1.68677882e+00], [-2.19578834e+00, -1.50091292e+00, -9.95287338e-01,  -6.48045173e-01, -4.27358457e-01, -3.01331396e-01,  -2.39401676e-01, -2.12540747e-01, -1.91833773e-01,  -1.97548015e-01, -2.22790724e-01, -2.33213041e-01,  -1.99941410e-01, -1.19186673e-01,  2.28494768e-03,   1.86421313e-01,  4.45777867e-01,  7.86681257e-01,   1.21151127e+00,  1.72099111e+00,  2.31553547e+00]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values), np.abs(expected_eigenfunctions))

        expected_eigenfunctions = np.array([[[ 1.67215192e-01,  5.14142973e-01,  6.60404116e-01,    5.50525924e-01,  3.01393340e-01,  5.78118125e-02,   -8.75646180e-02, -1.23785207e-01, -9.20506156e-02,   -3.75166884e-02,  1.11785208e-02],  [ 4.16198488e-02,  8.30870340e-02,  2.50286516e-02,   -1.21456235e-01, -2.84604361e-01, -3.87888653e-01,   -3.88407990e-01, -3.01652445e-01, -1.76738046e-01,   -6.39039431e-02,  1.09808483e-02],  [ 1.17117622e-02, -1.47245209e-01, -3.11536217e-01,   -4.62987396e-01, -5.66086331e-01, -5.86578220e-01,   -5.12073170e-01, -3.69303100e-01, -2.06864846e-01,   -7.26047087e-02,  1.17481236e-02],  [ 3.09350533e-03, -1.87274804e-01, -3.56312785e-01,   -4.87470869e-01, -5.60099890e-01, -5.55861297e-01,   -4.72235321e-01, -3.34965713e-01, -1.85615002e-01,   -6.46434402e-02,  1.03010640e-02],  [ 2.06143036e-03, -1.15767813e-01, -2.30573019e-01,   -3.28214300e-01, -3.89048702e-01, -3.94784955e-01,   -3.40219356e-01, -2.43442025e-01, -1.35630650e-01,   -4.73908205e-02,  7.40614279e-03],  [ 3.60513470e-03, -2.02257551e-02, -6.92732606e-02,   -1.32218523e-01, -1.86834302e-01, -2.10805514e-01,   -1.93195893e-01, -1.43241391e-01, -8.15567782e-02,   -2.88946477e-02,  4.36408020e-03],  [ 5.42534862e-03,  3.98557124e-02,  3.55128706e-02,   -3.32237449e-05, -4.53189243e-02, -7.78871922e-02,   -8.44459966e-02, -6.79464185e-02, -4.05045472e-02,   -1.47644269e-02,  2.15349332e-03],  [ 5.28575099e-03,  5.38326062e-02,  6.72896156e-02,    4.99043243e-02,  1.81066038e-02, -1.05412255e-02,   -2.47803759e-02, -2.45475588e-02, -1.60830181e-02,   -6.17908866e-03,  8.53770680e-04],  [ 3.66115351e-03,  3.90668021e-02,  5.24439377e-02,    4.56079983e-02,  2.80907551e-02,  1.02132523e-02,   -1.12018419e-03, -5.10851585e-03, -4.36742253e-03,   -1.87927057e-03,  2.22197832e-04],  [ 1.00097926e-03,  1.58045216e-02,  2.19381962e-02,    2.02159369e-02,  1.41272633e-02,  7.41020707e-03,    2.63532370e-03,  2.58624895e-04, -4.31354119e-04,   -2.79617287e-04,  3.70732449e-05],  [-3.61475023e-03, -3.01520734e-03, -3.63622002e-03,   -3.26594140e-03, -2.21613830e-03, -1.09191851e-03,   -3.44866217e-04,  5.37774527e-06,  9.26961768e-05,    5.14916722e-05,  2.11804806e-05]], [[ 1.61759150e-01,  8.84205629e-01,  1.34679446e+00,    1.46929285e+00,  1.33730443e+00,  1.07155461e+00,    7.67850035e-01,  4.82456025e-01,  2.46719162e-01,    8.38131508e-02, -4.70246327e-03],  [ 4.99473505e-02,  4.92489737e-01,  7.56109445e-01,    8.23124974e-01,  7.49078608e-01,  6.00481340e-01,    4.30785947e-01,  2.70610781e-01,  1.37515978e-01,    4.52776768e-02, -6.12197630e-03],  [ 2.59482970e-02,  2.82333485e-01,  4.27731049e-01,    4.56570092e-01,  4.05241166e-01,  3.15496335e-01,    2.19976849e-01,  1.34803972e-01,  6.69881523e-02,    2.14228843e-02, -3.05140307e-03],  [ 2.18798080e-02,  2.40238984e-01,  3.51957236e-01,    3.57092292e-01,  2.94709060e-01,  2.08515157e-01,    1.30553191e-01,  7.20248363e-02,  3.24667568e-02,    9.48354868e-03, -1.29206242e-03],  [ 2.36193912e-02,  2.84705780e-01,  4.08994118e-01,    4.01436616e-01,  3.14222022e-01,  2.05018298e-01,    1.14849494e-01,  5.52699541e-02,  2.11901104e-02,    5.09201011e-03, -7.08992177e-04],  [ 2.51884321e-02,  3.26454484e-01,  4.66886338e-01,    4.54414863e-01,  3.50632233e-01,  2.23366414e-01,    1.20536260e-01,  5.49369386e-02,  1.94545031e-02,    4.12511911e-03, -6.39065588e-04],  [ 2.42334753e-02,  3.09192607e-01,  4.41709976e-01,    4.29195669e-01,  3.30248426e-01,  2.09383322e-01,    1.12135216e-01,  5.05169056e-02,  1.75609697e-02,    3.60247493e-03, -5.71861387e-04],  [ 1.91814517e-02,  2.34047209e-01,  3.34083229e-01,    3.24383080e-01,  2.49319849e-01,  1.57775064e-01,    8.42516167e-02,  3.77864621e-02,  1.30379205e-02,    2.63719307e-03, -4.14954214e-04],  [ 1.20844516e-02,  1.35132250e-01,  1.92655729e-01,    1.86937973e-01,  1.43552301e-01,  9.07108402e-02,    4.83419407e-02,  2.16157176e-02,  7.41851055e-03,    1.48513781e-03, -2.28624189e-04],  [ 2.97907986e-03,  4.82441123e-02,  6.89699880e-02,    6.68549411e-02,  5.12797282e-02,  3.23450919e-02,    1.72015909e-02,  7.66898396e-03,  2.61684595e-03,    5.09764996e-04, -8.67305747e-05],  [-1.04013772e-02, -9.11680442e-03, -1.13658484e-02,   -1.07643198e-02, -8.06648486e-03, -4.90470567e-03,   -2.52468420e-03, -1.07806788e-03, -3.29844170e-04,   -7.54609662e-05, -4.02163083e-05]], [[-1.84342772e-01, -1.11381687e+00, -1.36705078e+00,   -9.79667705e-01, -2.88116391e-01,  3.24683947e-01,    6.22165509e-01,  5.97366257e-01,  3.89675569e-01,    1.56279963e-01, -5.50430152e-03],  [-1.06523024e-01, -8.92469647e-01, -1.15787522e+00,   -9.39568745e-01, -4.79007805e-01, -3.88377698e-02,    2.10253570e-01,  2.56757635e-01,  1.81123425e-01,    7.32509899e-02, -9.10450251e-03],  [-5.60282123e-02, -5.83859955e-01, -7.91665365e-01,   -7.02459538e-01, -4.53195615e-01, -1.92623182e-01,   -2.10237250e-02,  4.79203524e-02,  4.89947480e-02,    2.23402873e-02, -2.73870062e-03],  [-2.25917156e-02, -2.40478557e-01, -3.39251922e-01,   -3.23719148e-01, -2.41484492e-01, -1.44887089e-01,   -7.06062894e-02, -2.69926611e-02, -6.73698711e-03,   -4.41138569e-04,  5.39998096e-04],  [ 3.23208298e-03,  6.61323857e-02,  8.66717473e-02,    7.08210736e-02,  3.68026712e-02,  4.10848028e-03,   -1.46228185e-02, -1.84073471e-02, -1.31144867e-02,   -5.30062545e-03,  1.02756418e-03],  [ 1.88723795e-02,  2.68419321e-01,  3.76157358e-01,    3.52956254e-01,  2.55025199e-01,  1.43697495e-01,    6.12473727e-02,  1.65800283e-02, -4.58410050e-04,   -2.48345729e-03,  3.74403449e-04],  [ 2.49965000e-02,  3.32118517e-01,  4.70141352e-01,    4.49468952e-01,  3.36152843e-01,  2.02595491e-01,    9.93172755e-02,  3.83119862e-02,  9.69132512e-03,    6.01434927e-04, -1.43828316e-04],  [ 2.23719101e-02,  2.81030606e-01,  3.99237065e-01,    3.84342209e-01,  2.91040378e-01,  1.79430278e-01,    9.16685316e-02,  3.82014860e-02,  1.15334031e-02,    1.69961393e-03, -2.97382912e-04],  [ 1.50042054e-02,  1.72246041e-01,  2.44942561e-01,    2.36546501e-01,  1.80153008e-01,  1.12211233e-01,    5.83750893e-02,  2.51002747e-02,  8.04724939e-03,    1.39299541e-03, -2.31262197e-04],  [ 3.85554567e-03,  6.38131747e-02,  9.11011774e-02,    8.80858167e-02,  6.72685110e-02,  4.21072104e-02,    2.21099285e-02,  9.65802800e-03,  3.18293505e-03,    5.77782619e-04, -1.01071096e-04],  [-1.39918152e-02, -1.20912683e-02, -1.50267897e-02,   -1.41893124e-02, -1.05799183e-02, -6.37453774e-03,   -3.23250031e-03, -1.34618109e-03, -3.91354407e-04,   -8.32467839e-05, -4.66468122e-05]]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.17525454, -0.38914961, -0.75116895],[ 0.06483239, -0.55178677,  0.25166358],[-0.35534836,  0.49722163, -0.07620013],[-0.04554509, -0.22914034,  0.43769575],[-0.14828248, -0.24555842, -0.12635742],[-0.28459352,  0.09834559,  0.28051597],[ 0.56429909,  0.26811569, -0.26416144],[ 0.54958109,  0.06389054,  0.09736687],[ 0.12353642,  0.17164796, -0.02900261],[-0.31308235,  0.26259752, -0.01638537]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))


class TestTransformNumericalIntegrationDense(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise(0.05)
        self.fdata_uni = kl.noisy_data

        uf = UFPCA(n_components=2, method='covariance')
        uf.fit(self.fdata_uni)
        self.uf_eigen = uf.eigenfunctions

    def test_numerical_integration(self):
        scores_dense = _transform_numerical_integration_dense(self.fdata_uni, self.uf_eigen)
        expected_scores = np.array([[ 0.23185638,  0.27092884],[ 0.02684859,  0.41977244],[ 0.35129452, -0.57867029],[ 0.04697217,  0.06655563],[ 0.20541785,  0.12994119],[ 0.2936377 , -0.18557023],[-0.59218129, -0.25986862],[-0.55898506, -0.14784151],[-0.09181077, -0.19276825],[ 0.323464  , -0.3623928 ]])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_numerical_integration_2d(self):
        kl = KarhunenLoeve(basis_name='bsplines', n_functions=5, argvals=np.linspace(0, 1, 10), dimension='2D', random_state=42)
        kl.new(n_obs=10)
        fdata = kl.data

        uf = UFPCA(n_components=2, method='inner-product')
        uf.fit(fdata)

        scores = _transform_numerical_integration_dense(fdata, uf.eigenfunctions)
        expected_scores = np.array([[-0.02274272, -0.01767752],[-0.14201805, -0.03527876],[ 0.20025465,  0.01227318],[-0.0490446 , -0.04197494],[ 0.00975116, -0.01904456],[ 0.08457573, -0.02113259],[ 0.04962573,  0.0915368 ],[-0.01979976,  0.0609952 ],[ 0.04741364,  0.03495292],[ 0.12644882,  0.00416015]])

        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))


class TestTransformNumericalIntegrationIrregular(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise(0.05)
        kl.sparsify(0.95, 0.01)

        self.fdata_sparse = kl.sparse_data

        uf = UFPCA(n_components=0.95, method='covariance')
        uf.fit(self.fdata_sparse)
        self.uf_eigen = uf.eigenfunctions

    def test_numerical_integration(self):
        scores_sparse = _transform_numerical_integration_irregular(self.fdata_sparse, self.uf_eigen)
        expected_scores = np.array([[ 0.22203175,  0.17646635,  0.20582599],[ 0.08804525,  0.411517  , -0.0441252 ],[ 0.13957335, -0.67481938,  0.03599057],[ 0.08157136,  0.08586396, -0.18263835],[ 0.17731011,  0.07096538,  0.00388039],[ 0.19391082, -0.27504909, -0.09204208],[-0.4688101 , -0.15005271,  0.24150274],[-0.39397066,  0.05064411,  0.08163727],[-0.13128561, -0.22303583,  0.11581405],[ 0.16903147, -0.45101713,  0.05664777]])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))


class TestTransformPACE(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise_and_sparsify(0.05, 0.9, 0.05)
        self.fdata_uni = kl.noisy_data
        self.fdata_sparse = kl.sparse_data

        uf_dense = UFPCA(n_components=2, method='covariance')
        uf_dense.fit(self.fdata_uni)
        self.uf_dense = uf_dense

        uf_sparse = UFPCA(n_components=2, method='covariance')
        uf_sparse.fit(self.fdata_sparse)
        self.uf_sparse = uf_sparse

    def test_pace_dense(self):
        scores_dense = scores_dense = _transform_pace_dense(
            self.fdata_uni, self.uf_dense.eigenfunctions, self.uf_dense.eigenvalues,
            self.uf_dense.covariance, self.uf_dense._noise_variance
        )
        expected_scores = np.array([[ 0.2250209 ,  0.26640435], [ 0.03071671,  0.42263802], [ 0.34750068, -0.57693324], [ 0.04796388,  0.06556203], [ 0.20086595,  0.12434758], [ 0.29359884, -0.18454036], [-0.5901051 , -0.25663729], [-0.55689136, -0.14721497], [-0.08779404, -0.18558396], [ 0.32294073, -0.35842484]])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_pace_irregular(self):
        scores_sparse = _transform_pace_irregular(
            self.fdata_sparse, self.uf_sparse.eigenfunctions,
            self.uf_sparse.eigenvalues, self.uf_sparse.covariance,
            self.uf_sparse._noise_variance
        )
        expected_scores = np.array([[ 0.21468274,  0.17152223],[ 0.08052812,  0.42301138],[ 0.29872919, -0.62039464],[ 0.05720657,  0.0820881 ],[ 0.22212744,  0.12684133],[ 0.26609097, -0.20669733],[-0.62263044, -0.21029513],[-0.56512957, -0.10453311],[-0.10389419, -0.1884054 ],[ 0.28613813, -0.39222563]])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))


class TestTransformInnPro(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise_and_sparsify(0.05, 0.9, 0.05)
        self.fdata_uni = kl.noisy_data
        self.fdata_sparse = kl.sparse_data

        uf_dense = UFPCA(n_components=2, method='inner-product')
        uf_dense.fit(self.fdata_uni)
        self.uf_dense = uf_dense

        uf_sparse = UFPCA(n_components=2, method='inner-product')
        uf_sparse.fit(self.fdata_sparse)
        self.uf_sparse = uf_sparse

    def test_pace_dense(self):
        scores_dense = scores_dense = _transform_innpro(
            self.fdata_uni, self.uf_dense._eigenvectors, self.uf_dense.eigenvalues
        )
        expected_scores = np.array([[-0.20008122, -0.35917685],[-0.0060345 , -0.50948171],[-0.32688088,  0.49534243],[-0.02326554, -0.15936427],[-0.17266196, -0.21488918],[-0.28291378,  0.09745108],[ 0.6209799 ,  0.17771336],[ 0.57871673,  0.05379105],[ 0.11103202,  0.1062688 ],[-0.29411576,  0.27046191]])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_pace_irregular(self):
        scores_sparse = _transform_innpro(
            self.fdata_sparse, self.uf_sparse._eigenvectors, self.uf_sparse.eigenvalues
        )
        expected_scores = np.array([[-0.20302867, -0.36076181],[-0.03589738, -0.51099149],[-0.30730618,  0.53774483],[-0.03362226, -0.14896928],[-0.20057172, -0.22435715],[-0.26726809,  0.10645834],[ 0.62510127,  0.15013469],[ 0.57992695,  0.0435626 ],[ 0.10344107,  0.10811265],[-0.29378279,  0.26613948]])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))

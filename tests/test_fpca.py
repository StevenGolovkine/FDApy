#!/usr/bin/python3
# -*-coding:utf8 -*
"""Module that contains unit tests for the functions of the fpca.py file.

Written with the help of ChatGPT.

"""
import numpy as np
import unittest

from FDApy.simulation.karhunen import KarhunenLoeve
from FDApy.representation.functional_data import MultivariateFunctionalData
from FDApy.preprocessing.dim_reduction.fpca import (
    _compute_inner_product
)


class TestComputeInnerProduct(unittest.TestCase):
    def setUp(self):
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=100)
        kl.sparsify(0.8, 0.05)

        self.fdata_uni = kl.data
        self.fdata_sparse = kl.sparse_data
        self.fdata = MultivariateFunctionalData([self.fdata_uni, self.fdata_sparse])

    def test_compute_inner_product_dense(self):
        exp_eigenvalues = np.array([24.67371729, 11.34721232,  5.2634668 ])
        exp_eigenvectors = np.array([[-7.41360603e-03, -4.95984050e-03, -1.79380226e-01],[ 4.35096747e-02, -4.45448974e-02, -1.31343633e-01],[-1.19800499e-01,  5.85535701e-02,  8.86015448e-02],[-7.51666921e-03, -6.90708335e-02, -7.04452390e-03],[-1.82323647e-02, -1.67993488e-02, -1.01754478e-01],[-7.47276785e-02, -2.96076324e-03,  1.27519504e-03],[ 6.30194304e-02,  9.22698522e-02,  1.93347798e-01],[ 7.56631212e-02,  4.59293882e-02,  1.54136821e-01],[-7.16229799e-03,  5.92522278e-02,  8.17521630e-02],[-9.10468793e-02,  5.69557095e-02,  9.22754059e-03],[ 8.34338242e-02,  6.06074603e-02,  4.04471032e-02],[-3.98181574e-02, -3.47631663e-02, -2.28582437e-02],[-3.70939171e-02, -1.64106290e-01, -3.92160975e-02],[-1.18986034e-02, -7.50835965e-03,  5.15143842e-02],[ 7.16469371e-02, -1.96647030e-01, -1.58427200e-02],[-2.53020130e-02,  4.21817787e-03,  7.20111324e-03],[ 9.67464512e-02,  2.51830309e-02, -6.04180137e-02],[-2.48321028e-02, -3.52740200e-02,  6.62932777e-02],[ 7.04070765e-02,  8.47021889e-02, -8.73665521e-02],[ 1.17136871e-01, -1.82998619e-01, -1.11203468e-01],[-5.06147360e-02,  7.36907800e-02, -8.33615618e-02],[ 5.23926635e-02, -5.47234055e-02, -1.40234528e-01],[ 1.04173808e-01,  7.43484007e-02,  5.30653641e-02],[-9.61790561e-02, -5.62587069e-02, -4.67417820e-02],[-1.14499220e-01, -1.14990563e-01,  7.44019361e-03],[ 6.51890805e-02,  1.55987508e-01, -8.04609115e-03],[ 7.40367517e-02, -5.29844054e-02, -1.75197917e-01],[-2.44607504e-01, -1.84191469e-01,  1.58525710e-01],[ 1.59046868e-01, -6.93755920e-02,  5.13420438e-02],[-3.20612161e-02, -1.10737328e-01, -2.45851936e-04],[ 1.65129751e-01, -1.00290364e-01,  6.12175121e-02],[-1.11751783e-02,  1.90379564e-01, -4.74691085e-02],[-5.35400178e-02, -7.13123374e-02, -8.02449112e-02],[-4.24867158e-02,  2.77015783e-02, -7.23582576e-02],[ 1.16554131e-01,  6.69029685e-02, -1.28514867e-01],[-7.40552659e-02,  1.21812978e-01,  2.54273481e-02],[-7.16314338e-02,  3.60749675e-02,  1.30945155e-01],[ 8.89005395e-02,  6.67956267e-02,  2.77588831e-01],[-4.18565674e-02,  7.42356863e-02,  2.36943922e-02],[ 6.01953409e-03, -8.54811705e-03, -4.66635506e-02],[-5.03407490e-02,  1.74254790e-01, -1.58681721e-01],[ 1.61999015e-01, -4.89016936e-02,  2.18239376e-02],[ 8.30096077e-02, -1.46105675e-02,  2.15556964e-02],[-7.49699258e-02,  1.53734223e-01, -6.39875234e-02],[ 4.41087576e-02,  3.86611216e-02, -1.59054269e-02],[-1.48408313e-01,  2.69651550e-01, -1.00057045e-01],[-3.67977299e-02, -1.36499329e-01, -1.54438617e-01],[ 1.76759031e-01, -1.46264148e-01, -7.58500954e-02],[ 1.39149484e-01, -1.20709403e-01,  2.07111254e-01],[-1.90674315e-01, -1.70992977e-01, -2.45670544e-01],[-4.13759237e-02,  7.62032156e-02, -1.22161970e-01],[ 4.07674938e-02,  1.21908383e-01, -5.71414244e-02],[ 2.06346976e-02, -2.77233616e-02,  1.49767210e-02],[-3.54845247e-02,  7.67649711e-02,  4.09185619e-02],[-1.67015956e-01, -1.41742903e-01,  1.03321290e-01],[ 1.19195976e-02, -1.00642816e-01,  9.77414447e-02],[ 1.77481917e-02, -5.58032831e-02, -1.06908644e-01],[ 9.56889046e-03,  4.82905433e-03, -3.85270592e-02],[ 7.32590504e-02,  1.13677394e-01, -1.07571656e-01],[ 1.03289662e-01,  6.85374481e-02,  4.95025895e-02],[ 2.42766748e-02,  2.09305665e-02,  5.27101336e-02],[-1.29442967e-01, -1.39288847e-01,  3.17167951e-02],[-1.68417864e-01,  9.38584029e-02,  5.87948595e-02],[ 8.69921840e-03, -1.70361618e-02, -8.27701692e-02],[-1.52631638e-01, -3.05010469e-02,  1.48124488e-01],[ 1.45246644e-01, -1.72027476e-02, -2.35332795e-03],[ 6.18991261e-02,  1.53140793e-01,  1.15635875e-01],[-6.59801928e-02, -1.72155127e-01, -2.67654430e-02],[-6.67046222e-02, -1.81460069e-01,  6.88675718e-03],[ 6.16695221e-02, -1.55170109e-01, -2.05048128e-02],[-8.08818364e-02,  9.79699732e-03,  1.38854586e-01],[ 2.91713057e-02,  6.83421323e-02, -1.41881638e-02],[-3.30379881e-03,  7.58825691e-02, -6.72930991e-02],[ 3.18950398e-02, -1.73088313e-02,  1.92763065e-01],[-1.64977169e-01,  6.83738627e-02,  1.06699506e-02],[ 1.90974596e-02,  4.96929412e-02,  1.86026096e-01],[ 1.49256756e-01,  1.64331088e-01, -6.23404530e-02],[-2.17939199e-02,  3.48472125e-02, -1.87711268e-01],[-6.08863028e-03, -1.81354652e-01, -4.71708661e-02],[-5.78479454e-02,  7.54512211e-02, -6.15409275e-02],[-4.16485183e-02,  1.41150071e-02, -3.84790337e-03],[ 1.12360770e-01,  9.91155960e-02, -1.67839423e-01],[ 1.04238351e-01, -2.84465328e-01, -7.31263522e-02],[-1.48547192e-01,  7.24122325e-02,  6.55703865e-02],[ 1.76429138e-01,  1.01296045e-02, -4.71507276e-02],[-5.24382478e-02,  1.00618675e-01, -6.83457482e-02],[ 8.00825102e-02, -4.52359812e-03,  2.12751997e-02],[ 1.12331683e-01, -8.98925319e-02,  4.91984131e-02],[-1.01656848e-01, -9.99316564e-03, -5.26215837e-02],[-9.11518082e-02, -6.51770099e-02, -3.27913040e-02],[-2.45466582e-01, -1.18172062e-02, -8.37414937e-02],[-1.73507095e-02,  6.14161733e-02,  4.50264124e-02],[ 2.70425737e-01,  3.05767235e-02, -1.10909822e-02],[-1.32650403e-01, -1.21588861e-02, -1.91423784e-01],[ 3.02527064e-03, -4.15321592e-02,  8.56843697e-02],[-4.45291881e-02, -5.50242128e-02,  2.52629664e-01],[-9.75759887e-02,  1.02724531e-01,  4.20653623e-03],[ 4.27464996e-02, -5.43880579e-02,  2.58801656e-02],[-2.54671854e-02,  8.19109082e-02,  4.83843146e-02],[ 2.42594186e-01,  3.02151291e-02, -6.39516875e-02]])

        eigenvalues, eigenvectors = _compute_inner_product(self.fdata_uni, n_components=0.9)
        np.testing.assert_array_almost_equal(eigenvalues, exp_eigenvalues)
        np.testing.assert_array_almost_equal(np.abs(eigenvectors), np.abs(exp_eigenvectors))

    def test_compute_inner_product_irregular(self):
        exp_eigenvalues = np.array([24.65153953, 11.38501976,  5.23453796])
        exp_eigenvectors = np.array([[-7.80257122e-03, -5.81984931e-03, -1.73339802e-01],[ 4.31770394e-02, -4.68214248e-02, -1.32729718e-01],[-1.19671257e-01,  5.96653973e-02,  8.99980586e-02],[-7.51774097e-03, -6.97498464e-02, -6.79533556e-03],[-1.83687028e-02, -1.71227821e-02, -1.00875648e-01],[-7.46854946e-02, -3.19127053e-03,  9.97607705e-05],[ 6.32828839e-02,  9.49449631e-02,  1.95134848e-01],[ 7.56829872e-02,  4.76092227e-02,  1.55729935e-01],[-6.98202970e-03,  5.99764312e-02,  8.24145351e-02],[-9.10666354e-02,  5.69241185e-02,  8.63050130e-03],[ 8.34968880e-02,  6.05481690e-02,  3.97218010e-02],[-3.98958309e-02, -3.48597867e-02, -2.56146264e-02],[-3.71076899e-02, -1.65054190e-01, -4.04903668e-02],[-1.19285564e-02, -6.00355515e-03,  5.62852609e-02],[ 7.15377069e-02, -1.96779820e-01, -1.36416937e-02],[-2.53753405e-02,  4.85917919e-03,  1.09791461e-02],[ 9.64749949e-02,  2.43231480e-02, -5.86088610e-02],[-2.47436089e-02, -3.45041938e-02,  6.82513625e-02],[ 7.02411819e-02,  8.40538597e-02, -8.47686173e-02],[ 1.17036599e-01, -1.83842424e-01, -1.08727298e-01],[-5.08668978e-02,  7.28463633e-02, -8.28237963e-02],[ 5.22960827e-02, -5.54429768e-02, -1.36001514e-01],[ 1.04418737e-01,  7.42373883e-02,  4.99332240e-02],[-9.62672540e-02, -5.66002544e-02, -4.35119168e-02],[-1.14602294e-01, -1.15400160e-01,  7.57880377e-03],[ 6.53960421e-02,  1.55241380e-01, -1.11586655e-02],[ 7.34966181e-02, -5.43477194e-02, -1.71679891e-01],[-2.44338784e-01, -1.82500524e-01,  1.59090088e-01],[ 1.59245208e-01, -6.92592417e-02,  5.59730945e-02],[-3.20075297e-02, -1.10164011e-01,  2.01156883e-03],[ 1.65280683e-01, -9.97657041e-02,  6.29819421e-02],[-1.12773453e-02,  1.90540462e-01, -4.60133501e-02],[-5.37318859e-02, -7.17198016e-02, -8.41966378e-02],[-4.26280234e-02,  2.65553812e-02, -7.58290522e-02],[ 1.16303202e-01,  6.48051067e-02, -1.32449504e-01],[-7.41105486e-02,  1.21459979e-01,  2.10069275e-02],[-7.13975819e-02,  3.77697499e-02,  1.34490740e-01],[ 8.98669651e-02,  6.96513842e-02,  2.73424588e-01],[-4.17908882e-02,  7.48107770e-02,  3.00644141e-02],[ 5.87786384e-03, -9.83036655e-03, -4.92831925e-02],[-5.05698267e-02,  1.72431972e-01, -1.57062849e-01],[ 1.62013631e-01, -4.92100624e-02,  2.26737466e-02],[ 8.31723543e-02, -1.44110381e-02,  2.43496084e-02],[-7.50602188e-02,  1.53310366e-01, -6.41560028e-02],[ 4.40780235e-02,  3.83546811e-02, -1.95276175e-02],[-1.48221624e-01,  2.68753795e-01, -1.06582429e-01],[-3.72293157e-02, -1.38599093e-01, -1.51025324e-01],[ 1.76383461e-01, -1.45932369e-01, -7.35522994e-02],[ 1.39451054e-01, -1.19791271e-01,  2.03114109e-01],[-1.91448652e-01, -1.72904331e-01, -2.37713457e-01],[-4.16933138e-02,  7.48187004e-02, -1.26322981e-01],[ 4.05034325e-02,  1.21425105e-01, -5.59392869e-02],[ 2.04513646e-02, -2.79462223e-02,  1.45477827e-02],[-3.54971184e-02,  7.54091976e-02,  3.90690518e-02],[-1.66936396e-01, -1.40607000e-01,  1.05297468e-01],[ 1.18124113e-02, -9.94593168e-02,  1.02675246e-01],[ 1.79127151e-02, -5.64028716e-02, -1.02030327e-01],[ 9.55475727e-03,  4.26241204e-03, -4.02564249e-02],[ 7.31453290e-02,  1.12440572e-01, -1.16708455e-01],[ 1.03983933e-01,  6.96198162e-02,  3.97662032e-02],[ 2.43184481e-02,  2.26387289e-02,  5.76753451e-02],[-1.28987717e-01, -1.38844719e-01,  3.02195890e-02],[-1.68416533e-01,  9.48581733e-02,  5.94694526e-02],[ 8.42687995e-03, -1.79308134e-02, -8.00204832e-02],[-1.52229946e-01, -2.84758691e-02,  1.48352146e-01],[ 1.45083653e-01, -1.61059451e-02,  6.70175389e-04],[ 6.20524771e-02,  1.54156982e-01,  1.14255592e-01],[-6.60885634e-02, -1.72319579e-01, -2.47679649e-02],[-6.67936450e-02, -1.82416849e-01,  4.70104850e-03],[ 6.19643751e-02, -1.55351484e-01, -2.78984727e-02],[-8.06424400e-02,  1.08999448e-02,  1.38805475e-01],[ 2.92345860e-02,  6.81482190e-02, -1.67387859e-02],[-3.07952599e-03,  7.52788565e-02, -7.10102314e-02],[ 3.20439038e-02, -1.40173762e-02,  1.98422999e-01],[-1.64901680e-01,  6.81254573e-02,  8.76260203e-03],[ 1.92355570e-02,  5.34944915e-02,  1.94861304e-01],[ 1.48783042e-01,  1.63337896e-01, -6.59091265e-02],[-2.21804417e-02,  3.29469529e-02, -1.88153995e-01],[-6.31629764e-03, -1.82296019e-01, -4.97426988e-02],[-5.79616504e-02,  7.47052242e-02, -6.03349647e-02],[-4.14695742e-02,  1.39401886e-02, -6.45549479e-03],[ 1.12069124e-01,  9.72221691e-02, -1.72378599e-01],[ 1.03737193e-01, -2.84856447e-01, -6.82683516e-02],[-1.48234709e-01,  7.33155458e-02,  6.14213474e-02],[ 1.76379259e-01,  9.77760032e-03, -4.77140163e-02],[-5.27858046e-02,  9.90983866e-02, -7.39675328e-02],[ 8.05905216e-02, -4.30383410e-03,  1.36965168e-02],[ 1.12283365e-01, -8.98947433e-02,  4.88477809e-02],[-1.01523694e-01, -9.83571136e-03, -5.16154723e-02],[-9.13602985e-02, -6.60410757e-02, -3.48824830e-02],[-2.45857189e-01, -1.22098991e-02, -8.13225191e-02],[-1.73674188e-02,  6.13864184e-02,  4.37921583e-02],[ 2.70351520e-01,  2.97527564e-02, -1.22632094e-02],[-1.32702989e-01, -1.35851413e-02, -1.89449743e-01],[ 3.16551876e-03, -4.06404465e-02,  8.74771671e-02],[-4.43402194e-02, -5.36015623e-02,  2.48859202e-01],[-9.75910766e-02,  1.02749595e-01,  2.87635428e-03],[ 4.27498375e-02, -5.41245157e-02,  2.46514974e-02],[-2.55348746e-02,  8.28354952e-02,  5.08289100e-02],[ 2.42505390e-01,  3.00910034e-02, -6.21315923e-02]])

        eigenvalues, eigenvectors = _compute_inner_product(self.fdata_sparse, n_components=0.9)
        np.testing.assert_array_almost_equal(eigenvalues, exp_eigenvalues)
        np.testing.assert_array_almost_equal(np.abs(eigenvectors), np.abs(exp_eigenvectors))

    def test_compute_inner_product_multivariate(self):
        exp_eigenvalues = np.array([49.32518591, 22.73175791, 10.49713762])
        exp_eigenvectors = np.array([[-0.00760851, -0.00539743, -0.17641022],[ 0.04334351, -0.04568542, -0.13204725],[-0.11973612,  0.05911039,  0.08930736],[-0.00751701, -0.06941148, -0.00691513],[-0.01830064, -0.01696376, -0.10133473],[-0.07470658, -0.00307584,  0.00069212],[ 0.06315101,  0.09361158,  0.19425596],[ 0.07567297,  0.04677135,  0.15495282],[-0.00707234,  0.05961596,  0.08209346],[-0.09105694,  0.05694078,  0.00893477],[ 0.08346528,  0.06058001,  0.04009448],[-0.0398568 , -0.03481131, -0.02423759],[-0.03710028, -0.16458174, -0.03984566],[-0.01191376, -0.00675837,  0.05388891],[ 0.07159287, -0.19671669, -0.01474529],[-0.02533888,  0.00453607,  0.0090758 ],[ 0.09661065,  0.02475141, -0.05953377],[-0.02478778, -0.03488913,  0.06727874],[ 0.07032368,  0.08437596, -0.08608486],[ 0.11708716, -0.18342498, -0.1099835 ],[-0.05074126,  0.07326644, -0.08309756],[ 0.05234423, -0.05508812, -0.1381472 ],[ 0.10429629,  0.07429711,  0.05151319],[-0.09622328, -0.05643417, -0.04514101],[-0.11455043, -0.11519711,  0.00751623],[ 0.06529221,  0.15561817, -0.009593  ],[ 0.07376663, -0.05367264, -0.17348423],[-0.24447268, -0.18334626,  0.15884552],[ 0.15914618, -0.06931965,  0.05364772],[-0.03203413, -0.11045281,  0.0008754 ],[ 0.16520558, -0.10002792,  0.06210884],[-0.01122696,  0.1904598 , -0.04676555],[-0.05363556, -0.07151552, -0.08222729],[-0.04255738,  0.02712885, -0.0740955 ],[ 0.11642865,  0.06585532, -0.13048953],[-0.07408306,  0.12164073,  0.02323414],[-0.07151473,  0.03692264,  0.13272424],[ 0.089384  ,  0.06823438,  0.27555957],[-0.04182427,  0.07452053,  0.02686596],[ 0.00594884, -0.00918856, -0.04796626],[-0.0504562 ,  0.17333987, -0.15789203],[ 0.16200655, -0.04905578,  0.0222547 ],[ 0.08309099, -0.01451178,  0.0229412 ],[-0.07501565,  0.15352215, -0.06408588],[ 0.04409348,  0.03851067, -0.01771072],[-0.14831583,  0.26920644, -0.10331517],[-0.03701343, -0.13755686, -0.15275501],[ 0.17657167, -0.1461013 , -0.07471871],[ 0.13930105, -0.12024464,  0.20516872],[-0.19106158, -0.17196233, -0.24175927],[-0.04153475,  0.07551187, -0.12424922],[ 0.04063501,  0.12166621, -0.05655292],[ 0.02054317, -0.02783504,  0.01476808],[-0.03549079,  0.07609094,  0.04001191],[-0.16697585, -0.1411764 ,  0.10432837],[ 0.01186623, -0.10005304,  0.10021267],[ 0.01783033, -0.05610855, -0.104514  ],[ 0.00956185,  0.00454607, -0.03939198],[ 0.07320236,  0.1130653 , -0.11214423],[ 0.10363737,  0.0690899 ,  0.04463785],[ 0.02429733,  0.02178296,  0.0551762 ],[-0.12921497, -0.1390669 ,  0.0309823 ],[-0.16841758,  0.09435881,  0.0591343 ],[ 0.00856294, -0.01748715, -0.08141581],[-0.15243066, -0.02948597,  0.14825694],[ 0.14516514, -0.01665554, -0.00085403],[ 0.06197554,  0.15365407,  0.1149651 ],[-0.06603399, -0.17224145, -0.02577337],[-0.06674856, -0.18194056,  0.00581119],[ 0.06181778, -0.15525644, -0.02417588],[-0.08076211,  0.01035081,  0.1388538 ],[ 0.02920287,  0.06824758, -0.01546219],[-0.00319185,  0.07558263, -0.06915323],[ 0.0319694 , -0.01566369,  0.19559583],[-0.16493966,  0.06825075,  0.00972515],[ 0.01916609,  0.05159268,  0.19043834],[ 0.14901964,  0.16383814, -0.06411821],[-0.02198744,  0.03389366, -0.18795953],[-0.00620181, -0.18182617, -0.04844147],[-0.05790527,  0.07507611, -0.0609426 ],[-0.041559  ,  0.01402907, -0.00514957],[ 0.11221483,  0.09817029, -0.17012788],[ 0.10398854, -0.2846675 , -0.07071977],[-0.14839106,  0.07286826,  0.06351854],[ 0.17640428,  0.0099542 , -0.04744298],[-0.05261214,  0.09986081, -0.07114911],[ 0.08033688, -0.00440739,  0.01751142],[ 0.11230793, -0.08989306,  0.04903725],[-0.1015904 , -0.00991596, -0.05213155],[-0.09125583, -0.0656091 , -0.03381996],[-0.24566211, -0.01201824, -0.08255609],[-0.01735915,  0.06140354,  0.04442382],[ 0.27038879,  0.03016696, -0.01167705],[-0.13267704, -0.01287793, -0.19047596],[ 0.0030955 , -0.04108637,  0.08658929],[-0.04443413, -0.05430661,  0.25080243],[-0.09758387,  0.10273839,  0.00354723],[ 0.04274848, -0.05425523,  0.02526964],[-0.02550138,  0.08237331,  0.04960758],[ 0.24254974,  0.03015252, -0.06306598]])

        eigenvalues, eigenvectors = _compute_inner_product(self.fdata, n_components=0.9)
        np.testing.assert_array_almost_equal(eigenvalues, exp_eigenvalues)
        np.testing.assert_array_almost_equal(np.abs(eigenvectors), np.abs(exp_eigenvectors))

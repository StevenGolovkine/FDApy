#!/usr/bin/python3
# -*-coding:utf8 -*
"""Module that contains unit tests for the class UFPCA in the fpca.py file.

Written with the help of ChatGPT.

"""
import numpy as np
import pickle
import unittest
import warnings

from pathlib import Path

from FDApy.representation.argvals import DenseArgvals
from FDApy.representation.functional_data import MultivariateFunctionalData
from FDApy.preprocessing.dim_reduction.fpca import (
    UFPCA,
    MFPCA,
    _fit_covariance,
    _fit_covariance_multivariate,
    _fit_inner_product,
    _fit_inner_product_multivariate,
    _transform_numerical_integration_dense,
    _transform_numerical_integration_irregular,
    _transform_numerical_integration_multivariate,
    _transform_pace_dense,
    _transform_pace_irregular,
    _transform_innpro
)

THIS_DIR = Path(__file__)


class TestFitCovariance(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            self.fdata = pickle.load(handle)
        
        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_sparse = pickle.load(handle)

    def test_fit_covariance_dense(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata, points=points, n_components=3)

        expected_eigenvalues = np.array([0.36308978, 0.09898477, 0.02262269])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([
            [-0.63338702, -0.66326888, -0.70318031, -0.74930558,
             -0.7923172, -0.83086244, -0.87084969, -0.91272911,
             -0.95237211, -0.9869364, -1.02108391, -1.04859777,
             -1.07132089, -1.09103074, -1.10510199, -1.12176227,
             -1.13716215, -1.14824165, -1.15223902, -1.14147425,
             -1.12937276, -1.11777757, -1.10699507, -1.09059492,
             -1.06559542, -1.04053656, -1.01368802, -0.98660697,
             -0.95844386, -0.92215409, -0.87521249],
            [-1.48095652, -1.37092829, -1.31791289, -1.28165148,
             -1.23954932, -1.1942969, -1.1325484, -1.05908291,
             -0.98141005, -0.89809123, -0.81291059, -0.72498359,
             -0.62649799, -0.51356716, -0.37775963, -0.23377296,
             -0.09151644,  0.05424947,  0.20930234,  0.36632285,
             0.52497705,  0.68398301,  0.82400703,  0.95170772,
             1.07847338,  1.19507754,  1.29805054,  1.39409037,
             1.47502366,  1.52634416,  1.56515586],
            [1.9462178,  1.81357504,  1.60478805,  1.36190987,
             1.10719592,  0.83433885,  0.54284393,  0.24712517,
             -0.05288282, -0.32402036, -0.56437437, -0.76597844,
             -0.91470857, -1.02481277, -1.10240925, -1.15125475,
             -1.16739845, -1.11785404, -0.98600013, -0.78547893,
             -0.57005181, -0.37740797, -0.20332492, -0.02140877,
             0.21000388,  0.47114452,  0.7603799,  1.05759307,
             1.33536314,  1.59603654,  1.82452183]
        ])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_noise = 0.047010586311384626
        np.testing.assert_almost_equal(results['noise_variance_cov'], expected_noise)

    def test_fit_covariance_irregular(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata_sparse, points=points, n_components=3)

        expected_eigenvalues = np.array([0.3587555 , 0.09703086, 0.02275726])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([
            [-0.62472211, -0.61206158, -0.65319927, -0.71591792,
             -0.79030789, -0.86374257, -0.9193129, -0.94979499,
             -0.96478497, -0.98449269, -1.01326267, -1.05603057,
             -1.08919469, -1.10043627, -1.09764452, -1.10200622,
             -1.11712204, -1.13323158, -1.14637868, -1.15374696,
             -1.15393056, -1.15308271, -1.13992301, -1.09916712,
             -1.0472834, -1.000604, -0.96289597, -0.94021664,
             -0.93945538, -0.95060283, -0.97264241],
            [-1.33990344, -1.31535621, -1.31844823, -1.3076779,
             -1.27733068, -1.23569428, -1.18291042, -1.11176413,
             -1.0151153, -0.89974754, -0.78425214, -0.68011568,
             -0.60046341, -0.52396959, -0.42413379, -0.26543492,
             -0.09491872,  0.07020998,  0.23245272,  0.38815329,
             0.55015113,  0.72413462,  0.88731909,  1.01470436,
             1.10163375,  1.17512962,  1.25885518,  1.34854675,
             1.43437973,  1.50365658,  1.51531349],
            [2.13242634,  1.75521041,  1.52124289,  1.29812184,
             1.0907479,  0.87336333,  0.59898347,  0.28640281,
             -0.04766417, -0.37289617, -0.65366343, -0.83768785,
             -0.93495244, -0.99247711, -1.01726438, -1.02900587,
             -1.03126731, -1.00081174, -0.94747766, -0.85663855,
             -0.73360609, -0.57531903, -0.34033891, -0.02167752,
             0.31672193,  0.63947369,  0.91481049,  1.14630459,
             1.33733537,  1.54624408,  1.73680574]
        ])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_noise = 0.0
        np.testing.assert_almost_equal(results['noise_variance_cov'], expected_noise)


class TestFitCovarianceMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            fdata = pickle.load(handle)
    
        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            fdata_sparse = pickle.load(handle)

        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005_2D.pickle'
        with open(fname, 'rb') as handle:
            fdata_2D = pickle.load(handle)

        self.fdata_multi = MultivariateFunctionalData([fdata, fdata_sparse])
        self.fdata_multi_2d = MultivariateFunctionalData([fdata, fdata_2D])

    def test_fit_covariance_dense_and_sparse(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_covariance_multivariate(data=self.fdata_multi, points=points, n_components=[0.95, 3], smooth=True, scores_method='NumInt')

        expected_eigenvalues = np.array([3.13818712e+00, 8.42701253e-01, 1.17672149e-01, 1.52807427e-03, 1.07926861e-03])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions_0 = np.array([
            [0.40555526, 0.40983989, 0.4159047, 0.42256149, 0.4294344,
             0.43674625, 0.44473535, 0.45334902, 0.46223537, 0.47126137,
             0.48002382, 0.48864801, 0.49704436, 0.50504973, 0.51269338,
             0.5201093, 0.52745233, 0.53484719, 0.54241255, 0.55012545,
             0.55806308, 0.56618243, 0.57433744, 0.58234376, 0.59017974,
             0.59786002, 0.60543971, 0.61282336, 0.61990772, 0.62650654,
             0.63263475, 0.63895836, 0.64567121, 0.6524158, 0.65865142,
             0.6641796, 0.66918554, 0.67376557, 0.67818035, 0.68261243,
             0.68687235, 0.69081746, 0.69463111, 0.69840215, 0.70167956,
             0.70440459, 0.7068959, 0.70962781, 0.71278927, 0.71616073,
             0.71940558, 0.7224852, 0.72551289, 0.7284661, 0.73093866,
             0.73322331, 0.73530535, 0.73704448, 0.73857994, 0.73948988,
             0.73914675, 0.73774772, 0.73561735, 0.73312956, 0.73063668,
             0.72825018, 0.72599209, 0.7239838, 0.72181107, 0.71942155,
             0.71724628, 0.71530941, 0.7132113, 0.7110924, 0.70885825,
             0.7060669, 0.70263388, 0.69851644, 0.69388117, 0.68892772,
             0.68395235, 0.67906995, 0.67430078, 0.6695579, 0.66471514,
             0.65962157, 0.65432748, 0.64897791, 0.64358039, 0.63844192,
             0.63342804, 0.62821423, 0.62300219, 0.6174301, 0.61116266,
             0.60430645, 0.59708485, 0.58963572, 0.58156939, 0.57218107,
             0.5620016]
        ])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values[:1, :]), np.abs(expected_eigenfunctions_0))

        expected_eigenfunctions_1 = np.array([
            [0.4800527, 0.47251025, 0.46758764, 0.46836121, 0.47398291,
             0.48263424, 0.49310203, 0.50531674, 0.51877882, 0.53327054,
             0.5488, 0.56532104, 0.58236238, 0.59976003, 0.61705862,
             0.63416642, 0.65094219, 0.6665996, 0.68024175, 0.69250958,
             0.70393361, 0.71346912, 0.72069919, 0.72558152, 0.7290095,
             0.73217967, 0.73555764, 0.73912657, 0.74324955, 0.74780197,
             0.75273124, 0.75805738, 0.76407144, 0.77165335, 0.78073491,
             0.7904822, 0.80073683, 0.81037655, 0.81904254, 0.82680172,
             0.83282369, 0.83697912, 0.8398662, 0.84130985, 0.84163802,
             0.84099414, 0.83994527, 0.83949937, 0.84002358, 0.84131447,
             0.84318648, 0.84581633, 0.84937791, 0.85362376, 0.8582124,
             0.86253103, 0.86593465, 0.86872542, 0.87170802, 0.8751186,
             0.87833258, 0.88080645, 0.88286828, 0.88423465, 0.88471852,
             0.88485546, 0.88484589, 0.88549233, 0.88602543, 0.88584146,
             0.88514358, 0.88412781, 0.88183661, 0.87765519, 0.87144052,
             0.86332139, 0.85309684, 0.84151833, 0.82987082, 0.81812021,
             0.80635022, 0.79529516, 0.78479381, 0.77453489, 0.7645985,
             0.75553915, 0.74779956, 0.74064939, 0.73437805, 0.72949014,
             0.72624682, 0.72440326, 0.72432422, 0.72544622, 0.72757727,
             0.72980208, 0.7327366, 0.73661981, 0.74151826, 0.74669481,
             0.75238383]
        ])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values[:1, :]), np.abs(expected_eigenfunctions_1))

    def test_fit_covariance_2d(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_covariance_multivariate(
            data=self.fdata_multi_2d, points=points, n_components=[0.95, 3],
            smooth=True, scores_method='NumInt'
        )

        expected_eigenvalues = np.array([1.32855183e+00, 3.65142525e-01, 2.68862921e-02, 5.50044811e-03, 1.50627556e-04])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues, decimal=2)

        expected_eigenfunctions_0 = np.array([
            [0.60896636, 0.61595215, 0.62559861, 0.6360916, 0.64685313,
             0.65825111, 0.67066972, 0.68403078, 0.69779138, 0.71176479,
             0.72533567, 0.73870309, 0.7517319, 0.76416124, 0.77603514,
             0.78755988, 0.79897568, 0.81048266, 0.82227486, 0.83431284,
             0.84670646, 0.85938918, 0.87213274, 0.88465558, 0.89692403,
             0.90895046, 0.92082248, 0.93240078, 0.94352924, 0.95391306,
             0.96357291, 0.97353389, 0.98409654, 0.99470999, 1.00454056,
             1.01328123, 1.02123254, 1.0285467, 1.03561386, 1.04271033,
             1.04954675, 1.05591293, 1.06209276, 1.0682341, 1.07363989,
             1.07821359, 1.08244486, 1.08705567, 1.09233411, 1.09793179,
             1.10333405, 1.10848247, 1.11354822, 1.11849611, 1.12270119,
             1.12662958, 1.13025859, 1.13336913, 1.13617338, 1.13802181,
             1.13794974, 1.13625623, 1.13343616, 1.13006528, 1.12669019,
             1.12347695, 1.12046708, 1.11785073, 1.1149845, 1.11177496,
             1.10887362, 1.1063187, 1.10350138, 1.10063972, 1.09758438,
             1.09366682, 1.08875885, 1.08279349, 1.07603718, 1.06879504,
             1.06151464, 1.05436253, 1.04737203, 1.04041131, 1.03328477,
             1.02575545, 1.017911, 1.00998146, 1.0019712, 0.99435235,
             0.98691467, 0.97916046, 0.97139596, 0.96304757, 0.95359706,
             0.94321536, 0.93225323, 0.92093548, 0.90866995, 0.89436065,
             0.87879847]
        ])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values[:1, :]), np.abs(expected_eigenfunctions_0), decimal=2)

        expected_eigenfunctions_1 = np.array([
            [[0.24562685, 0.2464777, 0.24829344, 0.25099812,
              0.25381635, 0.25761805, 0.26165079, 0.26562234,
              0.26896885, 0.27170987, 0.27447533, 0.27748818,
              0.2801992, 0.2826693, 0.28532132, 0.28739141,
              0.29033163, 0.29324501, 0.29582141, 0.29789085,
              0.29959172, 0.3018355, 0.30388047, 0.3062187,
              0.30866773, 0.3104398, 0.31222437, 0.3138597,
              0.31515011, 0.31651236, 0.31818816, 0.31915346,
              0.3203543, 0.32122263, 0.32134327, 0.32133569,
              0.32148701, 0.32142783, 0.32097653, 0.32097966,
              0.32110177, 0.32024116, 0.31997049, 0.31918121,
              0.31775868, 0.31615566, 0.31448561, 0.31275263,
              0.31121991, 0.30894648, 0.30631137, 0.30351639,
              0.300247, 0.29698837, 0.2938649, 0.29028327,
              0.28698985, 0.28317412, 0.27956046, 0.27513269,
              0.27103678, 0.26722433, 0.26274709, 0.25849109,
              0.25385013, 0.24883721, 0.2434538, 0.23793982,
              0.23343981, 0.22830068, 0.22340149, 0.21835974,
              0.21250196, 0.20661884, 0.20111284, 0.19525301,
              0.18939677, 0.18412113, 0.17873367, 0.17382923,
              0.16863043, 0.1635206, 0.1578025, 0.15209075,
              0.14706153, 0.1420034, 0.13621042, 0.13164021,
              0.12618755, 0.12174591, 0.11677493, 0.11172965,
              0.1067068, 0.10147321, 0.09609938, 0.09183458,
              0.08822529, 0.08434109, 0.08117002, 0.07880624,
              0.07762372]]
        ])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values[:1, :1]), np.abs(expected_eigenfunctions_1), decimal=2)


class TestFitInnerProduct(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            self.fdata = pickle.load(handle)
        
        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_sparse = pickle.load(handle)

        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005_2D.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_2D = pickle.load(handle)

    def test_fit_inner_product_dense(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_inner_product(data=self.fdata, points=points, n_components=3)

        expected_eigenvalues = np.array([0.35990547, 0.09830406, 0.02307566])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([
            [-0.62381154, -0.66336267, -0.70474787, -0.74745742,
             -0.78814442, -0.82975522, -0.87070812, -0.91061283,
             -0.94709999, -0.98060579, -1.01515652, -1.04295437,
             -1.06503279, -1.08474383, -1.1033076, -1.12051155,
             -1.13063946, -1.13616235, -1.14067428, -1.13608528,
             -1.12874942, -1.11560366, -1.10106215, -1.08381781,
             -1.06178909, -1.03931699, -1.01267556, -0.98311006,
             -0.95382567, -0.92144755, -0.88203341],
            [-1.44947618, -1.37858685, -1.32964617, -1.28300831,
             -1.23061442, -1.1810825, -1.12183115, -1.05223887,
             -0.97451755, -0.89376803, -0.80893156, -0.71380597,
             -0.60765024, -0.49327334, -0.36601932, -0.23222208,
             -0.08862264,  0.06234061,  0.21197572,  0.36413064,
             0.51843489,  0.66727297,  0.8086372,  0.93978876,
             1.06388522,  1.17945238,  1.2805141,  1.37043062,
             1.45503168,  1.52251092,  1.57786938],
            [1.98217452,  1.80027795,  1.57713034,  1.33643228,
             1.08701279,  0.81613428,  0.5319878,  0.25284793,
             -0.01799718, -0.27799757, -0.50827279, -0.70261032,
             -0.84915088, -0.96437285, -1.0489412, -1.09118077,
             -1.07752968, -1.01260448, -0.90615974, -0.7509647,
             -0.57369541, -0.38142339, -0.18264213,  0.02156743,
             0.25112022,  0.49781512,  0.7636804,  1.04168537,
             1.31739809,  1.58547822,  1.83701205]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([
            [-5.19447097e-02,  1.07364355e-01, -1.08341956e-01],
            [3.13386768e-02, -7.48618140e-03, -1.56934607e-02],
            [-8.80696189e-02,  1.79541926e-02,  1.00982071e-01],
            [3.12043115e-02,  4.40233565e-02,  9.99531768e-02],
            [-6.47051685e-02,  1.72160222e-02, -1.28374360e-01],
            [-6.96942141e-02, -5.27859833e-03,  3.39891306e-02],
            [8.66286766e-02, -3.30003327e-02,  2.87625209e-02],
            [1.03090482e-01, -4.61595993e-02,  9.54156020e-03],
            [1.84466557e-02, -2.34792567e-02,  9.89545903e-02],
            [-8.01944792e-02, -3.82204134e-02,  9.38761552e-02],
            [1.15388239e-01, -5.13487106e-02,  1.38419767e-01],
            [-6.67537106e-02, -6.00736557e-02, -1.46800677e-01],
            [-1.86596526e-02,  7.91572019e-02, -4.53047334e-02],
            [1.47485422e-02,  7.53092192e-02,  5.78783462e-02],
            [1.02030869e-01,  1.67644503e-01, -2.23472728e-02],
            [-2.20199185e-02,  6.56025091e-02, -5.84058738e-04],
            [7.05015003e-02,  7.88868368e-03, -2.06067263e-02],
            [-7.11973322e-03,  8.18543885e-02,  5.46622141e-03],
            [4.68798190e-02, -3.09686221e-02, -2.11376364e-03],
            [1.13994427e-01,  1.60256919e-01, -2.91972229e-02],
            [-5.22163405e-02, -5.71957303e-02,  1.19010757e-01],
            [3.26415618e-02,  1.17738452e-01, -2.14419382e-02],
            [9.87119777e-02, -1.15209344e-01, -1.48752307e-02],
            [-7.82813483e-02,  8.65143113e-02,  9.76578262e-02],
            [-8.77115985e-02,  9.53936445e-02,  4.39059372e-02],
            [6.73759955e-02, -1.45714211e-01,  1.62682942e-01],
            [1.65463374e-02,  6.27486762e-02, -1.59021441e-01],
            [-1.74044083e-01,  1.41965431e-01,  9.73629567e-02],
            [2.02837695e-01,  1.30014710e-01,  9.99591454e-02],
            [-1.54990222e-02,  1.21577178e-01, -4.87475962e-03],
            [1.84885261e-01,  7.27375073e-02,  1.38935805e-02],
            [-5.98098855e-02, -8.48969084e-02, -4.41346227e-02],
            [-1.03542067e-01, -2.11449840e-02, -2.29825285e-01],
            [-4.57768495e-02, -8.67285077e-02,  3.85752787e-02],
            [7.92110470e-02, -1.21215695e-01, -8.66908067e-03],
            [-6.48677444e-02, -1.32322956e-01,  1.11076503e-01],
            [-3.51998229e-02,  7.02065186e-02,  1.43251015e-01],
            [1.40185962e-01, -8.61533714e-02,  9.22944800e-02],
            [-2.24903170e-02,  1.03583261e-01,  8.42384682e-02],
            [1.10812824e-02, -4.17639109e-02,  5.47154361e-02],
            [-8.12796290e-02, -1.00426779e-01,  6.46223090e-02],
            [1.68052229e-01,  1.96753691e-02, -2.33794348e-02],
            [7.28038287e-02,  4.27438652e-02, -1.19630626e-01],
            [-1.17150740e-01, -8.63202880e-02, -4.76618644e-02],
            [3.22047217e-02, -1.06793117e-01, -3.53611132e-02],
            [-2.03631171e-01, -2.96547374e-01,  1.04498116e-02],
            [-4.91955305e-02,  1.32272519e-01, -3.51020168e-02],
            [1.35583985e-01,  9.57522299e-02, -2.16974252e-01],
            [1.99270613e-01, -4.67819138e-02,  6.44195007e-02],
            [-2.19735174e-01,  2.52507634e-01, -9.40893584e-02],
            [-1.04976570e-01, -1.35343696e-01, -1.55033584e-01],
            [2.10135927e-02, -5.77331634e-02,  3.31782618e-02],
            [1.02513147e-02, -2.12559565e-02, -4.17120572e-02],
            [-4.70570063e-02, -4.36890848e-02, -1.09061920e-02],
            [-9.48441348e-02,  1.41609119e-01,  1.52228759e-01],
            [6.11750669e-02,  1.64138314e-01,  7.11235344e-02],
            [-2.81098464e-02,  1.45617549e-01, -1.73424141e-01],
            [-9.67657627e-04, -3.81567463e-02, -2.72908842e-03],
            [-1.31496588e-02, -2.09996010e-01, -1.79382386e-01],
            [9.27778771e-02, -1.46899219e-01, -1.82265026e-02],
            [2.25028463e-03,  6.05279291e-02, -1.63692129e-01],
            [-1.17630178e-01,  7.72643296e-02, -7.79732452e-02],
            [-1.78025464e-01, -3.90284540e-02, -1.65666629e-02],
            [1.69146117e-02,  7.64040058e-02,  8.22763385e-02],
            [-1.28750133e-01,  6.72200946e-02,  1.63575097e-02],
            [1.11089420e-01,  3.38653842e-02, -1.38263024e-01],
            [7.34224108e-02, -1.22992462e-01,  9.82820672e-02],
            [-4.90255465e-02,  1.37954707e-01, -2.37348629e-02],
            [-2.85605492e-02,  4.57776485e-02,  1.86810928e-02],
            [4.81127079e-02, -3.24070725e-02, -1.66857052e-01],
            [-2.32143682e-02,  1.75406894e-04,  1.65102357e-01],
            [1.46569096e-02, -8.77230757e-02, -4.07136359e-02],
            [-4.55106308e-02, -1.22058268e-01, -9.41505427e-02],
            [8.12721985e-02,  8.37577830e-02,  5.91552118e-02],
            [-1.57949373e-01, -5.01148564e-02,  9.99586060e-02],
            [8.93611883e-02,  1.25899496e-01,  2.30735066e-01],
            [1.38110461e-01, -1.72300410e-01,  1.52663753e-01],
            [-6.08632860e-02, -3.78399346e-02, -2.57127121e-02],
            [1.26549216e-02,  5.71840161e-02,  1.44632810e-02],
            [-6.88721316e-02, -3.97365349e-02,  4.02439296e-02],
            [-5.29638647e-02, -5.30376969e-02, -6.98220071e-02],
            [3.17644870e-02, -1.60993595e-01, -1.70534393e-01],
            [1.11656484e-01,  2.42954706e-01, -1.11528523e-01],
            [-1.44499253e-01, -1.15466174e-01,  1.56937408e-02],
            [1.41375256e-01, -3.66078241e-02, -1.30313885e-01],
            [-1.02737178e-01, -1.64447958e-01, -1.12971887e-01],
            [7.78224846e-02, -1.46087540e-01, -5.99399112e-02],
            [1.37439109e-01,  3.50872297e-02,  1.60502360e-02],
            [-9.21742771e-02,  6.22532946e-02,  5.77951523e-02],
            [-5.51914612e-02,  1.77272108e-02,  1.35267835e-01],
            [-2.62420710e-01,  7.73257243e-02, -1.67798328e-02],
            [1.11439394e-02, -5.27574024e-02,  1.76069466e-01],
            [2.58447927e-01, -6.05486584e-02, -6.67627906e-02],
            [-1.86697542e-01,  5.67714083e-02, -1.14613308e-01],
            [3.05088461e-02,  4.20736192e-02,  1.86676327e-02],
            [4.39787628e-02, -3.90533949e-02,  1.75813045e-01],
            [-8.63341966e-02, -6.92012845e-02,  1.17173282e-01],
            [3.34194194e-02,  1.62723080e-03, -1.03053337e-01],
            [-1.36524854e-02,  6.29844755e-03,  7.77046764e-02],
            [1.85335711e-01, -1.17389964e-02, -1.87026265e-01]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_sparse(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_inner_product(data=self.fdata_sparse, points=points, n_components=3)

        expected_eigenvalues = np.array([0.35452773, 0.09616793, 0.023012  ])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([
            [-0.59030061, -0.63928915, -0.68745661, -0.73472484,
             -0.78087861, -0.82564491, -0.86848567, -0.90915687,
             -0.9475282, -0.98285554, -1.01533561, -1.04455905,
             -1.07041402, -1.09207346, -1.10949415, -1.12299772,
             -1.13229335, -1.13746858, -1.13817315, -1.13472118,
             -1.12762109, -1.11702876, -1.10301872, -1.08550291,
             -1.06495768, -1.04140339, -1.01556145, -0.98810038,
             -0.95899114, -0.92817602, -0.89571702],
            [-1.40526567, -1.38389262, -1.35436507, -1.31705787,
             -1.27238044, -1.21817102, -1.15393341, -1.08051523,
             -0.9979444, -0.90570721, -0.80481384, -0.69662596,
             -0.58079519, -0.45796583, -0.32849662, -0.19269198,
             -0.05161376,  0.09319985,  0.24002269,  0.38626383,
             0.53095578,  0.67281222,  0.80920672,  0.9381119,
             1.05750179,  1.16539289,  1.26033826,  1.34263375,
             1.41494689,  1.47501907,  1.52112212],
            [1.95777449,  1.7510137,  1.52627397,  1.28691372,
             1.03725426,  0.77699318,  0.50963985,  0.24200841,
             -0.019996, -0.26836932, -0.49644927, -0.69820148,
             -0.8681459, -0.99676557, -1.07925469, -1.1127619,
             -1.09671361, -1.03440922, -0.92506765, -0.77324441,
             -0.58970922, -0.37917341, -0.14778715,  0.09887966,
             0.35415333,  0.61062805,  0.8616412,  1.1023565,
             1.33433826,  1.55408711,  1.7565409]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([
            [-0.05580551,  0.11351534, -0.09907844],
            [0.02813195, -0.00420509, -0.00329009],
            [-0.0864791,  0.00930044,  0.12810921],
            [0.02714555,  0.05203484,  0.1179032],
            [-0.06238326,  0.01899009, -0.14290332],
            [-0.06652097, -0.01499058,  0.03534634],
            [0.08439401, -0.03124853,  0.01807776],
            [0.10250938, -0.04058883,  0.04285735],
            [0.02104666, -0.0239646,  0.11123619],
            [-0.07968627, -0.0294433,  0.08559434],
            [0.10787755, -0.05735616,  0.12791943],
            [-0.07132702, -0.05085852, -0.15280083],
            [-0.02354397,  0.08353554, -0.02327677],
            [0.01118747,  0.08379327,  0.06105529],
            [0.09645189,  0.14988839, -0.0122435],
            [-0.02428198,  0.06368027, -0.00042716],
            [0.07358969,  0.01562118, -0.04627153],
            [-0.00681106,  0.06781248,  0.00702765],
            [0.04546741, -0.01356102,  0.00775892],
            [0.11793593,  0.15180139, -0.04287635],
            [-0.04703864, -0.05329638,  0.13160763],
            [0.03212548,  0.12379242, -0.03064533],
            [0.10129093, -0.11444956,  0.00056143],
            [-0.07760841,  0.09235337,  0.0799155],
            [-0.08319255,  0.09052079,  0.05831766],
            [0.07141222, -0.15454803,  0.14786731],
            [0.01684446,  0.07227474, -0.17427933],
            [-0.17215318,  0.13188654,  0.08763207],
            [0.19642463,  0.11926724,  0.0837437],
            [-0.01177387,  0.12785542,  0.01435098],
            [0.19366992,  0.07497645,  0.01624074],
            [-0.06064443, -0.0891696, -0.06292776],
            [-0.10571653, -0.02028544, -0.2331527],
            [-0.05484498, -0.0856415,  0.01877001],
            [0.0801574, -0.12036061, -0.02312876],
            [-0.06651543, -0.13768109,  0.10426333],
            [-0.02808409,  0.05590107,  0.12689083],
            [0.14156231, -0.09037201,  0.0846881],
            [-0.02704655,  0.09476773,  0.09851838],
            [0.01133944, -0.04086972,  0.05570483],
            [-0.08048785, -0.09197695,  0.10132822],
            [0.16827203,  0.02179639, -0.02118721],
            [0.06725938,  0.05847109, -0.10252294],
            [-0.11860587, -0.0925427, -0.04806455],
            [0.02559566, -0.09657009, -0.04506468],
            [-0.20280158, -0.29680587,  0.01423427],
            [-0.04901555,  0.12971998, -0.03963074],
            [0.14273531,  0.0988545, -0.20561198],
            [0.20290268, -0.04078118,  0.06146803],
            [-0.2245286,  0.25714945, -0.10030518],
            [-0.10380897, -0.12507053, -0.14538676],
            [0.02303796, -0.05883291,  0.04591946],
            [0.01550245, -0.01693678, -0.05416617],
            [-0.03777274, -0.02530521,  0.01039071],
            [-0.09851212,  0.1391824,  0.13964122],
            [0.06284657,  0.15815891,  0.09005193],
            [-0.02568164,  0.13886764, -0.16665694],
            [0.00124687, -0.04090997, -0.00537679],
            [-0.00761377, -0.21568438, -0.21288045],
            [0.09476163, -0.13981109, -0.02562837],
            [-0.00103851,  0.06731325, -0.14723223],
            [-0.11868023,  0.0681979, -0.07284214],
            [-0.17880846, -0.03849648, -0.02939082],
            [0.01506312,  0.06475985,  0.07780293],
            [-0.12630187,  0.05473898, -0.01242645],
            [0.11523339,  0.03209042, -0.1517581],
            [0.07310876, -0.1246226,  0.07435514],
            [-0.04886934,  0.14222115, -0.02335933],
            [-0.03399651,  0.03568921,  0.0225772],
            [0.04530995, -0.04306988, -0.16604222],
            [-0.02548504,  0.00238039,  0.16090128],
            [0.00840641, -0.08820442, -0.03677192],
            [-0.04523063, -0.12222628, -0.09041546],
            [0.07765487,  0.07887965,  0.05493241],
            [-0.15503988, -0.0588843,  0.08646158],
            [0.09222319,  0.13319596,  0.23265226],
            [0.13945072, -0.1817109,  0.12050595],
            [-0.06228799, -0.03197996, -0.02309701],
            [0.01954774,  0.05960881,  0.02915304],
            [-0.06665727, -0.03702697,  0.0579079],
            [-0.05556478, -0.05219494, -0.0517418],
            [0.03173321, -0.15309964, -0.17728696],
            [0.11232858,  0.25706979, -0.11060182],
            [-0.14674448, -0.10522906,  0.01109418],
            [0.14649121, -0.03681629, -0.09625421],
            [-0.10508875, -0.18342042, -0.12140745],
            [0.07349299, -0.14700778, -0.04477885],
            [0.13401535,  0.02179614,  0.0024433],
            [-0.09628766,  0.05577158,  0.05535695],
            [-0.05872406,  0.01198505,  0.13123076],
            [-0.25787299,  0.08372795, -0.0076236],
            [0.01308988, -0.05242959,  0.15285439],
            [0.25143613, -0.06568823, -0.05702088],
            [-0.185947,  0.06174632, -0.11774187],
            [0.02715824,  0.05017329,  0.01777972],
            [0.04364327, -0.04187054,  0.18665333],
            [-0.08520973, -0.07988129,  0.12724859],
            [0.03088082,  0.00144601, -0.11325474],
            [-0.01173948, -0.00763724,  0.08390134],
            [0.18496335, -0.00997102, -0.20078335]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_2d(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31), 'input_dim_1': np.linspace(0, 1, 31)})
        results = _fit_inner_product(data=self.fdata_2D, points=points, n_components=3, noise_variance=0)
        
        expected_eigenvalues = np.array([0.05593339, 0.01700472, 0.00488822])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([
            [1.3431181,  1.44354893,  1.70665061,  1.60184733,
             1.83480493,  1.87208878,  1.7275167,  1.94981973,
             1.78919233,  1.88864659,  1.81038727,  1.82759432,
             1.93365033,  1.93173478,  1.92782089,  1.76409863,
             1.83304964,  1.60319825,  1.46547347,  1.57606707,
             1.20589813,  1.24268591,  1.21326782,  1.03201126,
             0.85131812,  0.6927669,  0.66264106,  0.52180778,
             0.64465658,  0.45828785,  0.19769235],
            [0.13136088, -0.2221342, -0.0576581, -0.197916,
             -0.42822333, -0.57391779, -1.02929154, -1.35177774,
             -1.03596655, -1.52901817, -1.52629498, -1.88588166,
             -1.66267174, -2.09035673, -2.15951148, -2.03197322,
             -2.08632042, -2.29711841, -1.9543893, -1.8685276,
             -1.86084038, -1.56166676, -1.67300408, -1.71962804,
             -1.59330125, -1.24895234, -0.68461862, -1.10026709,
             -1.0736071, -0.76927991, -0.61461316],
            [4.44072343,  4.32361558,  3.90442618,  3.54161633,
             3.56642405,  3.89521636,  2.64320105,  2.94658988,
             1.99287032,  2.14099731,  1.39073284,  1.00466017,
             -0.41405825, -0.287815, -0.22457828, -0.88253007,
             -0.65091123, -0.90245185, -0.85200804, -1.11897495,
             -1.55368635, -1.49105985, -1.25972036, -0.66559656,
             -0.87304903, -1.10835733, -1.29035108, -0.79616373,
             -0.69636838, -0.51940078, -0.52450413]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenfunctions'].values[:, 0]), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([
            [-0.02478052, -0.19704852,  0.11322648],
            [-0.06559546, -0.06084416, -0.02588201],
            [0.1092945, -0.04025083, -0.03314717],
            [0.00926018, -0.06647725, -0.13734249],
            [0.01325195, -0.00920156,  0.1345378],
            [0.06720341,  0.00873046, -0.00206291],
            [-0.0295933,  0.10120912, -0.01818244],
            [-0.04588687,  0.10167812, -0.06591057],
            [-0.0008623, -0.01254694, -0.06337633],
            [0.06142619, -0.04109768,  0.0072811],
            [-0.10252175, -0.02436189, -0.11760938],
            [0.06226508,  0.14791061,  0.12658558],
            [0.07539783,  0.02833379, -0.04597973],
            [0.02490737, -0.06935203, -0.05015007],
            [-0.01219617, -0.0105675, -0.13569112],
            [0.0292805, -0.05603073,  0.02012811],
            [-0.10589005, -0.06180713,  0.01726319],
            [0.0575498,  0.01369198, -0.02778009],
            [-0.11524962, -0.12673792,  0.02540351],
            [-0.08100391, -0.08386064, -0.10248113],
            [-0.01530634, -0.1337682, -0.03915312],
            [-0.06561366, -0.17847279, -0.00474339],
            [-0.10605497,  0.09734514, -0.01284604],
            [0.08636768, -0.12021909, -0.05531598],
            [0.13842204, -0.01894325, -0.06910275],
            [-0.13186572, -0.04843518, -0.05893503],
            [-0.07682991, -0.07799207,  0.10757505],
            [0.32179871,  0.10375883, -0.09649541],
            [-0.12417456, -0.08361207, -0.18419266],
            [0.06349135, -0.04492816, -0.06116925],
            [-0.11098697,  0.02757588, -0.15116187],
            [-0.04645775, -0.05733564,  0.17226764],
            [0.08143269,  0.14349328,  0.18634342],
            [0.00896005,  0.00430729,  0.02942599],
            [-0.16595356, -0.02153532,  0.02935731],
            [0.02731831,  0.01961477,  0.01299862],
            [0.08206412, -0.04123104, -0.07605796],
            [-0.03593125,  0.21069852, -0.111173],
            [0.01823385, -0.1852414, -0.02962521],
            [-0.02490467, -0.01669724, -0.04983547],
            [-0.06147972, -0.21228126,  0.06182083],
            [-0.12927321,  0.034913, -0.08277863],
            [-0.05312765,  0.02378546,  0.03549432],
            [0.01651832, -0.040844,  0.17573007],
            [-0.04976537,  0.07909607,  0.04173025],
            [0.02882474,  0.02085084,  0.22000652],
            [0.03849427, -0.12074315, -0.00681693],
            [-0.11626811,  0.04966136,  0.02479148],
            [-0.0490996,  0.25927019, -0.21473794],
            [0.18127638, -0.25690209,  0.10688523],
            [0.00104383,  0.05446475,  0.19631724],
            [-0.09441932, -0.10412991,  0.02437305],
            [0.00148083,  0.0818471,  0.01482498],
            [0.02562728,  0.00085799,  0.04635057],
            [0.2116772, -0.01101277, -0.13942234],
            [0.03707141, -0.05593191, -0.15334918],
            [-0.00448509, -0.09056202,  0.1141067],
            [-0.02063131,  0.01262271,  0.00854663],
            [-0.10657842,  0.15891492,  0.22882899],
            [-0.10150644,  0.1392868,  0.00385368],
            [0.01168157,  0.03625952,  0.11974369],
            [0.18327627,  0.11698746,  0.03428192],
            [0.15440662,  0.04325489,  0.14734254],
            [-0.0349136, -0.15805404, -0.06990716],
            [0.20275631,  0.10727769,  0.04142768],
            [-0.10881511,  0.05141348,  0.05648445],
            [-0.08005792,  0.0555495, -0.01465965],
            [0.11095364, -0.0131653, -0.04912936],
            [0.11360813,  0.10630913, -0.09776344],
            [0.00084486,  0.23665572,  0.02535538],
            [0.09476779,  0.02003612, -0.10954218],
            [-0.04601308,  0.0474531,  0.06029206],
            [-0.02526095,  0.0662663,  0.12928131],
            [0.02675665,  0.05631165, -0.09965322],
            [0.12840394, -0.01826458,  0.03462365],
            [-0.00417158, -0.14968384, -0.19442249],
            [-0.22630375, -0.06126017, -0.06440465],
            [-0.03782011, -0.1251776,  0.07402776],
            [0.03832129,  0.02899091, -0.12452484],
            [0.00830286, -0.09344654,  0.02832821],
            [0.04191096,  0.0709991,  0.0709336],
            [-0.16048579,  0.03661775,  0.17952726],
            [-0.01982053, -0.04703358, -0.10455455],
            [0.1371997,  0.11182092,  0.08838548],
            [-0.16747116,  0.03614854,  0.0185588],
            [0.01663696,  0.12579513,  0.1873529],
            [-0.0670647,  0.19440747,  0.00034577],
            [-0.06577426,  0.079592, -0.10253935],
            [0.08047924, -0.11378542,  0.00421294],
            [0.07819435, -0.04624126, -0.10205842],
            [0.21786113, -0.11757364,  0.11335876],
            [-0.00939962, -0.03310036, -0.09048731],
            [-0.2600097,  0.05067062, -0.051844],
            [0.0960701, -0.12898741,  0.16986033],
            [0.03552344,  0.0414469, -0.04991938],
            [0.10346592,  0.19194636, -0.2124912],
            [0.04849589, -0.04932458, -0.00686136],
            [-0.00081916,  0.12013489,  0.03909399],
            [0.00514548, -0.05856277, -0.02029991],
            [-0.22725762,  0.02797389,  0.09586355]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))


class TestFitInnerProductMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            self.fdata = pickle.load(handle)
        
        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_sparse = pickle.load(handle)

        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005_2D.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_2D = pickle.load(handle)

        self.fdata_multi = MultivariateFunctionalData([self.fdata, self.fdata_sparse])
        self.fdata_multi_2d = MultivariateFunctionalData([self.fdata, self.fdata_2D])

    def test_fit_inner_product_dense_and_sparse(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_inner_product_multivariate( data=self.fdata_multi, points=points, n_components=0.95, smooth=True)

        expected_eigenvalues = np.array([0.71418775, 0.19418201, 0.04587047])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions_0 = np.array([
            [-0.44023005, -0.48512113, -0.52939189, -0.57343635,
             -0.61617416, -0.65604459, -0.69321533, -0.72480314,
             -0.75210036, -0.77436937, -0.7899203, -0.79942986,
             -0.80213018, -0.79883773, -0.78860954, -0.77154969,
             -0.75076877, -0.72576058, -0.69733457, -0.66591264,
             -0.63073138],
            [-1.02083903, -0.96935635, -0.9152496, -0.85547753,
             -0.78839531, -0.71520706, -0.62911014, -0.52970809,
             -0.41698833, -0.29151411, -0.15279168, -0.00263274,
             0.15559099,  0.3126622,  0.4658961,  0.61094614,
             0.74338422,  0.85942486,  0.96491039,  1.05585029,
             1.12593726],
            [1.41652674,  1.18207336,  0.9224334,  0.64418206,
             0.36248478,  0.08495015, -0.17307115, -0.39240393,
             -0.5624816, -0.67307254, -0.71052368, -0.67782878,
             -0.58145379, -0.4386571, -0.25023141, -0.0251144,
             0.21959002,  0.47756172,  0.75562855,  1.04857181,
             1.33929579]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenfunctions'].data[0].values), np.abs(expected_eigenfunctions_0))

        expected_eigenfunctions_1 = np.array([
            [-0.41637517, -0.45082323, -0.48469446, -0.51793535,
             -0.55039131, -0.58186983, -0.61199223, -0.64059342,
             -0.6675766, -0.69241887, -0.71526227, -0.73581438,
             -0.75399696, -0.76922947, -0.78147843, -0.79097616,
             -0.79751163, -0.80114696, -0.8016381, -0.79920878,
             -0.79421225, -0.78675429, -0.7768904, -0.76456253,
             -0.75009995, -0.73351539, -0.71531912, -0.69597985,
             -0.67547907, -0.65377494, -0.63091117],
            [-0.9832372, -0.96854246, -0.94817877, -0.9224114,
             -0.89151549, -0.85396718, -0.80939928, -0.75840964,
             -0.70100386, -0.63678282, -0.56643078, -0.49089796,
             -0.40992975, -0.32395008, -0.23317405, -0.13782107,
             -0.03864614,  0.06326791,  0.16671253,  0.26988923,
             0.37208756,  0.4723755,  0.56890138,  0.66023946,
             0.74494923,  0.82162026,  0.88921823,  0.94795646,
             0.99969745,  1.04283985,  1.07617328],
            [1.39998125,  1.25340427,  1.09408643,  0.92436348,
             0.74727694,  0.56259611,  0.37284135,  0.18279444,
             -0.00340864, -0.18004755, -0.3424197, -0.48629753,
             -0.60781716, -0.70023343, -0.76015466, -0.78557371,
             -0.7760383, -0.73384451, -0.65847972, -0.55316528,
             -0.42537631, -0.27845345, -0.11671034,  0.05596588,
             0.23488329,  0.41483611,  0.59108022,  0.76025146,
             0.92344033,  1.07819731,  1.22098806]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenfunctions'].data[1].values), np.abs(expected_eigenfunctions_1))

        expected_eigenvectors = np.array([
            [-5.38730137e-02,  1.10486559e-01, -1.04003177e-01],
            [2.97543507e-02, -5.85189790e-03, -9.62569854e-03],
            [-8.72951447e-02,  1.36975953e-02,  1.15087240e-01],
            [2.91944709e-02,  4.80279655e-02,  1.09062477e-01],
            [-6.35633051e-02,  1.80968873e-02, -1.35840596e-01],
            [-6.81328700e-02, -1.01049263e-02,  3.48351369e-02],
            [8.55346932e-02, -3.21428026e-02,  2.33883332e-02],
            [1.02819406e-01, -4.33854799e-02,  2.62273328e-02],
            [1.97374961e-02, -2.37586260e-02,  1.05344631e-01],
            [-7.99541579e-02, -3.39215292e-02,  8.97356071e-02],
            [1.11681504e-01, -5.43869437e-02,  1.33407499e-01],
            [-6.90324914e-02, -5.55351544e-02, -1.50349871e-01],
            [-2.10864556e-02,  8.14008158e-02, -3.44643569e-02],
            [1.29833269e-02,  7.95544559e-02,  5.94340576e-02],
            [9.92760732e-02,  1.59012657e-01, -1.68741016e-02],
            [-2.31461330e-02,  6.47134370e-02, -4.19658064e-04],
            [7.20452662e-02,  1.16924317e-02, -3.36458684e-02],
            [-6.96794871e-03,  7.49717208e-02,  6.55145507e-03],
            [4.61890431e-02, -2.23509521e-02,  2.58561028e-03],
            [1.15966182e-01,  1.56167201e-01, -3.59490073e-02],
            [-4.96530186e-02, -5.53111086e-02,  1.25580885e-01],
            [3.23900660e-02,  1.20807214e-01, -2.60559282e-02],
            [1.00010378e-01, -1.14906963e-01, -7.37310520e-03],
            [-7.79593283e-02,  8.94237407e-02,  8.89505802e-02],
            [-8.54853505e-02,  9.30619626e-02,  5.14853856e-02],
            [6.93912178e-02, -1.50234213e-01,  1.55786087e-01],
            [1.66973878e-02,  6.75161901e-02, -1.67193667e-01],
            [-1.73139000e-01,  1.37030832e-01,  9.28985315e-02],
            [1.99688809e-01,  1.24782288e-01,  9.23262711e-02],
            [-1.36557073e-02,  1.24786329e-01,  4.70613129e-03],
            [1.89276012e-01,  7.39070858e-02,  1.52420367e-02],
            [-6.02326030e-02, -8.70998256e-02, -5.36092907e-02],
            [-1.04640610e-01, -2.07121688e-02, -2.32049903e-01],
            [-5.02847244e-02, -8.62748390e-02,  2.85195083e-02],
            [7.96968598e-02, -1.20870576e-01, -1.59655184e-02],
            [-6.56961162e-02, -1.35087978e-01,  1.07917492e-01],
            [-3.16772305e-02,  6.31302710e-02,  1.35706165e-01],
            [1.40893650e-01, -8.83187763e-02,  8.86741571e-02],
            [-2.47573438e-02,  9.93058730e-02,  9.19302220e-02],
            [1.12102626e-02, -4.13450660e-02,  5.52572631e-02],
            [-8.08991008e-02, -9.62871583e-02,  8.30162246e-02],
            [1.68190413e-01,  2.07728267e-02, -2.22237663e-02],
            [7.00645463e-02,  5.06092135e-02, -1.11602544e-01],
            [-1.17892238e-01, -8.94439093e-02, -4.78555510e-02],
            [2.89326754e-02, -1.01801591e-01, -4.05307237e-02],
            [-2.03249649e-01, -2.96906135e-01,  1.21878162e-02],
            [-4.91179938e-02,  1.31096260e-01, -3.72805357e-02],
            [1.39156223e-01,  9.74037221e-02, -2.11680587e-01],
            [2.01106326e-01, -4.38579687e-02,  6.31022218e-02],
            [-2.22156055e-01,  2.54997345e-01, -9.74102951e-02],
            [-1.04410739e-01, -1.30334757e-01, -1.50685759e-01],
            [2.20212305e-02, -5.83033961e-02,  3.95436789e-02],
            [1.28599169e-02, -1.91452631e-02, -4.81122918e-02],
            [-4.24552843e-02, -3.46013118e-02, -6.30849245e-04],
            [-9.66823380e-02,  1.40473496e-01,  1.46396951e-01],
            [6.20130642e-02,  1.61290624e-01,  8.10260080e-02],
            [-2.69112400e-02,  1.42432252e-01, -1.70208347e-01],
            [1.33467127e-04, -3.95663721e-02, -3.99859783e-03],
            [-1.04009112e-02, -2.12972397e-01, -1.96563944e-01],
            [9.37816610e-02, -1.43492779e-01, -2.21665025e-02],
            [6.18637676e-04,  6.39612505e-02, -1.55922335e-01],
            [-1.18172016e-01,  7.28445381e-02, -7.54785064e-02],
            [-1.78444255e-01, -3.88110208e-02, -2.29551998e-02],
            [1.59976288e-02,  7.06856014e-02,  8.04463229e-02],
            [-1.27558226e-01,  6.10616759e-02,  2.38927400e-03],
            [1.13166899e-01,  3.30311473e-02, -1.44982670e-01],
            [7.32807417e-02, -1.23942072e-01,  8.65250076e-02],
            [-4.89578806e-02,  1.40173204e-01, -2.35843152e-02],
            [-3.12656766e-02,  4.08123140e-02,  2.09014618e-02],
            [4.67300373e-02, -3.76789055e-02, -1.66753722e-01],
            [-2.43459491e-02,  1.23819002e-03,  1.63308732e-01],
            [1.15591811e-02, -8.80143089e-02, -3.89193736e-02],
            [-4.53775079e-02, -1.22226830e-01, -9.27811533e-02],
            [7.94902211e-02,  8.13945075e-02,  5.73097845e-02],
            [-1.56532201e-01, -5.45246108e-02,  9.36950342e-02],
            [9.07962539e-02,  1.29564546e-01,  2.32286007e-01],
            [1.38799881e-01, -1.77143660e-01,  1.36907832e-01],
            [-6.15795881e-02, -3.49616045e-02, -2.46715980e-02],
            [1.60773555e-02,  5.84333331e-02,  2.19021453e-02],
            [-6.77847384e-02, -3.84192966e-02,  4.91896788e-02],
            [-5.42626842e-02, -5.26351654e-02, -6.10084004e-02],
            [3.17591148e-02, -1.57194813e-01, -1.74473541e-01],
            [1.12006035e-01,  2.50170219e-01, -1.11324946e-01],
            [-1.45637559e-01, -1.10477566e-01,  1.31424130e-02],
            [1.43937868e-01, -3.66643453e-02, -1.13640668e-01],
            [-1.03920352e-01, -1.73959850e-01, -1.17256607e-01],
            [7.56890207e-02, -1.46599401e-01, -5.24583945e-02],
            [1.35762428e-01,  2.85484282e-02,  9.51636659e-03],
            [-9.42335587e-02,  5.90815767e-02,  5.67084828e-02],
            [-5.69551745e-02,  1.48688470e-02,  1.33684860e-01],
            [-2.60210102e-01,  8.05602931e-02, -1.21589783e-02],
            [1.21127120e-02, -5.26919648e-02,  1.64656983e-01],
            [2.55014066e-01, -6.31079757e-02, -6.20257902e-02],
            [-1.86356325e-01,  5.93032695e-02, -1.16530527e-01],
            [2.88488943e-02,  4.61243504e-02,  1.81497104e-02],
            [4.38184823e-02, -4.04965312e-02,  1.81568988e-01],
            [-8.57897898e-02, -7.45709672e-02,  1.22514073e-01],
            [3.21669854e-02,  1.55529130e-03, -1.08380512e-01],
            [-1.27057016e-02, -5.87722149e-04,  8.12616760e-02],
            [1.85184053e-01, -1.08392446e-02, -1.94325032e-01]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_with_2d(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 11), 'input_dim_1': np.linspace(0, 1, 11)})
        ]
        results = _fit_inner_product_multivariate( data=self.fdata_multi_2d, points=points, n_components=0.7, smooth=True, noise_variance=np.array([0.02, 0]))
        
        expected_eigenvalues = np.array([0.39874611, 0.10976592])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([
            [-0.5577418, -0.61784272, -0.67707297, -0.73611189,
             -0.79375836, -0.84784307, -0.8988948, -0.94321608,
             -0.98265489, -1.01638755, -1.04225162, -1.06098325,
             -1.0715072, -1.07438224, -1.0682052, -1.05302702,
             -1.03291149, -1.00709265, -0.97687921, -0.94266394,
             -0.90304904],
            [-1.33917559, -1.29128647, -1.24090937, -1.18393798,
             -1.11725843, -1.04220592, -0.94892489, -0.83533475,
             -0.70086577, -0.54535854, -0.36708049, -0.16888696,
             0.04482926,  0.26062775,  0.47509467,  0.68239777,
             0.87557138,  1.04940861,  1.21176787,  1.35697205,
             1.47575225]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenfunctions'].data[0].values), np.abs(expected_eigenfunctions))

        expected_eigenfunctions = np.array([
            [[-6.44023803e-01, -7.32687182e-01, -7.41367683e-01,
              -7.35208303e-01, -6.86714609e-01, -6.20566633e-01,
              -5.49835838e-01, -4.25228144e-01, -3.04288554e-01,
              -2.00555682e-01, -1.01047212e-01],
             [-6.61425531e-01, -7.05376056e-01, -7.12182027e-01,
              -7.05992607e-01, -6.50099007e-01, -5.91383430e-01,
              -4.87552754e-01, -3.87905111e-01, -2.89791801e-01,
              -1.90504413e-01, -6.26905996e-02],
             [-6.16417672e-01, -6.43244986e-01, -6.33441918e-01,
              -6.06681838e-01, -5.61975068e-01, -4.89295119e-01,
              -4.15424574e-01, -3.17579720e-01, -2.26954489e-01,
              -1.57561093e-01, -8.62074312e-02],
             [-5.18203668e-01, -5.40412619e-01, -5.16242174e-01,
              -4.92394893e-01, -4.39592781e-01, -3.84446576e-01,
              -3.15707014e-01, -2.35762521e-01, -1.80332538e-01,
              -1.29896847e-01, -6.96751523e-02],
             [-4.21795825e-01, -4.28413973e-01, -3.96363323e-01,
              -3.64723586e-01, -3.21097540e-01, -2.66759386e-01,
              -2.02428355e-01, -1.78868824e-01, -1.24892875e-01,
              -1.00345117e-01, -4.27349962e-02],
             [-3.06884170e-01, -3.02648880e-01, -2.85568280e-01,
              -2.48893207e-01, -2.20429307e-01, -1.83093485e-01,
              -1.21080816e-01, -9.34531794e-02, -7.06452755e-02,
              -5.22977212e-02, -1.47824224e-02],
             [-2.24977372e-01, -2.23519703e-01, -1.92477875e-01,
              -1.60475753e-01, -1.38036578e-01, -1.07824491e-01,
              -6.97105571e-02, -5.01942203e-02, -3.86343576e-02,
              -2.06947669e-02, -3.16986516e-02],
             [-1.67765867e-01, -1.47393110e-01, -1.26197180e-01,
              -1.14175071e-01, -8.74137665e-02, -5.63481004e-02,
              -4.29506070e-02, -2.59379569e-02, -1.00518148e-02,
              -1.49219710e-02, -1.46260777e-02],
             [-1.15680925e-01, -1.01167996e-01, -9.03763682e-02,
              -4.55713492e-02, -5.63045483e-02, -3.12065428e-02,
              -1.99290958e-02,  1.39344184e-03, -7.04971591e-03,
              -9.81696449e-03,  3.02543362e-03],
             [-8.60842323e-02, -4.30932096e-02, -4.59905900e-02,
              -3.98014704e-02, -2.82646392e-02, -1.47950072e-02,
              -9.72090985e-03, -4.63208049e-03, -5.99101899e-04,
              -9.53238893e-03, -1.15450740e-02],
             [-2.31875120e-02, -2.87531408e-02, -3.41709738e-02,
              -3.20453477e-02, -4.68257644e-02,  1.53318770e-02,
              -1.02671450e-02, -8.17448372e-03, -6.16352325e-04,
                6.37768455e-03,  5.85339958e-02]],

            [[-1.18800258e-01,  1.03346710e-02,  2.32188074e-01,
              4.06504699e-01,  5.74519492e-01,  7.07511893e-01,
              6.92389612e-01,  6.73743973e-01,  4.58969586e-01,
              3.37449444e-01,  1.43429242e-01],
             [-9.69869360e-02,  9.13045925e-02,  3.02674817e-01,
              4.94761376e-01,  6.66696017e-01,  7.71021053e-01,
              7.42733009e-01,  6.73212043e-01,  5.10606075e-01,
              3.35004480e-01,  2.18799261e-01],
             [2.01653816e-02,  1.14840536e-01,  3.07558309e-01,
                4.99973525e-01,  6.37219357e-01,  7.02028971e-01,
                6.64528432e-01,  5.78817199e-01,  4.58187606e-01,
                2.98114193e-01,  1.98796976e-01],
             [1.10387889e-02,  1.57020576e-01,  3.05057008e-01,
                4.09119666e-01,  5.17159171e-01,  5.48521656e-01,
                5.17296506e-01,  4.72379850e-01,  3.71282121e-01,
                2.35455096e-01,  1.53913056e-01],
             [4.71976678e-02,  1.16046970e-01,  2.23479612e-01,
                2.84237593e-01,  3.59807653e-01,  4.24111350e-01,
                3.96961014e-01,  3.36914157e-01,  2.63894857e-01,
                1.95437938e-01,  4.60043316e-02],
             [7.38586531e-02,  1.23687674e-01,  1.60931111e-01,
                1.88151202e-01,  2.45006815e-01,  2.69182120e-01,
                2.31768240e-01,  2.08005452e-01,  1.49172884e-01,
                1.15673201e-01,  6.91268790e-02],
             [5.99503056e-02,  9.75853789e-02,  1.31606635e-01,
                1.53344904e-01,  1.33091736e-01,  1.25742891e-01,
                1.31542999e-01,  8.96982544e-02,  8.02757129e-02,
                5.93399803e-02,  3.30846118e-02],
             [6.99513107e-02,  5.86813759e-02,  7.43995018e-02,
                6.91825561e-02,  8.81429363e-02,  8.97777310e-02,
                8.28749471e-02,  4.39288095e-02,  1.48841621e-02,
                3.76849738e-02,  3.65381208e-02],
             [1.08410482e-01,  7.78047526e-02,  5.88642007e-02,
                5.41578105e-02,  4.15097531e-02,  3.74181200e-02,
                2.35397084e-02,  1.46313190e-02,  1.72617392e-02,
                -6.98767439e-03, -4.57903545e-02],
             [1.57614989e-02,  2.24958290e-02,  3.96507313e-02,
                2.47220102e-02,  2.68270210e-02,  1.87907729e-02,
                -2.51445944e-03,  1.27254048e-02, -1.00856364e-02,
                9.82560809e-03,  2.85617863e-02],
             [9.63550543e-02,  7.52832881e-02, -1.02522046e-02,
                3.30443124e-02,  2.79127951e-02, -4.84834851e-02,
                2.25401632e-02, -2.15141384e-02, -3.37888497e-02,
                -2.03229232e-02,  4.01584608e-02]]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenfunctions'].data[1].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([
            [-4.78200941e-02,  8.84243344e-02],
            [3.55139598e-02, -8.28458295e-03],
            [-9.26439151e-02,  2.20595413e-02],
            [2.63439454e-02,  5.57272773e-02],
            [-6.06973701e-02,  3.85471760e-04],
            [-7.04779455e-02, -6.92457119e-03],
            [8.30326431e-02, -2.20937684e-02],
            [1.00213648e-01, -3.27557510e-02],
            [1.71265563e-02, -1.37601296e-02],
            [-7.94088529e-02, -3.60379037e-02],
            [1.16782269e-01, -3.46855418e-02],
            [-6.55588943e-02, -6.98788292e-02],
            [-2.61011051e-02,  7.92507472e-02],
            [8.85444897e-03,  8.09196467e-02],
            [9.16071993e-02,  1.72196637e-01],
            [-2.48121561e-02,  6.23296632e-02],
            [7.50394199e-02,  5.51140810e-03],
            [-1.39920501e-02,  8.20604501e-02],
            [5.46832243e-02, -3.20779429e-02],
            [1.09600156e-01,  1.59090535e-01],
            [-4.57311038e-02, -5.44569240e-02],
            [3.36720394e-02,  1.10496182e-01],
            [1.03910635e-01, -1.07572503e-01],
            [-8.28011517e-02,  8.66313959e-02],
            [-9.63300229e-02,  9.54563607e-02],
            [7.76771004e-02, -1.33789774e-01],
            [2.18310575e-02,  4.55995865e-02],
            [-1.94795032e-01,  1.46735649e-01],
            [1.95357753e-01,  1.46254382e-01],
            [-2.31528940e-02,  1.20954415e-01],
            [1.79491956e-01,  8.51142795e-02],
            [-4.86930193e-02, -9.76489707e-02],
            [-1.01731903e-01, -4.13512502e-02],
            [-4.12305974e-02, -8.58734922e-02],
            [9.19920564e-02, -1.21599148e-01],
            [-5.97742205e-02, -1.26757197e-01],
            [-4.24249144e-02,  7.66678712e-02],
            [1.34228256e-01, -6.31964712e-02],
            [-2.56087585e-02,  1.04126352e-01],
            [1.34879678e-02, -3.67233139e-02],
            [-6.71553147e-02, -1.05941378e-01],
            [1.66952426e-01,  2.83474289e-02],
            [7.13832001e-02,  3.96544292e-02],
            [-1.07502385e-01, -1.00596574e-01],
            [3.69181504e-02, -1.04008425e-01],
            [-1.83600603e-01, -3.08176563e-01],
            [-5.17835697e-02,  1.21932104e-01],
            [1.34952539e-01,  8.60521875e-02],
            [1.89475446e-01, -1.91464862e-02],
            [-2.25552572e-01,  2.24786933e-01],
            [-9.30809131e-02, -1.52364068e-01],
            [2.95260195e-02, -5.84016747e-02],
            [1.01329353e-02, -2.23201135e-02],
            [-4.49746465e-02, -4.54780575e-02],
            [-1.11605707e-01,  1.51349959e-01],
            [4.86451524e-02,  1.73844581e-01],
            [-2.81122455e-02,  1.24029112e-01],
            [2.13911922e-03, -3.90734815e-02],
            [4.07070974e-03, -2.26788790e-01],
            [9.88214085e-02, -1.39242089e-01],
            [-2.22099930e-04,  4.96448585e-02],
            [-1.27285575e-01,  6.92782148e-02],
            [-1.78104012e-01, -4.96825199e-02],
            [1.69274471e-02,  7.75591102e-02],
            [-1.39674042e-01,  6.33728299e-02],
            [1.12647099e-01,  2.73391415e-02],
            [7.76792915e-02, -1.10791657e-01],
            [-5.88295477e-02,  1.34948395e-01],
            [-3.80590489e-02,  5.18306017e-02],
            [4.61172752e-02, -3.57944125e-02],
            [-3.13690091e-02,  1.60923892e-02],
            [1.99871786e-02, -8.85612583e-02],
            [-3.62483371e-02, -1.31372042e-01],
            [6.99409159e-02,  9.63533460e-02],
            [-1.57020534e-01, -5.24126747e-02],
            [7.84753073e-02,  1.46773280e-01],
            [1.52656461e-01, -1.59363978e-01],
            [-5.14877033e-02, -4.79276916e-02],
            [7.03961190e-03,  6.19029281e-02],
            [-6.35736794e-02, -4.28973482e-02],
            [-5.14125583e-02, -5.76200371e-02],
            [4.91684418e-02, -1.75010868e-01],
            [9.97187058e-02,  2.40321636e-01],
            [-1.43871267e-01, -1.16731068e-01],
            [1.47769452e-01, -3.83020433e-02],
            [-9.17762468e-02, -1.78443390e-01],
            [8.19360336e-02, -1.39086189e-01],
            [1.32263582e-01,  4.57253075e-02],
            [-9.44721860e-02,  5.86093460e-02],
            [-5.91699563e-02,  2.55117563e-02],
            [-2.64551754e-01,  5.85622359e-02],
            [1.17814642e-02, -4.01235216e-02],
            [2.64767154e-01, -5.07210792e-02],
            [-1.82175010e-01,  3.18556866e-02],
            [2.34306263e-02,  4.92884040e-02],
            [3.09137891e-02, -1.12772502e-02],
            [-8.30617715e-02, -6.62451034e-02],
            [3.12932685e-02, -1.13720126e-03],
            [-1.35544382e-02,  8.77345161e-03],
            [1.93574799e-01, -1.97003041e-02]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))


class TestTransformNumericalIntegrationDense(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            self.fdata = pickle.load(handle)
        
        fname = THIS_DIR.parent / 'data/data_noisy_5_10_001_2D.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_2D = pickle.load(handle)

    def test_numerical_integration(self):
        uf = UFPCA(n_components=2, method='covariance')
        uf.fit(self.fdata)
        uf_eigen = uf.eigenfunctions

        scores_dense = _transform_numerical_integration_dense(self.fdata, uf_eigen)
        expected_scores = np.array([
            [-0.31317357,  0.34123327],
            [0.18537663, -0.01515484],
            [-0.53029898,  0.06377179],
            [0.18713111,  0.14501139],
            [-0.39078759,  0.06183464],
            [-0.42033249, -0.00672803],
            [0.51805892, -0.095459],
            [0.61555215, -0.13737513],
            [0.11042458, -0.06527667],
            [-0.48453803, -0.11101933],
            [0.68936538, -0.15141824],
            [-0.40355636, -0.18096082],
            [-0.11249536,  0.25317829],
            [0.08684018,  0.24184147],
            [0.60966282,  0.53022049],
            [-0.13488295,  0.21439266],
            [0.41952949,  0.03242174],
            [-0.0440803,  0.26476079],
            [0.27822765, -0.08909635],
            [0.68133586,  0.51156472],
            [-0.31594493, -0.17182786],
            [0.1951331,  0.37710313],
            [0.58961412, -0.35603509],
            [-0.4704033,  0.27889268],
            [-0.52806047,  0.30508722],
            [0.40108732, -0.45486762],
            [0.09723659,  0.20604489],
            [-1.04665824,  0.45273547],
            [1.21496513,  0.41349597],
            [-0.09465194,  0.3875499],
            [1.1076712,  0.23768259],
            [-0.36170539, -0.25937892],
            [-0.62411404, -0.05541356],
            [-0.27661549, -0.26586595],
            [0.47348069, -0.37183868],
            [-0.39407543, -0.40756171],
            [-0.21348564,  0.23026539],
            [0.83704526, -0.26205049],
            [-0.13792435,  0.33320543],
            [0.06336966, -0.12440107],
            [-0.48962484, -0.30574072],
            [1.00723188,  0.06753453],
            [0.43400526,  0.14058968],
            [-0.70568422, -0.2642966],
            [0.19126128, -0.32689201],
            [-1.22439962, -0.92426033],
            [-0.29647293,  0.42079208],
            [0.81206983,  0.30934312],
            [1.19208056, -0.14340815],
            [-1.32041376,  0.80068326],
            [-0.63161395, -0.41334238],
            [0.12370552, -0.17465805],
            [0.06033531, -0.05828676],
            [-0.28320735, -0.13354738],
            [-0.57069763,  0.45171449],
            [0.36566956,  0.51792565],
            [-0.16840193,  0.46152696],
            [-0.00934687, -0.11110472],
            [-0.08171614, -0.6498137],
            [0.55449501, -0.45546976],
            [0.01100761,  0.19866509],
            [-0.70691293,  0.24995057],
            [-1.07052589, -0.11424129],
            [0.09914146,  0.24715948],
            [-0.77441913,  0.21800567],
            [0.66618704,  0.11475881],
            [0.43754281, -0.37870372],
            [-0.29537251,  0.43941961],
            [-0.17350261,  0.14990972],
            [0.28802414, -0.09409522],
            [-0.14210718,  0.00664535],
            [0.08608836, -0.26665452],
            [-0.27552342, -0.3746887],
            [0.48569267,  0.26842298],
            [-0.94879237, -0.15074974],
            [0.53415132,  0.40216514],
            [0.82485982, -0.53518314],
            [-0.36853608, -0.10997947],
            [0.07353652,  0.18634613],
            [-0.41529616, -0.11624739],
            [-0.31959725, -0.15476756],
            [0.18742096, -0.49690336],
            [0.6685045,  0.76963594],
            [-0.86851887, -0.35339343],
            [0.84595534, -0.10757187],
            [-0.61673185, -0.50909136],
            [0.46431021, -0.45151516],
            [0.82214164,  0.11905946],
            [-0.55546319,  0.20276934],
            [-0.33592004,  0.06212645],
            [-1.57658274,  0.25113199],
            [0.06469013, -0.15887607],
            [1.54739683, -0.18363765],
            [-1.12219294,  0.18816657],
            [0.18095252,  0.13840264],
            [0.26079229, -0.11688948],
            [-0.52010203, -0.20831797],
            [0.19793106,  0.01248396],
            [-0.08472723,  0.0273987],
            [1.11118881, -0.03123675]
        ])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_numerical_integration_2d(self):
        uf = UFPCA(n_components=2, method='inner-product')
        uf.fit(self.fdata_2D)

        scores = _transform_numerical_integration_dense(
            self.fdata_2D, uf.eigenfunctions)
        expected_scores = np.array([
            [0.00337637,  0.29981414],
            [-0.13701211,  0.11571569],
            [0.26966184, -0.01484197],
            [0.04307192,  0.05457598],
            [0.01662059,  0.04299434],
            [0.13890331, -0.05522155],
            [-0.11266017, -0.10567837],
            [-0.13599637, -0.10109772],
            [0.0121938, -0.00130192],
            [0.15257718,  0.02944047]
        ])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))


class TestTransformNumericalIntegrationIrregular(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_sparse = pickle.load(handle)

    def test_numerical_integration(self):
        uf = UFPCA(n_components=0.95, method='covariance')
        uf.fit(self.fdata_sparse)
        uf_eigen = uf.eigenfunctions

        scores_sparse = _transform_numerical_integration_irregular(
            self.fdata_sparse, uf_eigen)
        expected_scores = np.array([
            [-3.31061937e-01,  3.49564143e-01, -1.66468334e-01],
            [1.62851113e-01, -7.80329637e-03, -1.13824490e-02],
            [-5.18970186e-01,  4.22015302e-02,  1.91967701e-01],
            [1.56800742e-01,  1.71380407e-01,  1.68406856e-01],
            [-3.75473843e-01,  6.24488092e-02, -2.18256331e-01],
            [-3.98432562e-01, -3.22585953e-02,  4.49838182e-02],
            [4.98151203e-01, -9.12307597e-02,  2.07713268e-02],
            [6.06141567e-01, -1.20171006e-01,  5.72558210e-02],
            [1.22838045e-01, -5.89213427e-02,  1.55717984e-01],
            [-4.74039513e-01, -8.71300230e-02,  1.20788202e-01],
            [6.37695767e-01, -1.68813143e-01,  1.85960615e-01],
            [-4.29904782e-01, -1.54325347e-01, -2.28008167e-01],
            [-1.44874943e-01,  2.64232593e-01, -4.29561062e-02],
            [6.32637107e-02,  2.68095640e-01,  8.15627363e-02],
            [5.72188940e-01,  4.64156006e-01, -3.91410117e-02],
            [-1.44256462e-01,  1.98670588e-01, -1.49686925e-02],
            [4.34018193e-01,  5.12278116e-02, -7.96641514e-02],
            [-4.58926408e-02,  2.13980872e-01,  7.54113485e-03],
            [2.66683272e-01, -3.59946728e-02,  4.53136870e-03],
            [6.98284838e-01,  4.71760947e-01, -8.38279900e-02],
            [-2.84972080e-01, -1.52907648e-01,  1.98019027e-01],
            [1.88531828e-01,  3.87827528e-01, -6.00795124e-02],
            [5.96978007e-01, -3.50736902e-01, -1.64809134e-03],
            [-4.55471576e-01,  2.82476070e-01,  9.42052539e-02],
            [-4.98993113e-01,  2.90353857e-01,  8.26365069e-02],
            [4.12052634e-01, -4.56367170e-01,  2.36182602e-01],
            [9.70272401e-02,  2.23194791e-01, -2.73412059e-01],
            [-1.02916683e+00,  4.21745706e-01,  1.28634564e-01],
            [1.16484154e+00,  3.73733457e-01,  1.05825541e-01],
            [-7.35581967e-02,  4.02243554e-01,  1.01369447e-02],
            [1.14881175e+00,  2.33950113e-01,  5.90038014e-03],
            [-3.65226369e-01, -2.69434015e-01, -9.20865368e-02],
            [-6.33871389e-01, -6.22418725e-02, -3.49133655e-01],
            [-3.31273777e-01, -2.56955210e-01,  3.06597271e-02],
            [4.72135492e-01, -3.68900027e-01, -3.73613546e-02],
            [-4.00541703e-01, -4.13588462e-01,  1.63652060e-01],
            [-1.64005200e-01,  1.73999282e-01,  1.72278859e-01],
            [8.37325289e-01, -2.73732958e-01,  1.24299281e-01],
            [-1.64110334e-01,  3.04141104e-01,  1.38784041e-01],
            [6.30966707e-02, -1.18018598e-01,  8.10964769e-02],
            [-4.77201615e-01, -2.58597719e-01,  1.34668273e-01],
            [9.97461020e-01,  6.85555441e-02, -4.54313518e-02],
            [3.96260463e-01,  1.82063609e-01, -1.66194786e-01],
            [-7.05938115e-01, -2.68194162e-01, -8.29198525e-02],
            [1.47394545e-01, -2.94795059e-01, -6.82357241e-02],
            [-1.20272351e+00, -8.78667929e-01,  3.38012506e-05],
            [-2.88871291e-01,  3.95894207e-01, -8.23746314e-02],
            [8.46896168e-01,  3.01622899e-01, -3.26739978e-01],
            [1.20286076e+00, -1.23847085e-01,  8.20233573e-02],
            [-1.33964774e+00,  8.05376634e-01, -1.60850187e-01],
            [-6.23582649e-01, -3.82264849e-01, -2.11324190e-01],
            [1.35279063e-01, -1.69212241e-01,  5.84874914e-02],
            [8.76404474e-02, -4.83865376e-02, -8.59561724e-02],
            [-2.21652686e-01, -5.39226277e-02, -9.74655985e-03],
            [-5.90299884e-01,  4.44990223e-01,  2.03619002e-01],
            [3.77763559e-01,  4.87780670e-01,  1.08693207e-01],
            [-1.57113839e-01,  4.31198754e-01, -2.64276489e-01],
            [2.63740508e-03, -1.20526610e-01, -1.08509367e-02],
            [-5.08000025e-02, -6.68995762e-01, -3.12218799e-01],
            [5.24573700e-01, -3.75733486e-01,  1.98076403e-02],
            [-9.95346901e-03,  2.09565515e-01, -2.30502817e-01],
            [-7.11466495e-01,  2.16945152e-01, -1.11808578e-01],
            [-1.06928860e+00, -1.08569287e-01, -3.78209005e-02],
            [8.54039031e-02,  2.09423450e-01,  1.07535768e-01],
            [-7.54651374e-01,  1.81879001e-01, -2.43187709e-02],
            [6.82362433e-01,  9.69950780e-02, -2.40830082e-01],
            [4.30307801e-01, -3.77921570e-01,  1.10915670e-01],
            [-2.85768838e-01,  4.32539581e-01, -6.10708060e-02],
            [-2.06991017e-01,  1.17424441e-01,  2.91158423e-02],
            [2.64352287e-01, -1.34677779e-01, -2.53939212e-01],
            [-1.50249232e-01,  1.07173053e-02,  2.28232267e-01],
            [4.97105667e-02, -2.58500526e-01, -7.00242278e-02],
            [-2.75667932e-01, -3.73316933e-01, -1.32854745e-01],
            [4.59126516e-01,  2.50757070e-01,  6.87413552e-02],
            [-9.27765547e-01, -1.68575699e-01,  1.36669853e-01],
            [5.47052906e-01,  4.26168559e-01,  3.32662686e-01],
            [8.25676347e-01, -5.54757928e-01,  1.81125634e-01],
            [-3.75257264e-01, -9.16369177e-02, -3.59722571e-02],
            [1.11883651e-01,  1.90886807e-01,  3.54825710e-02],
            [-3.95775490e-01, -1.12806953e-01,  7.73243007e-02],
            [-3.36016881e-01, -1.55860951e-01, -7.70383165e-02],
            [1.84074889e-01, -4.75142309e-01, -2.65398731e-01],
            [6.66780387e-01,  7.94844708e-01, -1.90526020e-01],
            [-8.79227526e-01, -3.14834468e-01,  2.45908974e-02],
            [8.55495828e-01, -9.59284488e-02, -1.33582269e-01],
            [-6.31681271e-01, -5.62585071e-01, -1.71323099e-01],
            [4.20958236e-01, -4.35931281e-01, -4.84462552e-02],
            [7.93494627e-01,  7.00260647e-02, -8.70474254e-03],
            [-5.77428631e-01,  1.83879750e-01,  7.94372314e-02],
            [-3.46791028e-01,  3.79709698e-02,  1.82388843e-01],
            [-1.53869129e+00,  2.71830352e-01, -9.09169931e-03],
            [7.38734855e-02, -1.50677047e-01,  2.27737201e-01],
            [1.49223166e+00, -2.05712361e-01, -9.78601508e-02],
            [-1.10264825e+00,  1.84309583e-01, -1.92733620e-01],
            [1.57571723e-01,  1.61480734e-01,  1.80688108e-02],
            [2.57772166e-01, -1.21150423e-01,  2.73823045e-01],
            [-5.12057145e-01, -2.33842069e-01,  1.95531300e-01],
            [1.79191706e-01,  5.30963789e-03, -1.76145877e-01],
            [-7.40146964e-02, -1.29918202e-02,  1.22018495e-01],
            [1.09629041e+00, -3.64453140e-02, -3.15662421e-01]
        ])
        np.testing.assert_array_almost_equal(
            np.abs(scores_sparse), np.abs(expected_scores))


class TestTransformNumericalIntegrationMultivariate(unittest.TestCase):
    def setUp(self):
        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            self.fdata = pickle.load(handle)
        
        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_sparse = pickle.load(handle)

        fdata_uni = self.fdata
        fdata_sparse = self.fdata_sparse
        self.fdata = MultivariateFunctionalData([fdata_uni, fdata_sparse])

    def test_transform_numerical_integration_multivariate(self):
        mfpca = MFPCA(method='inner-product', n_components=0.7, normalize=True)
        mfpca.fit(data=self.fdata)
        scores = _transform_numerical_integration_multivariate(self.fdata, mfpca.eigenfunctions)

        expected_scores = np.array([
            [-4.56444761e-01],
            [2.43770420e-01],
            [-7.38785298e-01],
            [2.39287319e-01],
            [-5.38374876e-01],
            [-5.74962356e-01],
            [7.14526542e-01],
            [8.60169365e-01],
            [1.64901904e-01],
            [-6.74334573e-01],
            [9.31593723e-01],
            [-5.87345948e-01],
            [-1.84350753e-01],
            [1.03095324e-01],
            [8.28122915e-01],
            [-1.98134176e-01],
            [6.02091003e-01],
            [-6.41690578e-02],
            [3.82975721e-01],
            [9.71023173e-01],
            [-4.20868099e-01],
            [2.68233758e-01],
            [8.37509070e-01],
            [-6.53105606e-01],
            [-7.22478619e-01],
            [5.75350353e-01],
            [1.36110854e-01],
            [-1.46226690e+00],
            [1.67101799e+00],
            [-1.18606114e-01],
            [1.59057538e+00],
            [-5.11352226e-01],
            [-8.85728948e-01],
            [-4.30343492e-01],
            [6.67024550e-01],
            [-5.58389506e-01],
            [-2.64105981e-01],
            [1.18005958e+00],
            [-2.15930623e-01],
            [8.94274925e-02],
            [-6.79627255e-01],
            [1.41099336e+00],
            [5.81806490e-01],
            [-9.93093519e-01],
            [2.37010635e-01],
            [-1.70466850e+00],
            [-4.13375021e-01],
            [1.16949072e+00],
            [1.68773674e+00],
            [-1.87696606e+00],
            [-8.81592347e-01],
            [1.83286103e-01],
            [1.06261972e-01],
            [-3.51663961e-01],
            [-8.20856786e-01],
            [5.21848616e-01],
            [-2.30072429e-01],
            [-3.49022579e-03],
            [-8.84081359e-02],
            [7.61193383e-01],
            [-1.25933657e-03],
            [-9.99688113e-01],
            [-1.50628132e+00],
            [1.28084581e-01],
            [-1.07613260e+00],
            [9.50364149e-01],
            [6.11816219e-01],
            [-4.10575530e-01],
            [-2.70318662e-01],
            [3.88385516e-01],
            [-2.06915263e-01],
            [9.41819873e-02],
            [-3.86388187e-01],
            [6.62393600e-01],
            [-1.31980178e+00],
            [7.60030303e-01],
            [1.16413750e+00],
            [-5.23758776e-01],
            [1.32474802e-01],
            [-5.69936992e-01],
            [-4.62063474e-01],
            [2.63597833e-01],
            [9.37416612e-01],
            [-1.23002803e+00],
            [1.20014848e+00],
            [-8.77658206e-01],
            [6.23176575e-01],
            [1.13579199e+00],
            [-7.99957501e-01],
            [-4.81752735e-01],
            [-2.19214811e+00],
            [9.84975176e-02],
            [2.13799781e+00],
            [-1.56680472e+00],
            [2.36388748e-01],
            [3.65328368e-01],
            [-7.25727542e-01],
            [2.64551569e-01],
            [-1.11263242e-01],
            [1.55403749e+00]
        ])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))


class TestTransformPACE(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            self.fdata = pickle.load(handle)
        
        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_sparse = pickle.load(handle)

    def test_pace_dense(self):
        uf_dense = UFPCA(n_components=2, method='covariance')
        uf_dense.fit(self.fdata)
    
        scores_dense = _transform_pace_dense(
            self.fdata, uf_dense.eigenfunctions, uf_dense.eigenvalues,
            uf_dense.covariance, uf_dense._noise_variance
        )
        expected_scores = np.array([
            [-0.31189085,  0.33682065],
            [0.18613475, -0.01407123],
            [-0.53173976,  0.06466848],
            [0.18265965,  0.14707671],
            [-0.38665821,  0.06257261],
            [-0.42114241, -0.00625075],
            [0.51806133, -0.09476735],
            [0.61288107, -0.13300502],
            [0.11000801, -0.06100332],
            [-0.48602035, -0.11048123],
            [0.68537565, -0.15111728],
            [-0.39780774, -0.18124536],
            [-0.11269477,  0.25290729],
            [0.08810566,  0.23520106],
            [0.60668251,  0.52727097],
            [-0.13457348,  0.21151236],
            [0.42010242,  0.03147984],
            [-0.04452754,  0.26288621],
            [0.27570407, -0.09151072],
            [0.68510468,  0.50862935],
            [-0.31676847, -0.17182367],
            [0.19510619,  0.37726484],
            [0.58934498, -0.34997788],
            [-0.46978267,  0.27811995],
            [-0.5276309,  0.30470055],
            [0.39744222, -0.45251665],
            [0.10189727,  0.20321637],
            [-1.04725763,  0.45185427],
            [1.21010955,  0.41334812],
            [-0.09512192,  0.38422705],
            [1.10420978,  0.23468101],
            [-0.3613064, -0.26042555],
            [-0.62044487, -0.05839291],
            [-0.27718713, -0.26020343],
            [0.47416116, -0.37168351],
            [-0.39510173, -0.40646503],
            [-0.21678613,  0.22508312],
            [0.83388029, -0.26189071],
            [-0.13837732,  0.32607229],
            [0.06240846, -0.1203866],
            [-0.49260048, -0.30395117],
            [1.00678482,  0.06773029],
            [0.43665111,  0.13758266],
            [-0.70201728, -0.26329707],
            [0.19383056, -0.3270985],
            [-1.22371397, -0.92028277],
            [-0.29905819,  0.42132742],
            [0.81327202,  0.30828436],
            [1.18716926, -0.13892028],
            [-1.31525452,  0.79405289],
            [-0.62849057, -0.41014594],
            [0.12367234, -0.17219258],
            [0.0600231, -0.05788688],
            [-0.28229251, -0.12905364],
            [-0.5727619,  0.45017469],
            [0.36080964,  0.51642306],
            [-0.16218265,  0.45791697],
            [-0.00968563, -0.10914031],
            [-0.07737931, -0.64818953],
            [0.55366961, -0.45363575],
            [0.01167916,  0.2001758],
            [-0.70596534,  0.24508594],
            [-1.06995263, -0.11034666],
            [0.0973316,  0.24471263],
            [-0.77591799,  0.21687523],
            [0.66735271,  0.11366862],
            [0.43530415, -0.37935577],
            [-0.29532873,  0.43781163],
            [-0.17492706,  0.14893061],
            [0.28976006, -0.0920135],
            [-0.14382379,  0.01164354],
            [0.08621063, -0.2679801],
            [-0.27296396, -0.37169627],
            [0.48314674,  0.26789456],
            [-0.95218735, -0.14885675],
            [0.53037703,  0.39708933],
            [0.82322075, -0.53419047],
            [-0.36638401, -0.10952159],
            [0.07448216,  0.18482796],
            [-0.41717999, -0.11312131],
            [-0.31708323, -0.15000322],
            [0.19016294, -0.49398695],
            [0.67076718,  0.76421102],
            [-0.86916711, -0.35166396],
            [0.84715348, -0.10885447],
            [-0.61269639, -0.50823013],
            [0.46400447, -0.44822416],
            [0.82225034,  0.11842926],
            [-0.55629323,  0.20095475],
            [-0.33759678,  0.06522064],
            [-1.57398352,  0.25219289],
            [0.06020891, -0.15855519],
            [1.54816609, -0.18186127],
            [-1.11853372,  0.18816937],
            [0.17968119,  0.14053945],
            [0.25558258, -0.11380846],
            [-0.52193233, -0.20999489],
            [0.20014305,  0.01553492],
            [-0.08822736,  0.02876938],
            [1.11446953, -0.02840211]
        ])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_pace_irregular(self):
        uf_sparse = UFPCA(n_components=2, method='covariance')
        uf_sparse.fit(self.fdata_sparse)
    
        scores_sparse = _transform_pace_irregular(
            self.fdata_sparse, uf_sparse.eigenfunctions,
            uf_sparse.eigenvalues, uf_sparse.covariance,
            uf_sparse._noise_variance
        )
        expected_scores = np.array([
            [-3.22511973e-01,  3.49534104e-01],
            [1.63090367e-01, -6.61165410e-03],
            [-5.27581862e-01,  2.66016559e-02],
            [1.51614909e-01,  1.87625050e-01],
            [-3.44329039e-01,  6.09845443e-02],
            [-3.99516235e-01, -3.16471692e-02],
            [4.96655571e-01, -9.22275147e-02],
            [6.05514926e-01, -1.15310514e-01],
            [1.36058700e-01, -4.28126543e-02],
            [-4.73760447e-01, -8.53085675e-02],
            [6.41084357e-01, -1.70160319e-01],
            [-4.14450128e-01, -1.54302825e-01],
            [-1.44464381e-01,  2.65418939e-01],
            [6.78937102e-02,  2.72310177e-01],
            [5.75235872e-01,  4.77390787e-01],
            [-1.46864052e-01,  2.06022434e-01],
            [4.38404314e-01,  5.65466143e-02],
            [-4.56337332e-02,  2.17776736e-01],
            [2.66847206e-01, -3.84497130e-02],
            [6.95685828e-01,  4.68580533e-01],
            [-2.93613825e-01, -1.63721134e-01],
            [1.88298445e-01,  3.90407385e-01],
            [5.95929887e-01, -3.50595065e-01],
            [-4.56093506e-01,  3.02702338e-01],
            [-5.03097701e-01,  3.00125452e-01],
            [4.34173972e-01, -4.77400861e-01],
            [1.04028898e-01,  2.44528771e-01],
            [-1.03016136e+00,  4.22739299e-01],
            [1.15758113e+00,  3.73120377e-01],
            [-7.35487161e-02,  4.03474816e-01],
            [1.14623254e+00,  2.35317303e-01],
            [-3.65677496e-01, -2.72335115e-01],
            [-6.23386794e-01, -6.86886766e-02],
            [-3.31736445e-01, -2.57825433e-01],
            [4.72212182e-01, -3.70887801e-01],
            [-3.97432854e-01, -4.15396903e-01],
            [-1.57201954e-01,  1.78058195e-01],
            [8.36773364e-01, -2.69905341e-01],
            [-1.75903025e-01,  2.91762407e-01],
            [6.29375668e-02, -1.21336184e-01],
            [-4.89489131e-01, -2.63825907e-01],
            [9.93769522e-01,  7.59825155e-02],
            [4.13667408e-01,  1.88889045e-01],
            [-7.06457008e-01, -2.77012896e-01],
            [1.51963736e-01, -2.96403366e-01],
            [-1.21184917e+00, -9.04741940e-01],
            [-2.99561324e-01,  4.10387803e-01],
            [8.46922059e-01,  3.01586835e-01],
            [1.19486448e+00, -1.17174997e-01],
            [-1.31312485e+00,  8.08618982e-01],
            [-6.21982555e-01, -3.90676995e-01],
            [1.32544020e-01, -1.74025391e-01],
            [9.08603172e-02, -4.67082732e-02],
            [-2.27881913e-01, -6.56537673e-02],
            [-6.06823012e-01,  4.50742283e-01],
            [3.72796791e-01,  5.02628529e-01],
            [-1.56853869e-01,  4.69498991e-01],
            [2.70611662e-03, -1.19887533e-01],
            [-6.29797862e-02, -6.73211081e-01],
            [5.57983634e-01, -4.31951097e-01],
            [-1.99809083e-02,  2.04566884e-01],
            [-7.07224879e-01,  2.18208233e-01],
            [-1.07077109e+00, -1.08910676e-01],
            [8.15064016e-02,  2.05394766e-01],
            [-7.53393604e-01,  1.79229404e-01],
            [6.84720934e-01,  9.45399669e-02],
            [4.28829758e-01, -3.85940332e-01],
            [-2.89672363e-01,  4.51646383e-01],
            [-2.05819770e-01,  1.27789486e-01],
            [2.57670530e-01, -1.36020437e-01],
            [-1.73071413e-01,  2.03312413e-02],
            [4.15943612e-02, -2.71826808e-01],
            [-2.75286084e-01, -3.64607049e-01],
            [4.56981855e-01,  2.51065588e-01],
            [-9.20257233e-01, -1.59863793e-01],
            [5.47695653e-01,  4.29394070e-01],
            [8.15482530e-01, -5.78497895e-01],
            [-3.71907603e-01, -9.21121740e-02],
            [1.11680240e-01,  1.91105728e-01],
            [-4.02529139e-01, -1.00514700e-01],
            [-3.33099368e-01, -1.54661527e-01],
            [1.82804761e-01, -4.77415157e-01],
            [6.69766660e-01,  7.88756664e-01],
            [-8.78383266e-01, -3.15006418e-01],
            [8.65036226e-01, -1.16769451e-01],
            [-6.18732785e-01, -5.64947852e-01],
            [4.36245349e-01, -4.40272846e-01],
            [7.92106518e-01,  7.13320114e-02],
            [-5.80854341e-01,  1.86196654e-01],
            [-3.50986345e-01,  6.41429583e-02],
            [-1.53288543e+00,  2.70944415e-01],
            [7.69924253e-02, -1.44889576e-01],
            [1.48889852e+00, -2.05959579e-01],
            [-1.10731694e+00,  2.02512320e-01],
            [1.56666478e-01,  1.61902275e-01],
            [2.52216772e-01, -1.10692430e-01],
            [-5.03259841e-01, -2.39032099e-01],
            [1.73315123e-01,  1.33298354e-03],
            [-7.95533392e-02, -2.09616746e-02],
            [1.10027464e+00, -3.78074422e-02]
        ])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))


class TestTransformInnPro(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        fname = THIS_DIR.parent / 'data/data_noisy_5_100_005.pickle'
        with open(fname, 'rb') as handle:
            self.fdata = pickle.load(handle)
        
        fname = THIS_DIR.parent / 'data/data_sparse_5_100_08.pickle'
        with open(fname, 'rb') as handle:
            self.fdata_sparse = pickle.load(handle)

    def test_innpro_dense(self):
        uf_dense = UFPCA(n_components=2, method='inner-product')
        uf_dense.fit(self.fdata)

        scores_dense = scores_dense = _transform_innpro(
            self.fdata, uf_dense._eigenvectors, uf_dense.eigenvalues
        )
        expected_scores = np.array([
            [-3.10981164e-01,  3.36158758e-01],
            [1.88651745e-01, -2.39363923e-02],
            [-5.27705003e-01,  5.58343245e-02],
            [1.87845317e-01,  1.37567165e-01],
            [-3.87534800e-01,  5.35129991e-02],
            [-4.17466927e-01, -1.70099261e-02],
            [5.20347568e-01, -1.03931909e-01],
            [6.19106204e-01, -1.45193529e-01],
            [1.11308113e-01, -7.40749354e-02],
            [-4.80461390e-01, -1.20291482e-01],
            [6.92881138e-01, -1.61457101e-01],
            [-3.99826990e-01, -1.88812328e-01],
            [-1.11298569e-01,  2.47723059e-01],
            [8.91235919e-02,  2.35659915e-01],
            [6.12749668e-01,  5.25161207e-01],
            [-1.31457622e-01,  2.05224563e-01],
            [4.23598045e-01,  2.42682834e-02],
            [-4.20667347e-02,  2.56176002e-01],
            [2.81886366e-01, -9.75628649e-02],
            [6.84520647e-01,  5.02000506e-01],
            [-3.12612717e-01, -1.79791499e-01],
            [1.96468556e-01,  3.68687852e-01],
            [5.92837803e-01, -3.61687942e-01],
            [-4.68981995e-01,  2.70793052e-01],
            [-5.25556425e-01,  2.98633635e-01],
            [4.04845433e-01, -4.57327131e-01],
            [9.99104074e-02,  1.96272477e-01],
            [-1.04348202e+00,  4.44652371e-01],
            [1.21751052e+00,  4.07178679e-01],
            [-9.23371902e-02,  3.80725250e-01],
            [1.10980988e+00,  2.27593284e-01],
            [-3.58169441e-01, -2.66642119e-01],
            [-6.20526991e-01, -6.67593445e-02],
            [-2.73981171e-01, -2.72387307e-01],
            [4.75847027e-01, -3.80518608e-01],
            [-3.88512956e-01, -4.15338254e-01],
            [-2.10527290e-01,  2.19662634e-01],
            [8.41647782e-01, -2.70583200e-01],
            [-1.34279568e-01,  3.24308564e-01],
            [6.71225331e-02, -1.31406393e-01],
            [-4.86970838e-01, -3.15333491e-01],
            [1.00882542e+00,  6.12226148e-02],
            [4.37410356e-01,  1.33550884e-01],
            [-7.02169053e-01, -2.71105167e-01],
            [1.93846407e-01, -3.35298527e-01],
            [-1.22098636e+00, -9.30235678e-01],
            [-2.94488937e-01,  4.14257743e-01],
            [8.14042569e-01,  2.99747894e-01],
            [1.19610906e+00, -1.47139724e-01],
            [-1.31759108e+00,  7.91238534e-01],
            [-6.29133275e-01, -4.24813527e-01],
            [1.26707856e-01, -1.81474922e-01],
            [6.21449073e-02, -6.71110833e-02],
            [-2.81660587e-01, -1.37444446e-01],
            [-5.68345468e-01,  4.43536085e-01],
            [3.67647800e-01,  5.14167136e-01],
            [-1.67990841e-01,  4.56095944e-01],
            [-5.16181602e-03, -1.20096355e-01],
            [-7.82461472e-02, -6.58872905e-01],
            [5.57236293e-01, -4.61043557e-01],
            [1.41444941e-02,  1.89311906e-01],
            [-7.05045090e-01,  2.41793442e-01],
            [-1.06736834e+00, -1.22829028e-01],
            [1.02118686e-01,  2.39091612e-01],
            [-7.71754562e-01,  2.10297532e-01],
            [6.67094432e-01,  1.05710861e-01],
            [4.41118707e-01, -3.86085457e-01],
            [-2.93467798e-01,  4.32069817e-01],
            [-1.70697710e-01,  1.43070752e-01],
            [2.89282311e-01, -1.02072934e-01],
            [-1.38623000e-01,  8.67123532e-05],
            [8.85731447e-02, -2.75505661e-01],
            [-2.72384032e-01, -3.83160633e-01],
            [4.88214747e-01,  2.62143853e-01],
            [-9.46928843e-01, -1.57584977e-01],
            [5.36741813e-01,  3.94276023e-01],
            [8.29196136e-01, -5.40685134e-01],
            [-3.64489149e-01, -1.19100503e-01],
            [7.65640870e-02,  1.78829204e-01],
            [-4.12534490e-01, -1.25050500e-01],
            [-3.17097786e-01, -1.66754256e-01],
            [1.91204615e-01, -5.05236341e-01],
            [6.70497524e-01,  7.61281247e-01],
            [-8.66238601e-01, -3.62487075e-01],
            [8.48785740e-01, -1.15249717e-01],
            [-6.15698319e-01, -5.16066658e-01],
            [4.67516540e-01, -4.58500385e-01],
            [8.25170597e-01,  1.09546157e-01],
            [-5.52328500e-01,  1.94724929e-01],
            [-3.30462262e-01,  5.51236553e-02],
            [-1.57367142e+00,  2.41981353e-01],
            [6.74974778e-02, -1.65872131e-01],
            [1.55112881e+00, -1.90312790e-01],
            [-1.11939391e+00,  1.77538481e-01],
            [1.83674533e-01,  1.31449323e-01],
            [2.64481765e-01, -1.22908261e-01],
            [-5.17294957e-01, -2.17427150e-01],
            [2.01133907e-01,  4.63886533e-03],
            [-8.12592615e-02,  1.92835190e-02],
            [1.11251125e+00, -3.72712460e-02]
        ])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_innpro_irregular(self):
        uf_sparse = UFPCA(n_components=2, method='inner-product')
        uf_sparse.fit(self.fdata_sparse)

        scores_sparse = _transform_innpro(
            self.fdata_sparse, uf_sparse._eigenvectors, uf_sparse.eigenvalues
        )
        expected_scores = np.array([
            [-0.33113269,  0.35216857],
            [0.16865132, -0.01290262],
            [-0.51374297,  0.02901997],
            [0.1627761,  0.1615115],
            [-0.37029011,  0.05903185],
            [-0.39492792, -0.04635244],
            [0.50363658, -0.09677051],
            [0.61148698, -0.12573937],
            [0.12646921, -0.07417158],
            [-0.47332971, -0.09116],
            [0.64346486, -0.17772516],
            [-0.42353945, -0.15752261],
            [-0.13905664,  0.25917612],
            [0.06774341,  0.259962],
            [0.57545134,  0.46498739],
            [-0.14342059,  0.19763344],
            [0.43930483,  0.0486187],
            [-0.03938158,  0.21048546],
            [0.27187017, -0.04191416],
            [0.70336447,  0.47091721],
            [-0.2789118, -0.16508928],
            [0.19245569,  0.38406484],
            [0.60428705, -0.35473998],
            [-0.46096305,  0.28654703],
            [-0.49420386,  0.28083815],
            [0.42636413, -0.47911309],
            [0.10145043,  0.22426519],
            [-1.02389782,  0.40914575],
            [1.17070087,  0.37003217],
            [-0.06898507,  0.39659679],
            [1.15429825,  0.23266327],
            [-0.35994965, -0.27637722],
            [-0.62832117, -0.06277364],
            [-0.32541366, -0.2654213],
            [0.47841294, -0.37311087],
            [-0.39492977, -0.42683578],
            [-0.16606693,  0.17351823],
            [0.84404958, -0.28008871],
            [-0.15987674,  0.2940597],
            [0.06862972, -0.12662977],
            [-0.47809278, -0.28509184],
            [1.00307831,  0.06777314],
            [0.401621,  0.18148816],
            [-0.7050387, -0.2868137],
            [0.15355356, -0.2993076],
            [-1.20633451, -0.92023623],
            [-0.29072766,  0.40239753],
            [0.8510428,  0.30670042],
            [1.20926857, -0.12631182],
            [-1.33575049,  0.79758763],
            [-0.61696469, -0.38771831],
            [0.13830695, -0.18232601],
            [0.09345587, -0.0523522],
            [-0.22368255, -0.07816607],
            [-0.58541892,  0.43176874],
            [0.37537514,  0.4906347],
            [-0.1517822,  0.43080411],
            [0.00857507, -0.12671435],
            [-0.04418439, -0.66873225],
            [0.56537559, -0.43344625],
            [-0.00504764,  0.2088888],
            [-0.70553999,  0.21161664],
            [-1.0635193, -0.11922839],
            [0.09084033,  0.20100213],
            [-0.75085645,  0.16992547],
            [0.68724592,  0.09964642],
            [0.43645522, -0.3863187],
            [-0.28983493,  0.44118624],
            [-0.20129891,  0.11081645],
            [0.27093877, -0.13341483],
            [-0.15060092,  0.00752823],
            [0.05123589, -0.2733035],
            [-0.26814293, -0.37888411],
            [0.46351595,  0.24473878],
            [-0.92200539, -0.18248423],
            [0.55025207,  0.41318268],
            [0.83146061, -0.56333343],
            [-0.36973633, -0.09902084],
            [0.11756398,  0.18501754],
            [-0.39573193, -0.11467128],
            [-0.32970794, -0.16173979],
            [0.19010086, -0.47464177],
            [0.66999161,  0.79735583],
            [-0.87257554, -0.3261674],
            [0.87338125, -0.11403953],
            [-0.62457581, -0.56866175],
            [0.4387604, -0.45571237],
            [0.79908947,  0.06774668],
            [-0.5721759,  0.17311938],
            [-0.34850912,  0.03731951],
            [-1.53428361,  0.25977353],
            [0.07908549, -0.16245338],
            [1.4982557, -0.20353768],
            [-1.10603677,  0.19160117],
            [0.16285392,  0.15575747],
            [0.26098574, -0.12971373],
            [-0.50619678, -0.24755575],
            [0.18499505,  0.00461736],
            [-0.06877229, -0.02355676],
            [1.10244325, -0.03079244]
        ])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))

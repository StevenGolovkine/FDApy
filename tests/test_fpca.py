#!/usr/bin/python3
# -*-coding:utf8 -*
"""Module that contains unit tests for the class UFPCA in the fpca.py file.

Written with the help of ChatGPT.

"""
import numpy as np
import unittest
import warnings

from FDApy.representation.argvals import DenseArgvals
from FDApy.representation.values import DenseValues
from FDApy.representation.functional_data import MultivariateFunctionalData
from FDApy.simulation.karhunen import KarhunenLoeve
from FDApy.preprocessing.dim_reduction.fpca import (
    UFPCA,
    MFPCA,
    _fit_covariance,
    _fit_covariance_multivariate,
    _fit_inner_product,
    _fit_inner_product_multivariate,
    _transform_numerical_integration_dense,
    _transform_numerical_integration_irregular,
    _transform_numerical_integration_multivariate,
    _transform_pace_dense,
    _transform_pace_irregular,
    _transform_innpro
)


class TestFitCovariance(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=100)
        kl.sparsify(0.8, 0.05)

        self.fdata_uni = kl.data
        self.fdata_sparse = kl.sparse_data

    def test_fit_covariance_dense(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata_uni, points=points, n_components=3)

        expected_eigenvalues = np.array([0.249208  , 0.11510566, 0.05382122])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[-2.03050399e-01, -1.28816058e-02,  1.58461253e-01,   3.12084925e-01,  4.48608916e-01,  5.67813128e-01,   6.71393644e-01,  7.61050939e-01,  8.38270483e-01,   9.04603116e-01,  9.61523904e-01,  1.01051016e+00,   1.05313115e+00,  1.09096996e+00,  1.12560006e+00,   1.15825499e+00,  1.18934515e+00,  1.21840081e+00,   1.24416558e+00,  1.26500126e+00,  1.27926904e+00,   1.28536490e+00,  1.28175573e+00,  1.26691694e+00,   1.23924699e+00,  1.19723682e+00,  1.13896279e+00,   1.06237725e+00,  9.69200082e-01,  8.60231831e-01,   7.35341051e-01], [-1.87465891e+00, -1.78530124e+00, -1.70093552e+00,  -1.61868936e+00, -1.53396349e+00, -1.44138716e+00,  -1.34249113e+00, -1.23838079e+00, -1.12938083e+00,  -1.01595434e+00, -8.98522110e-01, -7.77518446e-01,  -6.53351887e-01, -5.26421711e-01, -3.97158188e-01,  -2.66068751e-01, -1.33996886e-01, -2.09931192e-03,   1.28241691e-01,  2.55449294e-01,  3.77955334e-01,   4.94221661e-01,  6.02713920e-01,  7.01919576e-01,   7.90260404e-01,  8.66282936e-01,  9.27798870e-01,   9.72197049e-01,  1.00370793e+00,  1.02566344e+00,   1.03976094e+00], [ 1.75152846e+00,  1.48624714e+00,  1.23319139e+00,   9.90945002e-01,  7.57849945e-01,  5.33284961e-01,   3.20364665e-01,  1.21078648e-01, -6.34034473e-02,  -2.31694338e-01, -3.82397003e-01, -5.14149040e-01,  -6.25545611e-01, -7.15138244e-01, -7.81363353e-01,  -8.22434472e-01, -8.36519252e-01, -8.21777519e-01,  -7.76141442e-01, -6.97478613e-01, -5.83564682e-01,  -4.31959834e-01, -2.40317262e-01, -6.36913765e-03,   2.72342877e-01,  5.98631433e-01,  9.74050370e-01,   1.39697189e+00,  1.86981071e+00,  2.39976001e+00,   2.99455896e+00]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_noise = 0.014204431460944762
        np.testing.assert_almost_equal(results['noise_variance_cov'], expected_noise)

    def test_fit_covariance_irregular(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_covariance(data=self.fdata_sparse, points=points, n_components=3)

        expected_eigenvalues = np.array([0.25039568, 0.11548423, 0.05415895])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[-0.22004529, -0.03219429,  0.13773589,  0.30001494,   0.46207611,  0.60961836,  0.73063454,  0.81031355,   0.85748449,  0.89850535,  0.94699771,  1.01080893,   1.06807786,  1.10111334,  1.12061952,  1.14621192,   1.18029694,  1.2156647 ,  1.24588578,  1.2699721 ,   1.28388024,  1.29036547,  1.28494763,  1.25210825,   1.20593077,  1.16052985,  1.10085329,  1.02966196,   0.95531412,  0.88651111,  0.85587579], [-1.98403232, -1.77704242, -1.66479685, -1.58372222,  -1.51019657, -1.43646396, -1.34599018, -1.23768187,  -1.10293329, -0.9648364 , -0.83998325, -0.73885463,  -0.65867079, -0.56506005, -0.44591305, -0.29288539,  -0.15283413, -0.02262808,  0.10788183,  0.23879689,   0.37646003,  0.50975427,  0.62639165,  0.72027683,   0.79483645,  0.86458321,  0.93778743,  0.99963232,   1.04445634,  1.07390297,  1.06067932], [ 1.73045808,  1.35721894,  1.1459679 ,  0.96243124,   0.78403516,  0.59366248,  0.36960302,  0.16265274,  -0.01558696, -0.18087274, -0.34024768, -0.47811362,  -0.57875294, -0.65694524, -0.70426965, -0.75096739,  -0.78398543, -0.79080569, -0.76423205, -0.70816079,  -0.64538609, -0.56468348, -0.41711984, -0.16919133,   0.15823433,  0.53777091,  0.95793989,  1.41576884,   1.911816  ,  2.49024978,  3.07602527]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_noise = 0.013971444244734173
        np.testing.assert_almost_equal(results['noise_variance_cov'], expected_noise)


class TestFitCovarianceMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.sparsify(0.8, 0.05)

        fdata_uni = kl.data
        fdata_sparse = kl.sparse_data

        kl_2d = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42, dimension='2D'
        )
        kl_2d.new(n_obs=10)

        fdata_uni_2d = kl_2d.data

        self.fdata = MultivariateFunctionalData([fdata_uni, fdata_sparse])
        self.fdata_2d = MultivariateFunctionalData([fdata_uni, fdata_uni_2d])

    def test_fit_covariance_dense_and_sparse(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_covariance_multivariate(data=self.fdata, points=points, n_components=[0.95, 3], smooth=True, scores_method='NumInt')

        expected_eigenvalues = np.array([6.38683200e+00, 5.13910813e+00, 1.22617718e+00, 5.75255764e-03, 9.91253147e-04, 4.92028568e-05])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions_0 = np.array([[ 1.07053973,  0.98946898,  0.91088009,  0.83471286,   0.76090073,  0.68937701,  0.62010631,  0.55301668,   0.48807129,  0.42520934,  0.36441746,  0.3056667 ,   0.2489456 ,  0.19426364,  0.14166991,  0.09124126,   0.04295845, -0.0033886 , -0.04784297, -0.09045033,  -0.1312587 , -0.17031911, -0.20768627, -0.24342011,  -0.27757803, -0.31021233, -0.34137503, -0.37111872,  -0.3994963 , -0.42656086, -0.4523656 , -0.47696374,  -0.5004085 , -0.52275307, -0.5440506 , -0.56435422,  -0.58371711, -0.60219304, -0.61983707, -0.63670593,  -0.65285795, -0.66835247, -0.68324879, -0.69760482,  -0.71147548, -0.72491093, -0.73795485, -0.75064278,  -0.7630006 , -0.77504335, -0.78677419, -0.79818386,  -0.80925043, -0.81993947, -0.83020464, -0.83998855,  -0.84922406, -0.8578357 , -0.86574144, -0.87285441,  -0.87908466, -0.8843408 , -0.88853138, -0.89156596,  -0.89335573, -0.89381353, -0.8928536 , -0.89039079,  -0.88634017, -0.88061689, -0.87313619, -0.86381335,  -0.85256371, -0.83930261, -0.8239454 , -0.80640751,  -0.78660452, -0.7644523 , -0.73986668, -0.71276026,  -0.68304376, -0.65063138, -0.61543974, -0.5773875 ,  -0.53639463, -0.49238246, -0.44497219, -0.3940964 ,  -0.33990408, -0.28252589, -0.22203304, -0.15846078,  -0.0918066 , -0.02211295,  0.05069094,  0.12661739,   0.20576623,  0.28813754,  0.37381768,  0.46288463,   0.55540237]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values[:1, :]), np.abs(expected_eigenfunctions_0))

        expected_eigenfunctions_1 = np.array([[ 1.49595962,  1.31731711,  1.16957307,  1.04240521,   0.92678556,  0.81788158,  0.71419866,  0.61644466,   0.52641942,  0.44389437,  0.36907837,  0.30086162,   0.24033086,  0.18447304,  0.13178225,  0.08305898,   0.03739251, -0.00924305, -0.05743407, -0.10412637,  -0.14749196, -0.18762915, -0.22913239, -0.26904722,  -0.30628499, -0.34588525, -0.39009112, -0.43522257,  -0.47827888, -0.52037859, -0.560775  , -0.59596014,  -0.62648584, -0.65286384, -0.67563345, -0.69474384,  -0.71105402, -0.72501895, -0.73645144, -0.74504983,  -0.75239797, -0.76098776, -0.77173638, -0.78481044,  -0.80237414, -0.82515717, -0.85044804, -0.87787243,  -0.90622446, -0.93449135, -0.96403801, -0.99368507,  -1.02197624, -1.04888488, -1.07139151, -1.08820598,  -1.10184158, -1.11373093, -1.12192546, -1.12490587,  -1.1248308 , -1.12350947, -1.11809811, -1.11009254,  -1.10318362, -1.09938628, -1.09792872, -1.09794871,  -1.10140163, -1.10538593, -1.1067845 , -1.10396959,  -1.09703675, -1.08639429, -1.07222139, -1.05624267,  -1.03605607, -1.0096757 , -0.97807605, -0.94033429,  -0.89509508, -0.84282899, -0.78409959, -0.71781593,  -0.64762397, -0.57508919, -0.49986519, -0.42346451,  -0.34704616, -0.27116536, -0.19567367, -0.12077412,  -0.04779393,  0.02249044,  0.08994414,  0.1533842 ,   0.21320548,  0.27125435,  0.3282855 ,  0.38607852,   0.45509025]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values[:1, :]), np.abs(expected_eigenfunctions_1))

    def test_fit_covariance_2d(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_covariance_multivariate(data=self.fdata_2d, points=points, n_components=[0.95, 3], smooth=True, scores_method='NumInt')

        expected_eigenvalues = np.array([2.53005561e+00, 2.03399491e+00, 5.19043916e-01, 1.57933947e-03, 8.62354746e-04, 6.40194497e-06])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues, decimal=4)

        expected_eigenfunctions_0 = np.array([[ 1.76832968,  1.63647616,  1.50869432,  1.38488337,   1.2649328 ,  1.14873314,  1.03622151,  0.92728052,   0.82184641,  0.71981878,  0.62117   ,  0.52584917,   0.4338324 ,  0.34512918,  0.25981332,  0.17800593,   0.09967996,  0.02450047, -0.0476014 , -0.11669904,  -0.18286991, -0.24619662, -0.3067682 , -0.36468268,  -0.42003374, -0.47290618, -0.52338435, -0.57155353,  -0.61749955, -0.66130861, -0.70306703, -0.74286122,  -0.78077757, -0.81690241, -0.85132202, -0.88412265,  -0.91539062, -0.94521321, -0.97367975, -1.00088227,  -1.02691536, -1.0518752 , -1.07585792, -1.09895736,  -1.12126254, -1.14285481, -1.16380511, -1.18417124,  -1.20399554, -1.22330284, -1.24209897, -1.26036974,  -1.27808064, -1.29517709, -1.31158533, -1.32721393,  -1.34195569, -1.35569012, -1.36828608, -1.3796047 ,  -1.38950211, -1.39783212, -1.40444842, -1.40920631,  -1.41196365, -1.41258105, -1.41092124, -1.40684805,  -1.40022557, -1.39091806, -1.37878991, -1.36370558,  -1.34552959, -1.32412649, -1.29936087, -1.27109739,  -1.23920097, -1.20353701, -1.1639708 , -1.1203626 ,  -1.07256966, -1.02045472, -0.96388436, -0.90272833,  -0.83685847, -0.76614875, -0.68999673, -0.60829608,  -0.5212829 , -0.42916263, -0.33204562, -0.22998488,  -0.12297372, -0.011076  ,  0.1058226 ,  0.22774454,   0.35484982,  0.48714205,  0.62476024,  0.76783045,   0.91645703]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values[:1, :]), np.abs(expected_eigenfunctions_0), decimal=2)

        expected_eigenfunctions_1 = np.array([[[0.08823131, 0.08651734, 0.08513037, 0.08464487,   0.08512195, 0.08645545, 0.08849604, 0.09109433,   0.09411454, 0.09743774, 0.10096147, 0.10459823,   0.10827379, 0.11192546, 0.1155007 , 0.11895571,   0.12225435, 0.1253671 , 0.1282702 , 0.13094488,   0.13337675, 0.13555517, 0.13747277, 0.13912505,   0.14050996, 0.1416276 , 0.14247992, 0.14307047,   0.14340419, 0.14348724, 0.14332676, 0.14293082,   0.14230821, 0.14146837, 0.14042125, 0.13917726,   0.13774716, 0.13614196, 0.13437291, 0.13245134,   0.1303887 , 0.12819639, 0.12588577, 0.12346804,   0.12095422, 0.11835503, 0.11568081, 0.11294148,   0.11014641, 0.10730441, 0.10442371, 0.10151223,   0.09857801, 0.0956288 , 0.09267171, 0.08971326,   0.08675936, 0.0838154 , 0.08088632, 0.07797665,   0.07509056, 0.07223195, 0.06940442, 0.06661136,   0.06385597, 0.06114126, 0.05847009, 0.05584519,   0.05326917, 0.05074454, 0.04827372, 0.04585903,   0.04350274, 0.04120703, 0.03897402, 0.03680579,   0.03470435, 0.03267163, 0.03070955, 0.02881993,   0.02700457, 0.02526519, 0.02360345, 0.02202094,   0.02051917, 0.01909958, 0.0177635 , 0.01651218,   0.01534672, 0.01426812, 0.01327722, 0.01237469,   0.01156102, 0.01083648, 0.0102011 , 0.00965465,   0.00919666, 0.00882648, 0.00854352, 0.00834814,   0.00824386]]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values[:1, :1]), np.abs(expected_eigenfunctions_1), decimal=2)


class TestFitInnerProduct(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=100)
        kl.sparsify(0.8, 0.05)

        self.fdata_uni = kl.data
        self.fdata_sparse = kl.sparse_data

    def test_fit_inner_product_dense(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_inner_product(data=self.fdata_uni, points=points, n_components=3)

        expected_eigenvalues = np.array([0.24673014, 0.11341369, 0.05241994])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 1.92898489e-01,  1.79205287e-02, -1.42696376e-01,  -2.89854918e-01, -4.25245980e-01, -5.46155750e-01,  -6.51800799e-01, -7.43382914e-01, -8.22701229e-01,  -8.91208237e-01, -9.50202359e-01, -1.00138610e+00,  -1.04621086e+00, -1.08602076e+00, -1.12214222e+00,  -1.15534773e+00, -1.18584412e+00, -1.21336147e+00,  -1.23706625e+00, -1.25556488e+00, -1.26745423e+00,  -1.27122184e+00, -1.26509400e+00, -1.24771733e+00,  -1.21757827e+00, -1.17280243e+00, -1.11213713e+00,  -1.03639676e+00, -9.48405987e-01, -8.46403682e-01,  -7.29449279e-01], [ 1.83569188e+00,  1.76679439e+00,  1.69221823e+00,   1.61226456e+00,  1.52755023e+00,  1.43693797e+00,   1.34001851e+00,  1.23715591e+00,  1.12896672e+00,   1.01592556e+00,  8.98428093e-01,  7.77059274e-01,   6.52294134e-01,  5.24578742e-01,  3.94569768e-01,   2.62993204e-01,  1.30782817e-01, -8.81943981e-04,  -1.30681417e-01, -2.57022958e-01, -3.78375521e-01,  -4.93168482e-01, -5.99601380e-01, -6.96228861e-01,  -7.81479901e-01, -8.53449514e-01, -9.10796871e-01,  -9.54149932e-01, -9.86085452e-01, -1.00486664e+00,  -1.00952598e+00], [ 1.75735153e+00,  1.50275412e+00,  1.25419702e+00,   1.01244559e+00,  7.77850538e-01,  5.52870168e-01,   3.39875806e-01,  1.40642373e-01, -4.36397295e-02,  -2.11535241e-01, -3.61173749e-01, -4.91460344e-01,  -6.00959525e-01, -6.87694159e-01, -7.50603213e-01,  -7.88101500e-01, -7.97844340e-01, -7.78535540e-01,  -7.28235811e-01, -6.44130826e-01, -5.24791331e-01,  -3.68128352e-01, -1.71126950e-01,  6.75143598e-02,   3.49884793e-01,  6.79138285e-01,  1.05643732e+00,   1.47762350e+00,  1.93383960e+00,  2.42879003e+00,   2.96389522e+00]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.008733  , -0.0030051 , -0.1741724 ],[ 0.04219662, -0.04267833, -0.12641441],[-0.12108065,  0.06025756,  0.0943915 ],[-0.0088194 , -0.06732271, -0.00186014],[-0.01954053, -0.01493807, -0.09659307],[-0.07602117, -0.00119646,  0.00662709],[ 0.06174976,  0.09383498,  0.1993483 ],[ 0.0743865 ,  0.04751714,  0.15987125],[-0.00844423,  0.06093655,  0.08744061],[-0.09233449,  0.0587303 ,  0.0147853 ],[ 0.08214717,  0.0623118 ,  0.0459721 ],[-0.04111606, -0.03299329, -0.01772025],[-0.03840731, -0.16234148, -0.03435818],[-0.01319255, -0.0057966 ,  0.05709688],[ 0.07032875, -0.19492882, -0.01097621],[-0.02659881,  0.00597957,  0.01271511],[ 0.09544327,  0.0269896 , -0.05507715],[-0.02612558, -0.03358465,  0.07178676],[ 0.06910697,  0.08655483, -0.08191197],[ 0.11580859, -0.18118686, -0.10648156],[-0.05191057,  0.07555372, -0.07798331],[ 0.05107248, -0.05283492, -0.13513753],[ 0.10289094,  0.0760332 ,  0.05857227],[-0.09748488, -0.05444236, -0.04148754],[-0.11580292, -0.11324362,  0.01259335],[ 0.06390819,  0.15776016, -0.0024374 ],[ 0.07271434, -0.0510693 , -0.17024385],[-0.245899  , -0.18258888,  0.16383405],[ 0.15774371, -0.06771167,  0.05670714],[-0.03336886, -0.10899231,  0.0049511 ],[ 0.16382707, -0.09865221,  0.0664193 ],[-0.01245946,  0.19222919, -0.04165432],[-0.05484743, -0.06948657, -0.07528548],[-0.04378362,  0.0295348 , -0.06717049],[ 0.1152519 ,  0.06876932, -0.12340069],[-0.07533277,  0.12357182,  0.03105574],[-0.07291166,  0.03772542,  0.13680281],[ 0.08763994,  0.06825273,  0.28354455],[-0.04314766,  0.07600723,  0.02954068],[ 0.00472009, -0.00675604, -0.04149717],[-0.0516362 ,  0.17621988, -0.15315217],[ 0.16069783, -0.04721407,  0.0270464 ],[ 0.08171064, -0.01289092,  0.02699787],[-0.0762568 ,  0.15560226, -0.05832435],[ 0.04281682,  0.0404213 , -0.01060694],[-0.14968107,  0.27157739, -0.09438429],[-0.03812314, -0.13460153, -0.14962479],[ 0.17543729, -0.14449541, -0.07102004],[ 0.13786597, -0.11923821,  0.21232715],[-0.19201353, -0.16896278, -0.24088401],[-0.04267361,  0.07809812, -0.11694755],[ 0.03947559,  0.12374036, -0.05156695],[ 0.01933876, -0.02599894,  0.02024273],[-0.03676911,  0.07850294,  0.04660694],[-0.16831218, -0.14008614,  0.10865772],[ 0.01062076, -0.0990011 ,  0.103197  ],[ 0.01643114, -0.05393901, -0.10169906],[ 0.00827094,  0.00661658, -0.03329161],[ 0.07196644,  0.11553371, -0.10237994],[ 0.10200702,  0.07022124,  0.05494097],[ 0.02298408,  0.02264207,  0.05837924],[-0.13074488, -0.13757273,  0.03680965],[-0.16969617,  0.09560838,  0.06460298],[ 0.00739114, -0.01519597, -0.07752542],[-0.15391309, -0.02887034,  0.15381423],[ 0.14394465, -0.01547485,  0.00297279],[ 0.06062948,  0.15479084,  0.12153651],[-0.06729462, -0.17039177, -0.02180165],[-0.06801167, -0.17974878,  0.01169363],[ 0.06036134, -0.15345737, -0.01581285],[-0.0821605 ,  0.01142586,  0.14453963],[ 0.02788152,  0.07011333, -0.00876139],[-0.00459663,  0.07771313, -0.0619854 ],[ 0.03061428, -0.01575465,  0.1985644 ],[-0.16626106,  0.07016121,  0.01624366],[ 0.01781897,  0.05128193,  0.19213513],[ 0.14797004,  0.16614177, -0.05687796],[-0.02310504,  0.03680472, -0.18263189],[-0.00740353, -0.17959672, -0.04244708],[-0.05914212,  0.07729665, -0.05607531],[-0.04294082,  0.01587882,  0.0014898 ],[ 0.11105764,  0.10102984, -0.16272543],[ 0.10290305, -0.28270517, -0.06850217],[-0.1498238 ,  0.07413551,  0.07118855],[ 0.17512663,  0.01189553, -0.04194826],[-0.05372605,  0.1024595 , -0.06303869],[ 0.07879285, -0.00282842,  0.02639226],[ 0.11103174, -0.0882354 ,  0.05433985],[-0.10295865, -0.00816072, -0.04727131],[-0.09245344, -0.06339003, -0.02768822],[-0.24676993, -0.00992003, -0.07835909],[-0.01863479,  0.06313668,  0.05060027],[ 0.26912758,  0.0322884 , -0.00582812],[-0.13396673, -0.01017556, -0.18631445],[ 0.00173354, -0.03987268,  0.09115262],[-0.0457993 , -0.05354499,  0.25821317],[-0.09885875,  0.10451185,  0.00982951],[ 0.04144853, -0.0526841 ,  0.03110231],[-0.02675141,  0.0836424 ,  0.0541262 ],[ 0.24128846,  0.03199564, -0.05867297]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_sparse(self):
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        results = _fit_inner_product(data=self.fdata_sparse, points=points, n_components=3)

        expected_eigenvalues = np.array([0.24649833, 0.1137788 , 0.05212135])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 0.19636438,  0.02125519, -0.14005918, -0.28813728,  -0.42377688, -0.54552593, -0.6520702 , -0.744216  ,  -0.8240726 , -0.89097075, -0.94986273, -1.00164188,  -1.04701944, -1.08693021, -1.12255272, -1.15586398,  -1.18675239, -1.21473185, -1.2384959 , -1.25652116,  -1.26809665, -1.27282571, -1.26761257, -1.24999892,  -1.21915835, -1.17204011, -1.11031743, -1.03533594,  -0.94800222, -0.84637128, -0.72847034], [ 1.85296532,  1.77952118,  1.70006731,  1.61855225,   1.53417317,  1.44141348,  1.33912514,  1.23344899,   1.12477527,  1.01051501,  0.89251183,  0.77117267,   0.64673576,  0.51928066,  0.38963667,  0.2587177 ,   0.12702214, -0.00471786, -0.13458023, -0.25872473,  -0.37840861, -0.49230786, -0.59755202, -0.69310247,  -0.77704053, -0.84689188, -0.90174741, -0.94223177,  -0.97233566, -0.9892469 , -0.99233856], [ 1.8028723 ,  1.53006688,  1.26585579,  1.01041307,   0.76444218,  0.53027842,  0.31076682,  0.10551149,  -0.08304786, -0.25051647, -0.39777679, -0.52457765,  -0.62945825, -0.70981339, -0.76549595, -0.79418034,  -0.79605841, -0.77033618, -0.71075325, -0.61650887,  -0.49024965, -0.33052509, -0.13443109,  0.10493825,   0.39020596,  0.72061395,  1.09052764,  1.49372976,   1.93111147,  2.40830272,  2.92140825]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.00910154, -0.0038095 , -0.16806664],[ 0.04188371, -0.04489693, -0.127812  ],[-0.12093194,  0.06142492,  0.09580927],[-0.00880084, -0.0679463 , -0.00161218],[-0.01965687, -0.01520458, -0.09570006],[-0.0759594 , -0.00137035,  0.00544256],[ 0.0620322 ,  0.09656572,  0.20116714],[ 0.0744255 ,  0.04925143,  0.16147601],[-0.00824469,  0.06171693,  0.08811699],[-0.09233473,  0.05875602,  0.01419238],[ 0.08222939,  0.06231011,  0.04525034],[-0.04117416, -0.03303263, -0.02050286],[-0.03840118, -0.16323449, -0.03565668],[-0.0132027 , -0.00423823,  0.06191324],[ 0.07023947, -0.19500853, -0.00876886],[-0.0266523 ,  0.00667516,  0.01653176],[ 0.09519145,  0.02618695, -0.05323836],[-0.02601748, -0.03276029,  0.07376482],[ 0.06896085,  0.08596398, -0.07927654],[ 0.11572843, -0.18197602, -0.10398798],[-0.05214294,  0.07476651, -0.07743923],[ 0.05099614, -0.0534987 , -0.13085668],[ 0.10315477,  0.07598124,  0.05542574],[-0.09755299, -0.05472997, -0.03823515],[-0.11588619, -0.1135988 ,  0.01272473],[ 0.06413411,  0.15707466, -0.005557  ],[ 0.07219447, -0.05237664, -0.16669149],[-0.24561044, -0.18084733,  0.16437534],[ 0.15796153, -0.06754167,  0.06138227],[-0.03329528, -0.1083646 ,  0.00723027],[ 0.16399742, -0.09807323,  0.06819644],[-0.01254217,  0.19244956, -0.04015588],[-0.05501956, -0.06983538, -0.07926593],[-0.04390541,  0.0284476 , -0.07066709],[ 0.1150203 ,  0.06673271, -0.12735365],[-0.07536898,  0.1232789 ,  0.02661248],[-0.07265834,  0.03947412,  0.14038681],[ 0.08862453,  0.07116714,  0.27936892],[-0.0430622 ,  0.07663683,  0.03598326],[ 0.00459786, -0.00798013, -0.04413678],[-0.05184541,  0.17445591, -0.15150624],[ 0.16073187, -0.04746694,  0.0279024 ],[ 0.08189295, -0.012636  ,  0.0298262 ],[-0.07632752,  0.15523769, -0.05847339],[ 0.04280534,  0.04017421, -0.01424986],[-0.14947517,  0.2707431 , -0.10094521],[-0.03853431, -0.13664771, -0.1461977 ],[ 0.17508176, -0.14410874, -0.06870476],[ 0.13818627, -0.11826561,  0.20827457],[-0.19276672, -0.17082213, -0.23286756],[-0.04297143,  0.07677438, -0.12113148],[ 0.03923105,  0.12331554, -0.05033617],[ 0.01917497, -0.02616612,  0.01980409],[-0.03676262,  0.07720601,  0.04476263],[-0.16821277, -0.13889844,  0.11063537],[ 0.01053336, -0.0977658 ,  0.10816885],[ 0.0166158 , -0.05448327, -0.09676366],[ 0.00827632,  0.00610776, -0.03503116],[ 0.07187156,  0.1143625 , -0.11155926],[ 0.1027196 ,  0.07136934,  0.04517632],[ 0.02304559,  0.02440453,  0.06339945],[-0.13026987, -0.13707402,  0.03528901],[-0.16967526,  0.09666435,  0.06529201],[ 0.00713871, -0.0160347 , -0.0747457 ],[-0.153492  , -0.02679045,  0.15405003],[ 0.14380134, -0.01432254,  0.0060298 ],[ 0.06080167,  0.15586558,  0.12016316],[-0.06738288, -0.17050316, -0.01980021],[-0.06808093, -0.18065212,  0.00945695],[ 0.0606755 , -0.1535798 , -0.02327429],[-0.08190185,  0.01258368,  0.14448977],[ 0.02796407,  0.06997873, -0.01131863],[-0.00435295,  0.0771695 , -0.06572173],[ 0.03078261, -0.01241169,  0.20427098],[-0.16616611,  0.0699705 ,  0.0143266 ],[ 0.01797659,  0.05513533,  0.20106261],[ 0.14751536,  0.16521037, -0.06045591],[-0.02347156,  0.0349634 , -0.18306873],[-0.00761143, -0.1804825 , -0.04505696],[-0.05923603,  0.07660733, -0.05485609],[-0.04274248,  0.01576211, -0.00113258],[ 0.11078537,  0.09919916, -0.16727984],[ 0.10242227, -0.28304468, -0.06361624],[-0.14949208,  0.07509735,  0.06701257],[ 0.17509616,  0.01160184, -0.04250359],[-0.05405429,  0.10099983, -0.06870384],[ 0.07931972, -0.00254788,  0.01875676],[ 0.11100283, -0.08818269,  0.05397712],[-0.10280561, -0.0079465 , -0.04624373],[-0.0926423 , -0.06419747, -0.02980353],[-0.24714032, -0.01025713, -0.07591281],[-0.01863226,  0.06316445,  0.04936387],[ 0.26907242,  0.03152324, -0.00699652],[-0.13399902, -0.01154447, -0.18431173],[ 0.0018933 , -0.03892686,  0.09295881],[-0.04559156, -0.05206798,  0.25439481],[-0.09885444,  0.10459513,  0.0084989 ],[ 0.04147133, -0.05236415,  0.02986451],[-0.02679958,  0.08462287,  0.05660264],[ 0.24121921,  0.03192949, -0.05681752]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_2d(self):
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, dimension='2D', random_state=42
        )
        kl.new(n_obs=10)
        points = DenseArgvals({'input_dim_0': np.linspace(0, 1, 31), 'input_dim_1': np.linspace(0, 1, 31)})

        results = _fit_inner_product(data=kl.data, points=points, n_components=3, noise_variance=0)
        
        expected_eigenvalues = np.array([0.01098398, 0.00483969, 0.00231953])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 0.        ,  0.71615987,  1.51022889,  1.99435758,   2.39004394,  2.7859392 ,  2.99860815,  3.14382369,   3.234133  ,  3.24501753,  3.20906521,  3.08761381,   2.96585157,  2.81774275,  2.57878307,  2.39337612,   2.20148976,  1.93078239,  1.73377171,  1.5376202 ,   1.27432671,  1.08887778,  0.91104729,  0.68566447,   0.53444843,  0.39773594,  0.24034327,  0.14623779,   0.07363469,  0.01393357,  0.        ], [ 0.        ,  1.81244855,  3.6862576 ,  4.72271485,   5.47356083,  6.06679209,  6.25557868,  6.25002405,   5.97027773,  5.6157121 ,  5.15723999,  4.41490437,   3.82023566,  3.21218932,  2.41737639,  1.88626996,   1.4275411 ,  0.9228097 ,  0.625029  ,  0.38593045,   0.147808  ,  0.02410044, -0.06015122, -0.12037917,  -0.13483464, -0.12917637, -0.09984776, -0.07009515,  -0.03976142, -0.00858658,  0.        ], [ 0.        ,  0.69644222,  1.26046486,  1.44190063,   1.44262318,  1.20113194,  0.87230169,  0.44165142,  -0.24969513, -0.82484715, -1.42312387, -2.20799062,  -2.76559624, -3.26711989, -3.79083703, -4.06599592,  -4.2113724 , -4.1981364 , -4.08190039, -3.87820849,  -3.47784138, -3.12837941, -2.74058228, -2.17772673,  -1.7603066 , -1.35421553, -0.85172391, -0.53255559,  -0.27500302, -0.05366662,  0.        ]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].values[:, 0]), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.16023502, -0.25916387,  0.69352094],[-0.59327901, -0.18169182, -0.15757975],[ 0.58892225, -0.14372699, -0.10404258],[-0.28024854, -0.28946203, -0.44447702],[-0.01298703, -0.09790341,  0.42423096],[ 0.21479235, -0.19854235, -0.15823092],[ 0.05588307,  0.66067552,  0.14747419],[-0.18637344,  0.51507827, -0.13311371],[ 0.03540505,  0.14717772, -0.1778395 ],[ 0.33400626, -0.15137129, -0.09853385]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))


class TestFitInnerProductMultivariate(unittest.TestCase):
    def setUp(self) -> None:
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.sparsify(0.8, 0.05)

        fdata_uni = kl.data
        fdata_sparse = kl.sparse_data

        kl_2d = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42, dimension='2D'
        )
        kl_2d.new(n_obs=10)

        fdata_uni_2d = kl_2d.data

        self.fdata = MultivariateFunctionalData([fdata_uni, fdata_sparse])
        self.fdata_2d = MultivariateFunctionalData([fdata_uni, fdata_uni_2d])

    def test_fit_inner_product_dense_and_sparse(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 31)})
        ]
        results = _fit_inner_product_multivariate( data=self.fdata, points=points, n_components=0.95, smooth=True)

        expected_eigenvalues = np.array([0.20493443, 0.16421498, 0.04150109])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions_0 = np.array([[ 1.2249371 ,  0.84056208,  0.50276354,  0.20762929,  -0.05227825, -0.26906165, -0.44325591, -0.58251026,  -0.69419659, -0.78426095, -0.85592814, -0.90889968,  -0.9390865 , -0.93887626, -0.89793533, -0.8045043 ,  -0.64654637, -0.42294067, -0.14560734,  0.19700959,   0.61107656], [ 1.42412618,  1.27035181,  1.11901867,  0.9715232 ,   0.82889742,  0.69344608,  0.568055  ,  0.45523287,   0.35750326,  0.27746617,  0.21786753,  0.18164217,   0.17192816,  0.19205248,  0.24548801,  0.3357841 ,   0.46650495,  0.63557566,  0.83512356,  1.069817  ,   1.34137968], [-2.24329848, -1.4224168 , -0.79319198, -0.33328374,  -0.00654538,  0.16189585,  0.18559866,  0.10739059,  -0.0304625 , -0.18858212, -0.33310047, -0.43728454,  -0.48207749, -0.45555727, -0.35131254, -0.1658193 ,   0.10388475,  0.45035535,  0.85673731,  1.32986497,   1.87092396]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values), np.abs(expected_eigenfunctions_0))

        expected_eigenfunctions_1 = np.array([[ 1.25348337,  0.97602952,  0.71951281,  0.4929334 ,   0.27937476,  0.08140573, -0.0923906 , -0.24215549,  -0.36239583, -0.47051838, -0.56470657, -0.64403439,  -0.71095889, -0.76867692, -0.82125315, -0.8666047 ,  -0.90616299, -0.9387784 , -0.96204084, -0.97088937,  -0.96431304, -0.93871091, -0.8921183 , -0.81562194,  -0.70568303, -0.56156024, -0.38998179, -0.18355168,   0.05954197,  0.33793609,  0.6521714 ], [ 1.4183194 ,  1.31798484,  1.21664692,  1.12272094,   1.0259768 ,  0.92142296,  0.82232459,  0.72676461,   0.64070327,  0.55837879,  0.47874646,  0.40683948,   0.34392515,  0.28789042,  0.2386897 ,  0.19916569,   0.16966955,  0.15357965,  0.14857091,  0.15692481,   0.17892189,  0.21570099,  0.26922054,  0.34266696,   0.43595732,  0.54665267,  0.67101565,  0.81505438,   0.98171712,  1.16400003,  1.36197731], [-2.35250093, -1.71640245, -1.16577491, -0.71155269,  -0.34385513, -0.05808879,  0.13713618,  0.24975845,   0.28458238,  0.26109424,  0.20012253,  0.10512357,  -0.0161009 , -0.14398704, -0.264708  , -0.36990716,  -0.45406867, -0.51441445, -0.5425536 , -0.52986953,  -0.48991676, -0.41860156, -0.30810305, -0.15162672,   0.04890799,  0.27554574,  0.52127976,  0.81661772,   1.16019101,  1.53032082,  1.92061869]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values), np.abs(expected_eigenfunctions_1))

        expected_eigenvectors = np.array([[-0.21933502, -0.37437924, -0.75586338],[-0.01017968, -0.54776564,  0.25906836],[-0.28839481,  0.53741539, -0.09435297],[-0.07213071, -0.20861088,  0.42212774],[-0.17693706, -0.24035354, -0.10503269],[-0.27071613,  0.13274718,  0.28343011],[ 0.59585341,  0.18649036, -0.26570323],[ 0.55252326, -0.00670955,  0.09978879],[ 0.1427463 ,  0.16006408, -0.04264377],[-0.27950031,  0.30269353, -0.02684826]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))

    def test_fit_inner_product_with_2d(self):
        points = [
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 21)}),
            DenseArgvals({'input_dim_0': np.linspace(0, 1, 11), 'input_dim_1': np.linspace(0, 1, 11)})
        ]
        results = _fit_inner_product_multivariate( data=self.fdata_2d, points=points, n_components=0.95, smooth=True, noise_variance=np.array([0.02, 0]))
        
        expected_eigenvalues = np.array([0.10607683, 0.0895158 , 0.021504  ])
        np.testing.assert_array_almost_equal(results['eigenvalues'], expected_eigenvalues)

        expected_eigenfunctions = np.array([[ 1.45316432,  0.9520564 ,  0.51367905,  0.13254738,  -0.20154735, -0.47822347, -0.69859421, -0.87335382,  -1.01282031, -1.12537735, -1.21571685, -1.28375094,  -1.32424928, -1.32720175, -1.27890647, -1.16372723,  -0.96565154, -0.68285604, -0.3305984 ,  0.10632211,   0.63612276], [ 2.17969848,  1.88658595,  1.6090729 ,  1.34783526,   1.10214549,  0.87699364,  0.67581442,  0.49965448,   0.34965072,  0.22740386,  0.13539994,  0.07727116,   0.05788291,  0.08324678,  0.16025963,  0.29628218,   0.49876537,  0.76540922,  1.08343263,  1.46153949,   1.90341978], [-3.04439914, -1.90493058, -1.03466229, -0.40188431,   0.04446861,  0.26949353,  0.29283702,  0.17525497,  -0.02331798, -0.24716897, -0.44864268, -0.590516  ,  -0.64678964, -0.60189648, -0.44832697, -0.18279333,   0.19717096,  0.68036159,  1.24371603,  1.89551326,   2.63652577]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[0].values), np.abs(expected_eigenfunctions))

        expected_eigenfunctions = np.array([[[ 6.94844274e-03,  6.21933734e-01,  7.85630622e-01,    6.42060670e-01,  3.49388644e-01,  6.56942797e-02,   -8.74656958e-02, -1.22119471e-01, -8.68182414e-02,   -3.01982337e-02,  1.90144727e-04],  [ 5.36539916e-04,  5.91152333e-02, -3.13860065e-02,   -1.99308387e-01, -3.70371934e-01, -4.70335612e-01,   -4.47534095e-01, -3.34297756e-01, -1.85532676e-01,   -5.61838755e-02,  2.70874584e-04],  [ 1.06678704e-04, -1.88787909e-01, -3.79867108e-01,   -5.42304703e-01, -6.44858069e-01, -6.56309810e-01,   -5.60070447e-01, -3.93975661e-01, -2.10489045e-01,   -6.20994245e-02,  2.95000279e-04],  [-1.22554339e-05, -2.15366098e-01, -4.00150495e-01,   -5.37146222e-01, -6.09274078e-01, -5.99473309e-01,   -5.01374180e-01, -3.48383994e-01, -1.84601079e-01,   -5.41422020e-02,  2.56201565e-04],  [ 4.23152890e-05, -1.20062104e-01, -2.40384880e-01,   -3.41948775e-01, -4.05553005e-01, -4.12012470e-01,   -3.51229127e-01, -2.46913470e-01, -1.31863050e-01,   -3.88911022e-02,  1.84407071e-04],  [ 1.33936906e-04, -2.28169059e-03, -4.86640792e-02,   -1.14769888e-01, -1.75575867e-01, -2.06072822e-01,   -1.89390270e-01, -1.38937031e-01, -7.62606392e-02,   -2.29226823e-02,  1.09547111e-04],  [ 1.74849350e-04,  5.99728413e-02,  5.86943209e-02,    2.00945576e-02, -3.10932987e-02, -7.01474070e-02,   -7.88953424e-02, -6.35312891e-02, -3.67988477e-02,   -1.14529272e-02,  5.56320772e-05],  [ 1.49340801e-04,  6.83234864e-02,  8.35902745e-02,    6.39545550e-02,  2.82416075e-02, -4.73095370e-03,   -2.05857249e-02, -2.14649731e-02, -1.39511763e-02,   -4.63447737e-03,  2.31504924e-05],  [ 9.03933374e-05,  4.57957019e-02,  5.96999640e-02,    5.18817378e-02,  3.29061398e-02,  1.33342961e-02,    1.41444801e-03, -3.21047918e-03, -3.21044538e-03,   -1.25940053e-03,  6.67096073e-06],  [ 3.19572851e-05,  1.54519517e-02,  2.07544700e-02,    1.90060507e-02,  1.34296147e-02,  7.24693176e-03,    3.00989719e-03,  7.77564768e-04, -6.08862683e-05,   -1.17427825e-04,  7.63766734e-07],  [-2.97006692e-05, -7.86276874e-05, -1.06676349e-04,   -9.96644483e-05, -7.31425651e-05, -4.26621621e-05,   -2.07608857e-05, -7.99802015e-06, -1.91903317e-06,   -7.02764842e-08,  4.94683357e-09]], [[ 6.57015732e-03,  1.00381063e+00,  1.49081919e+00,    1.58378969e+00,  1.41305048e+00,  1.10888785e+00,    7.83437006e-01,  4.82422192e-01,  2.33416596e-01,    6.39513328e-02, -2.25398254e-04],  [ 7.24611253e-04,  4.88357186e-01,  7.29481837e-01,    7.81245442e-01,  7.04388476e-01,  5.59637840e-01,    3.99830605e-01,  2.48445286e-01,  1.21070573e-01,    3.32815774e-02, -1.51172160e-04],  [ 4.25573219e-04,  2.68338595e-01,  3.94332312e-01,    4.13318991e-01,  3.62306992e-01,  2.78295189e-01,    1.92773554e-01,  1.16733487e-01,  5.56574854e-02,    1.50185615e-02, -6.73138279e-05],  [ 4.26037781e-04,  2.46188665e-01,  3.46106384e-01,    3.40710951e-01,  2.72722323e-01,  1.84846854e-01,    1.11904457e-01,  5.93727411e-02,  2.48428775e-02,    5.89243108e-03, -2.40681688e-05],  [ 5.59120755e-04,  3.18520500e-01,  4.38019602e-01,    4.16811483e-01,  3.15634554e-01,  1.95206559e-01,    1.04275241e-01,  4.70551048e-02,  1.57906545e-02,    2.70572457e-03, -7.76706301e-06],  [ 6.59142396e-04,  3.81991396e-01,  5.23349522e-01,    4.95071668e-01,  3.71092389e-01,  2.25320832e-01,    1.16957596e-01,  5.04830587e-02,  1.56690519e-02,    2.26199521e-03, -4.74180055e-06],  [ 6.26115376e-04,  3.58813718e-01,  4.91260405e-01,    4.64211976e-01,  3.47303693e-01,  2.10146853e-01,    1.08476442e-01,  4.64026668e-02,  1.41594240e-02,    1.95664274e-03, -3.65221675e-06],  [ 4.69840410e-04,  2.66267499e-01,  3.64425435e-01,    3.44167767e-01,  2.57240472e-01,  1.55371706e-01,    7.99694133e-02,  3.40461051e-02,  1.02940808e-02,    1.38781872e-03, -2.40173089e-06],  [ 2.65810632e-04,  1.47187839e-01,  2.01404501e-01,    1.90143791e-01,  1.42033891e-01,  8.56931271e-02,    4.40273750e-02,  1.86891330e-02,  5.61845106e-03,    7.45521219e-04, -1.22230739e-06],  [ 9.07236115e-05,  4.44540338e-02,  6.08194992e-02,    5.74057140e-02,  4.28637362e-02,  2.58416553e-02,    1.32609525e-02,  5.61793305e-03,  1.68229374e-03,    2.20762935e-04, -3.45320702e-07],  [-8.00739067e-05, -2.14584486e-04, -2.92761549e-04,   -2.75981118e-04, -2.05783475e-04, -1.23711282e-04,   -6.33618344e-05, -2.67477663e-05, -7.93634533e-06,   -9.97218465e-07, -9.76484845e-09]], [[-5.35432473e-03, -1.30731551e+00, -1.51709900e+00,   -1.01950899e+00, -2.22384260e-01,  4.66672564e-01,    7.41439207e-01,  6.66479970e-01,  4.07739502e-01,    1.31398620e-01, -4.86850505e-04],  [-2.25661575e-03, -1.04053245e+00, -1.29848964e+00,   -1.03649182e+00, -5.27003959e-01, -4.23822206e-02,    2.08040206e-01,  2.49409694e-01,  1.69895613e-01,    5.77760912e-02, -2.92031640e-04],  [-1.31199288e-03, -6.65079047e-01, -8.71627261e-01,   -7.64809839e-01, -4.95477230e-01, -2.14423376e-01,   -3.96875485e-02,  3.25581258e-02,  3.88961924e-02,    1.59657020e-02, -8.61093009e-05],  [-4.65712315e-04, -2.58758025e-01, -3.56263281e-01,   -3.39657289e-01, -2.58042549e-01, -1.60504949e-01,   -8.64845583e-02, -3.95301071e-02, -1.35445063e-02,   -2.41405446e-03,  8.06847428e-06],  [ 1.97782537e-04,  1.01163777e-01,  1.25756864e-01,    9.95753097e-02,  4.93821494e-02,  1.92964868e-03,   -2.22462372e-02, -2.57327642e-02, -1.73334984e-02,   -5.86277585e-03,  2.99843532e-05],  [ 5.95201490e-04,  3.37463530e-01,  4.52652897e-01,    4.13566477e-01,  2.90940322e-01,  1.55484989e-01,    6.31657902e-02,  1.50931388e-02, -2.36779776e-03,   -2.87734479e-03,  1.91229511e-05],  [ 7.01434369e-04,  3.98372498e-01,  5.40360858e-01,    5.02965111e-01,  3.66327874e-01,  2.10563565e-01,    9.94659926e-02,  3.61114915e-02,  7.25578707e-03,   -3.73594531e-04,  8.09850167e-06],  [ 5.77906251e-04,  3.26815166e-01,  4.45133302e-01,    4.17124790e-01,  3.07510608e-01,  1.80989183e-01,    8.92015490e-02,  3.52104279e-02,  9.02114984e-03,    6.16492321e-04,  2.22714625e-06],  [ 3.44222218e-04,  1.91170111e-01,  2.60939102e-01,    2.45369470e-01,  1.82006775e-01,  1.08383568e-01,    5.44957315e-02,  2.22989874e-02,  6.21238943e-03,    6.41982482e-04, -4.53550998e-08],  [ 1.21140581e-04,  5.98599188e-02,  8.18122907e-02,    7.70921419e-02,  5.73960159e-02,  3.44164316e-02,    1.75056019e-02,  7.30695346e-03,  2.12360677e-03,    2.54657857e-04, -2.71295058e-07],  [-1.10210226e-04, -2.94236222e-04, -4.01298655e-04,   -3.78099036e-04, -2.81668852e-04, -1.69042900e-04,   -8.63398151e-05, -3.62791897e-05, -1.06644558e-05,   -1.30235387e-06, -1.15635222e-08]]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenfunctions'].data[1].values), np.abs(expected_eigenfunctions))

        expected_eigenvectors = np.array([[-0.17525454, -0.38914961, -0.75116895],[ 0.06483239, -0.55178677,  0.25166358],[-0.35534836,  0.49722163, -0.07620013],[-0.04554509, -0.22914034,  0.43769575],[-0.14828248, -0.24555842, -0.12635742],[-0.28459352,  0.09834559,  0.28051597],[ 0.56429909,  0.26811569, -0.26416144],[ 0.54958109,  0.06389054,  0.09736687],[ 0.12353642,  0.17164796, -0.02900261],[-0.31308235,  0.26259752, -0.01638537]])
        np.testing.assert_array_almost_equal(np.abs(results['eigenvectors']), np.abs(expected_eigenvectors))


class TestTransformNumericalIntegrationDense(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise(0.05)
        self.fdata_uni = kl.noisy_data

        uf = UFPCA(n_components=2, method='covariance')
        uf.fit(self.fdata_uni)
        self.uf_eigen = uf.eigenfunctions

    def test_numerical_integration(self):
        scores_dense = _transform_numerical_integration_dense(self.fdata_uni, self.uf_eigen)
        expected_scores = np.array([[ 0.23185638,  0.27092884],[ 0.02684859,  0.41977244],[ 0.35129452, -0.57867029],[ 0.04697217,  0.06655563],[ 0.20541785,  0.12994119],[ 0.2936377 , -0.18557023],[-0.59218129, -0.25986862],[-0.55898506, -0.14784151],[-0.09181077, -0.19276825],[ 0.323464  , -0.3623928 ]])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_numerical_integration_2d(self):
        kl = KarhunenLoeve(basis_name='bsplines', n_functions=5, argvals=np.linspace(0, 1, 10), dimension='2D', random_state=42)
        kl.new(n_obs=10)
        fdata = kl.data

        uf = UFPCA(n_components=2, method='inner-product')
        uf.fit(fdata)

        scores = _transform_numerical_integration_dense(fdata, uf.eigenfunctions)
        expected_scores = np.array([[-0.0394198 , -0.06328776],[-0.17285293, -0.02118685],[ 0.22379154, -0.04953131],[-0.06864232, -0.04784868],[ 0.01051856, -0.05030543],[ 0.09173156, -0.06314587],[ 0.07885379,  0.15255235],[-0.0059458 ,  0.12968088],[ 0.05558565,  0.04540844],[ 0.13780341, -0.04464337]])

        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))


class TestTransformNumericalIntegrationIrregular(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise(0.05)
        kl.sparsify(0.95, 0.01)

        self.fdata_sparse = kl.sparse_data

        uf = UFPCA(n_components=0.95, method='covariance')
        uf.fit(self.fdata_sparse)
        self.uf_eigen = uf.eigenfunctions

    def test_numerical_integration(self):
        scores_sparse = _transform_numerical_integration_irregular(self.fdata_sparse, self.uf_eigen)
        expected_scores = np.array([[ 0.29502383,  0.22185696,  0.37955955],[ 0.07009001,  0.4000384 , -0.06409966],[ 0.26955649, -0.60748825,  0.06614514],[ 0.10131074,  0.09176254, -0.15807097],[ 0.21247166,  0.09682126,  0.06592961],[ 0.27839683, -0.23017792, -0.09341849],[-0.58356801, -0.21205432,  0.20217296],[-0.51700857, -0.01785526, -0.00080928],[-0.13144534, -0.22761325,  0.07855134],[ 0.27875833, -0.39452645,  0.04363794]])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))


class TestTransformNumericalIntegrationMultivariate(unittest.TestCase):
    def setUp(self):
        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.sparsify(0.8, 0.05)

        fdata_uni = kl.data
        fdata_sparse = kl.sparse_data
        self.fdata = MultivariateFunctionalData([fdata_uni, fdata_sparse])

    def test_transform_numerical_integration_multivariate(self):
        mfpca = MFPCA(method='inner-product', n_components=0.99, normalize=True)
        mfpca.fit(data=self.fdata)
        scores = _transform_numerical_integration_multivariate(self.fdata, mfpca.eigenfunctions)

        expected_scores = np.array([[-0.35139229, -0.34827968, -0.5562152 , -0.10895206],[-0.05380525, -0.5665148 ,  0.09811543,  0.08318359],[-0.44061057,  0.81882962, -0.12433818, -0.08193078],[-0.11938022, -0.11008325,  0.17996411, -0.25698047],[-0.29106502, -0.17532077, -0.13202266,  0.06309889],[-0.41455419,  0.30796144,  0.11344262,  0.01923513],[ 0.80593866,  0.35442777, -0.25598615, -0.00655328],[ 0.74868318,  0.11826274, -0.00387261, -0.00247268],[ 0.16741531,  0.33367999, -0.0970138 ,  0.0194133 ],[-0.43079663,  0.51820054, -0.08587247,  0.10891138]])
        np.testing.assert_array_almost_equal(np.abs(scores), np.abs(expected_scores))


class TestTransformPACE(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise_and_sparsify(0.05, 0.9, 0.05)
        self.fdata_uni = kl.noisy_data
        self.fdata_sparse = kl.sparse_data

        uf_dense = UFPCA(n_components=2, method='covariance')
        uf_dense.fit(self.fdata_uni)
        self.uf_dense = uf_dense

        uf_sparse = UFPCA(n_components=2, method='covariance')
        uf_sparse.fit(self.fdata_sparse)
        self.uf_sparse = uf_sparse

    def test_pace_dense(self):
        scores_dense = scores_dense = _transform_pace_dense(
            self.fdata_uni, self.uf_dense.eigenfunctions, self.uf_dense.eigenvalues,
            self.uf_dense.covariance, self.uf_dense._noise_variance
        )
        expected_scores = np.array([[ 0.2250209 ,  0.26640435], [ 0.03071671,  0.42263802], [ 0.34750068, -0.57693324], [ 0.04796388,  0.06556203], [ 0.20086595,  0.12434758], [ 0.29359884, -0.18454036], [-0.5901051 , -0.25663729], [-0.55689136, -0.14721497], [-0.08779404, -0.18558396], [ 0.32294073, -0.35842484]])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_pace_irregular(self):
        scores_sparse = _transform_pace_irregular(
            self.fdata_sparse, self.uf_sparse.eigenfunctions,
            self.uf_sparse.eigenvalues, self.uf_sparse.covariance,
            self.uf_sparse._noise_variance
        )
        expected_scores = np.array([[ 0.21468274,  0.17152223],[ 0.08052812,  0.42301138],[ 0.29872919, -0.62039464],[ 0.05720657,  0.0820881 ],[ 0.22212744,  0.12684133],[ 0.26609097, -0.20669733],[-0.62263044, -0.21029513],[-0.56512957, -0.10453311],[-0.10389419, -0.1884054 ],[ 0.28613813, -0.39222563]])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))


class TestTransformInnPro(unittest.TestCase):
    def setUp(self):
        warnings.simplefilter('ignore', category=UserWarning)

        kl = KarhunenLoeve(
            basis_name='bsplines', n_functions=5, random_state=42
        )
        kl.new(n_obs=10)
        kl.add_noise_and_sparsify(0.05, 0.9, 0.05)
        self.fdata_uni = kl.noisy_data
        self.fdata_sparse = kl.sparse_data

        uf_dense = UFPCA(n_components=2, method='inner-product')
        uf_dense.fit(self.fdata_uni)
        self.uf_dense = uf_dense

        uf_sparse = UFPCA(n_components=2, method='inner-product')
        uf_sparse.fit(self.fdata_sparse)
        self.uf_sparse = uf_sparse

    def test_pace_dense(self):
        scores_dense = scores_dense = _transform_innpro(
            self.fdata_uni, self.uf_dense._eigenvectors, self.uf_dense.eigenvalues
        )
        expected_scores = np.array([[-0.20008122, -0.35917685],[-0.0060345 , -0.50948171],[-0.32688088,  0.49534243],[-0.02326554, -0.15936427],[-0.17266196, -0.21488918],[-0.28291378,  0.09745108],[ 0.6209799 ,  0.17771336],[ 0.57871673,  0.05379105],[ 0.11103202,  0.1062688 ],[-0.29411576,  0.27046191]])
        np.testing.assert_array_almost_equal(np.abs(scores_dense), np.abs(expected_scores))

    def test_pace_irregular(self):
        scores_sparse = _transform_innpro(
            self.fdata_sparse, self.uf_sparse._eigenvectors, self.uf_sparse.eigenvalues
        )
        expected_scores = np.array([[-0.20302867, -0.36076181],[-0.03589738, -0.51099149],[-0.30730618,  0.53774483],[-0.03362226, -0.14896928],[-0.20057172, -0.22435715],[-0.26726809,  0.10645834],[ 0.62510127,  0.15013469],[ 0.57992695,  0.0435626 ],[ 0.10344107,  0.10811265],[-0.29378279,  0.26613948]])
        np.testing.assert_array_almost_equal(np.abs(scores_sparse), np.abs(expected_scores))
